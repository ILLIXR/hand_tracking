#include "openxr/openxr_loader_negotiation.h"
#ifdef __cplusplus
    #define EXTERNC extern "C"
#else
    #define EXTERNC
#endif

const char* illixr_shm_name          = "ILLIXR_OXR_SHM";                               //!< shared memory segment name
const char* illixr_shm_swap[2]       = {"ILLIXR_SHM_SWAP1", "ILLIXR_SHM_SWAP2"};       //!< shared memory swap space names
const char* illixr_shm_current       = "ILLIXR_SHM_CURRENT";                           //!< current swap space name
const char* illixr_shm_mutex_latest  = "ILLIXR_OXR_MUTEX_L";                           //!< current mutex name
const char* illixr_shm_mutex_swap[2] = {"ILLIXR_OXR_MUTEX_S1", "ILLIXR_OXR_MUTEX_S2"}; //!< mutex names

/**
 * These functions are either called directly by the OpenXR application or are sent as handles to the application to be called
 * indirectly. They deal with setting up and identifying function handles, but do not work directly with the hand tracking
 * itself.
 */

/**
 * Returns properties of available instance extensions
 * @param layerName Either NULL or a pointer to a string naming the API layer to retrieve extensions from, as returned by
 * xrEnumerateApiLayerProperties.
 * @param propertyCapacityInput The capacity of the properties array, or 0 to indicate a request to retrieve the required
 * capacity.
 * @param propertyCountOutput Pointer to the count of properties written, or a pointer to the required capacity in the case that
 * propertyCapacityInput is insufficient.
 * @param properties Pointer to an array of XrExtensionProperties structures, but can be NULL if propertyCapacityInput is 0.
 * @return XrResult instance.
 */
XrResult illixr_xrEnumerateInstanceExtensionProperties(const char* layerName, uint32_t propertyCapacityInput,
                                                       uint32_t* propertyCountOutput, XrExtensionProperties* properties);

/**
 * Returns up to requested number of global layer properties
 * @param propertyCapacityInput The capacity of the properties array, or 0 to indicate a request to retrieve the required
 * capacity.
 * @param propertyCountOutput Pointer to the count of properties written, or a pointer to the required capacity in the case that
 * propertyCapacityInput is insufficient.
 * @param properties Pointer to an array of XrApiLayerProperties structures, but can be NULL if propertyCapacityInput is 0.
 * @return XrResult instance.
 */
XrResult illixr_xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput, uint32_t* propertyCountOutput,
                                              XrApiLayerProperties* properties);

/**
 * xrCreateInstance for API layers
 * @param info Pointer to the XrInstanceCreateInfo information passed by the application into the outer xrCreateInstance
 * function.
 * @param layerInfo Pointer to an XrApiLayerCreateInfo structure that contains special information required by a API layer
 * during its create instance process. This is generated by the loader.
 * @param instance Pointer to store the returned instance in, just as in the standard xrCreateInstance function.
 * @return XrResult instance.
 */
XrResult illixr_xrCreateApiLayerInstance(const XrInstanceCreateInfo* info, const XrApiLayerCreateInfo* layerInfo,
                                         XrInstance* instance);

/**
 * API layer exported negotiation function
 * @param loaderInfo Pointer to a valid XrNegotiateLoaderInfo structure.
 * @param layerName NULL or a valid C-style NULL-terminated string listing the name of an API layer which the loader is
 * attempting to negotiate with.
 * @param layerRequest Valid pointer to an XrNegotiateApiLayerRequest structure, with minimal initialization, as subsequently
 * described, to be fully populated by the called API layer.
 * @return XrResult instance.
 */
EXTERNC [[maybe_unused]] XrResult illixr_xrNegotiateLoaderApiLayerInterface(const XrNegotiateLoaderInfo* loaderInfo,
                                                                            const char*                  layerName,
                                                                            XrNegotiateApiLayerRequest*  layerRequest);

/**
 * Gets a function pointer for an OpenXR function
 * @param instance The instance that the function pointer will be compatible with, or NULL for functions not dependent on any
 * instance.
 * @param name The name of the function to obtain.
 * @param function The address of the function pointer to get.
 * @return XrResult instance.
 */
XrResult XRAPI_CALL illixr_xrGetInstanceProcAddr(XrInstance instance, const char* name, PFN_xrVoidFunction* function);
