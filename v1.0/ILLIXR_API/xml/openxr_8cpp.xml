<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="openxr_8cpp" kind="file" language="C++">
    <compoundname>openxr.cpp</compoundname>
    <includes refid="interface_8h" local="yes">interface.h</includes>
    <includes local="yes">openxr/openxr_loader_negotiation.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">malloc.h</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="2">
        <label>interface.h</label>
        <link refid="interface_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp</label>
        <link refid="openxr_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstring</label>
      </node>
      <node id="6">
        <label>malloc.h</label>
      </node>
      <node id="3">
        <label>openxr/openxr.h</label>
      </node>
      <node id="4">
        <label>openxr/openxr_loader_negotiation.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="openxr_8cpp_1a19683a70123970ef8417bb7531ad4bbb" prot="public" static="no">
        <name>XR_NO_PROTOTYPES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="2" column="9" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="openxr_8cpp_1a97f83918221ee908fd12e4acb193f24e" prot="public" static="no">
        <name>INTERFACE_VERSION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="12" column="9" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="openxr_8cpp_1ad97188edfdd667de971027b35330fa41" prot="public" static="no">
        <name>API_VERSION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="13" column="9" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="openxr_8cpp_1abae3d14cbbaf9d1a2f0c8f0384cdd022" prot="public" static="no">
        <name>PRINT_ERROR</name>
        <param><defname>...</defname></param>
        <initializer>do {                              \
    fprintf(stderr, __VA_ARGS__); \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="15" column="9" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="openxr_8cpp_1ac8d3e2bca2bb5706038ba2f68ed4a52f" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string kLayerName</definition>
        <argsstring></argsstring>
        <name>kLayerName</name>
        <initializer>= &quot;ILLIXR_HT&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="20" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="openxr_8cpp_1ac91f75acf82d2a6ceba6de3b681dbcc4" prot="public" static="no" mutable="no">
        <type>PFN_xrGetInstanceProcAddr</type>
        <definition>PFN_xrGetInstanceProcAddr nextXrGetInstanceProcAddr</definition>
        <argsstring></argsstring>
        <name>nextXrGetInstanceProcAddr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="22" column="44" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="openxr_8cpp_1a0ad01d0af66c4cf14d4e9b859f30185f" prot="public" static="no" mutable="no">
        <type>PFN_xrEnumerateInstanceExtensionProperties</type>
        <definition>PFN_xrEnumerateInstanceExtensionProperties NextEnumerateInstanceExtensionProperties</definition>
        <argsstring></argsstring>
        <name>NextEnumerateInstanceExtensionProperties</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="23" column="44" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="openxr_8cpp_1a6b9deb29e2fb5586eed4b94217872abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>XrResult</type>
        <definition>XrResult illixr_xrEnumerateInstanceExtensionProperties</definition>
        <argsstring>(const char *layerName, uint32_t propertyCapacityInput, uint32_t *propertyCountOutput, XrExtensionProperties *properties)</argsstring>
        <name>illixr_xrEnumerateInstanceExtensionProperties</name>
        <param>
          <type>const char *</type>
          <declname>layerName</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>propertyCapacityInput</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>propertyCountOutput</declname>
        </param>
        <param>
          <type>XrExtensionProperties *</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These functions are either called directly by the OpenXR application or are sent as handles to the application to be called indirectly. They deal with setting up and identifying function handles, but do not work directly with the hand tracking itself. Returns properties of available instance extensions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layerName</parametername>
</parameternamelist>
<parameterdescription>
<para>Either NULL or a pointer to a string naming the API layer to retrieve extensions from, as returned by xrEnumerateApiLayerProperties. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propertyCapacityInput</parametername>
</parameternamelist>
<parameterdescription>
<para>The capacity of the properties array, or 0 to indicate a request to retrieve the required capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propertyCountOutput</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the count of properties written, or a pointer to the required capacity in the case that propertyCapacityInput is insufficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of XrExtensionProperties structures, but can be NULL if propertyCapacityInput is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XrResult instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="25" column="10" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="openxr_8cpp_1a1dbd8c61fed851923ae75080d855a5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>XrResult</type>
        <definition>XrResult illixr_xrEnumerateApiLayerProperties</definition>
        <argsstring>(uint32_t propertyCapacityInput, uint32_t *propertyCountOutput, XrApiLayerProperties *properties)</argsstring>
        <name>illixr_xrEnumerateApiLayerProperties</name>
        <param>
          <type>uint32_t</type>
          <declname>propertyCapacityInput</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>propertyCountOutput</declname>
        </param>
        <param>
          <type>XrApiLayerProperties *</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns up to requested number of global layer properties <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propertyCapacityInput</parametername>
</parameternamelist>
<parameterdescription>
<para>The capacity of the properties array, or 0 to indicate a request to retrieve the required capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propertyCountOutput</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the count of properties written, or a pointer to the required capacity in the case that propertyCapacityInput is insufficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of XrApiLayerProperties structures, but can be NULL if propertyCapacityInput is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XrResult instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="47" column="10" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="47" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="openxr_8cpp_1ac048e907dd82c9f662616116eb6ab777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>XrResult</type>
        <definition>XrResult illixr_xrCreateApiLayerInstance</definition>
        <argsstring>(const XrInstanceCreateInfo *info, const XrApiLayerCreateInfo *layerInfo, XrInstance *instance)</argsstring>
        <name>illixr_xrCreateApiLayerInstance</name>
        <param>
          <type>const XrInstanceCreateInfo *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const XrApiLayerCreateInfo *</type>
          <declname>layerInfo</declname>
        </param>
        <param>
          <type>XrInstance *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>xrCreateInstance for API layers <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the XrInstanceCreateInfo information passed by the application into the outer xrCreateInstance function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an XrApiLayerCreateInfo structure that contains special information required by a API layer during its create instance process. This is generated by the loader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the returned instance in, just as in the standard xrCreateInstance function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XrResult instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="65" column="10" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="65" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="openxr_8cpp_1ae5ab657cf9afd3ea1ed5660e047ab9e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>XrResult XRAPI_CALL</type>
        <definition>XrResult XRAPI_CALL illixr_xrGetInstanceProcAddr</definition>
        <argsstring>(XrInstance instance, const char *name, PFN_xrVoidFunction *function)</argsstring>
        <name>illixr_xrGetInstanceProcAddr</name>
        <param>
          <type>XrInstance</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>PFN_xrVoidFunction *</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a function pointer for an OpenXR function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The instance that the function pointer will be compatible with, or NULL for functions not dependent on any instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to obtain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the function pointer to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XrResult instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="97" column="21" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="97" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="openxr_8cpp_1a5291a0eeb41f07a1d16b201c62c1928b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>XrResult</type>
        <definition>XrResult illixr_xrNegotiateLoaderApiLayerInterface</definition>
        <argsstring>(const XrNegotiateLoaderInfo *loaderInfo, const char *layerName, XrNegotiateApiLayerRequest *layerRequest)</argsstring>
        <name>illixr_xrNegotiateLoaderApiLayerInterface</name>
        <param>
          <type>const XrNegotiateLoaderInfo *</type>
          <declname>loaderInfo</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>layerName</declname>
        </param>
        <param>
          <type>XrNegotiateApiLayerRequest *</type>
          <declname>layerRequest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>API layer exported negotiation function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loaderInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid XrNegotiateLoaderInfo structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerName</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL or a valid C-style NULL-terminated string listing the name of an API layer which the loader is attempting to negotiate with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerRequest</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an XrNegotiateApiLayerRequest structure, with minimal initialization, as subsequently described, to be fully populated by the called API layer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XrResult instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" line="143" column="11" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp" bodystart="143" bodyend="172"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>XR_NO_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XR_NO_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;interface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;openxr/openxr_loader_negotiation.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;malloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERFACE_VERSION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>API_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRINT_ERROR(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor">do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>kLayerName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ILLIXR_HT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">PFN_xrGetInstanceProcAddr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextXrGetInstanceProcAddr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">PFN_xrEnumerateInstanceExtensionProperties<sp/>NextEnumerateInstanceExtensionProperties{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">XrResult<sp/>illixr_xrEnumerateInstanceExtensionProperties(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>layerName,<sp/>uint32_t<sp/>propertyCapacityInput,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t*<sp/>propertyCountOutput,<sp/>XrExtensionProperties*<sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>OpenXR<sp/>specification<sp/>says<sp/>that<sp/>this<sp/>should<sp/>work<sp/>without<sp/>an<sp/>instance,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>however,<sp/>a<sp/>&apos;next&apos;<sp/>pointer<sp/>is<sp/>needed<sp/>to<sp/>query<sp/>extensions<sp/>that<sp/>might<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>provided<sp/>by<sp/>another<sp/>API<sp/>layer,<sp/>and<sp/>the<sp/>OpenXR<sp/>*Loader*<sp/>spec<sp/>says:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;an<sp/>implicit<sp/>API<sp/>layer,<sp/>it<sp/>must<sp/>add<sp/>its<sp/>own<sp/>instance<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contents<sp/>to<sp/>the<sp/>list<sp/>of<sp/>extensions.&quot;;<sp/>this<sp/>means<sp/>we<sp/>-<sp/>and<sp/>any<sp/>lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>layers<sp/>-<sp/>need<sp/>the<sp/>&apos;next&apos;<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(propertyCountOutput<sp/>==<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_VALIDATION_FAILURE;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layerName<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>NextEnumerateInstanceExtensionProperties)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NextEnumerateInstanceExtensionProperties(layerName,<sp/>propertyCapacityInput,<sp/>propertyCountOutput,<sp/>properties);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>*propertyCountOutput<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_SUCCESS;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">XrResult<sp/>illixr_xrEnumerateApiLayerProperties(uint32_t<sp/>propertyCapacityInput,<sp/>uint32_t*<sp/>propertyCountOutput,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrApiLayerProperties*<sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(propertyCapacityInput<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_SIZE_INSUFFICIENT;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>*properties<sp/>=<sp/>XrApiLayerProperties{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>XR_TYPE_API_LAYER_PROPERTIES,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.specVersion<sp/><sp/>=<sp/>XR_CURRENT_API_VERSION,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.layerVersion<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.description<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ILLIXR<sp/>hand<sp/>tracking&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strncpy(properties-&gt;layerName,<sp/>kLayerName.c_str(),<sp/>XR_MAX_API_LAYER_NAME_SIZE);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>*propertyCountOutput<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_SUCCESS;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">XrResult<sp/>illixr_xrCreateApiLayerInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XrInstanceCreateInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XrApiLayerCreateInfo*<sp/>layerInfo,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrInstance*<sp/>instance)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>lname<sp/>=<sp/>layerInfo-&gt;nextInfo-&gt;layerName;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>some<sp/>error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layerInfo-&gt;structType<sp/>!=<sp/>XR_LOADER_INTERFACE_STRUCT_API_LAYER_CREATE_INFO<sp/>||</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerInfo-&gt;structVersion<sp/>!=<sp/>XR_API_LAYER_CREATE_INFO_STRUCT_VERSION<sp/>||</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerInfo-&gt;structSize<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(XrApiLayerCreateInfo)<sp/>||<sp/>layerInfo-&gt;nextInfo<sp/>==<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerInfo-&gt;nextInfo-&gt;structType<sp/>!=<sp/>XR_LOADER_INTERFACE_STRUCT_API_LAYER_NEXT_INFO<sp/>||</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerInfo-&gt;nextInfo-&gt;structVersion<sp/>!=<sp/>XR_API_LAYER_NEXT_INFO_STRUCT_VERSION<sp/>||</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerInfo-&gt;nextInfo-&gt;structSize<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(XrApiLayerNextInfo)<sp/>||<sp/>kLayerName<sp/>!=<sp/>lname<sp/>||</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerInfo-&gt;nextInfo-&gt;nextGetInstanceProcAddr<sp/>==<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerInfo-&gt;nextInfo-&gt;nextCreateApiLayerInstance<sp/>==<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_INITIALIZATION_FAILED;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nextLayerCreateInfo<sp/><sp/><sp/><sp/><sp/>=<sp/>*layerInfo;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>nextLayerCreateInfo.nextInfo<sp/>=<sp/>layerInfo-&gt;nextInfo-&gt;next;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>down<sp/>the<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>layerInfo-&gt;nextInfo-&gt;nextCreateApiLayerInstance(info,<sp/>&amp;nextLayerCreateInfo,<sp/>instance);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XR_FAILED(res))<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>nextXrGetInstanceProcAddr<sp/>=<sp/>layerInfo-&gt;nextInfo-&gt;nextGetInstanceProcAddr;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextXrGetInstanceProcAddr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_HANDLE_INVALID;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>handle<sp/>for<sp/>our<sp/>version<sp/>of<sp/>xrGetInstanceProcAddr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>nextXrGetInstanceProcAddr(*instance,<sp/></highlight><highlight class="stringliteral">&quot;xrEnumerateInstanceExtensionProperties&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PFN_xrVoidFunction*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;NextEnumerateInstanceExtensionProperties));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">XrResult<sp/>XRAPI_CALL<sp/>illixr_xrGetInstanceProcAddr(XrInstance<sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>PFN_xrVoidFunction*<sp/>function)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>f_name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>supported<sp/>without<sp/>an<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>function<sp/>pointer<sp/>to<sp/>the<sp/>requested<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xrEnumerateInstanceExtensionProperties&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*function<sp/>=<sp/>(PFN_xrVoidFunction)<sp/>&amp;illixr_xrEnumerateInstanceExtensionProperties;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_SUCCESS;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xrEnumerateApiLayerProperties&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*function<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PFN_xrVoidFunction</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;illixr_xrEnumerateApiLayerProperties);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_SUCCESS;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(instance<sp/>&amp;&amp;<sp/>nextXrGetInstanceProcAddr))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_HANDLE_INVALID;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>*function<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>nextXrGetInstanceProcAddr(instance,<sp/>name,<sp/>function);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XR_FAILED(ret)<sp/>||<sp/>!*function)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xrCreateHandTrackerEXT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*function<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PFN_xrVoidFunction</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;illixr_xrCreateHandTrackerEXT);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xrDestroyHandTrackerEXT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*function<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PFN_xrVoidFunction</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;illixr_xrDestroyHandTrackerEXT);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xrLocateHandJointsEXT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*function<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PFN_xrVoidFunction</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;illixr_xrLocateHandJointsEXT);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">[[maybe_unused]]<sp/>XrResult<sp/>illixr_xrNegotiateLoaderApiLayerInterface(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XrNegotiateLoaderInfo*<sp/>loaderInfo,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerName,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrNegotiateApiLayerRequest*<sp/><sp/>layerRequest)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>lname<sp/>=<sp/>layerName;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lname<sp/>!=<sp/>kLayerName)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_INITIALIZATION_FAILED;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>some<sp/>error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loaderInfo<sp/>==<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>0)<sp/>||<sp/>loaderInfo-&gt;structType<sp/>!=<sp/>XR_LOADER_INTERFACE_STRUCT_LOADER_INFO<sp/>||</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loaderInfo-&gt;structSize<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(XrNegotiateLoaderInfo)<sp/>||<sp/>loaderInfo-&gt;structVersion<sp/>!=<sp/>XR_LOADER_INFO_STRUCT_VERSION)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_INITIALIZATION_FAILED;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layerRequest<sp/>==<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>0)<sp/>||<sp/>layerRequest-&gt;structType<sp/>!=<sp/>XR_LOADER_INTERFACE_STRUCT_API_LAYER_REQUEST<sp/>||</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerRequest-&gt;structVersion<sp/>!=<sp/>XR_API_LAYER_INFO_STRUCT_VERSION<sp/>||</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerRequest-&gt;structSize<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(XrNegotiateApiLayerRequest))<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_INITIALIZATION_FAILED;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loaderInfo-&gt;minInterfaceVersion<sp/>&gt;<sp/>INTERFACE_VERSION<sp/>||<sp/>loaderInfo-&gt;maxInterfaceVersion<sp/>&lt;<sp/>INTERFACE_VERSION)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINT_ERROR(</highlight><highlight class="stringliteral">&quot;ILLIXR<sp/>ht<sp/>only<sp/>supports<sp/>OpenXR<sp/>version<sp/>%d<sp/>which<sp/>is<sp/>not<sp/>between<sp/>the<sp/>requested<sp/>%d<sp/>and<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERFACE_VERSION,<sp/>loaderInfo-&gt;minInterfaceVersion,<sp/>loaderInfo-&gt;maxInterfaceVersion);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_ERROR_INITIALIZATION_FAILED;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>layerRequest-&gt;layerInterfaceVersion<sp/>=<sp/>XR_CURRENT_LOADER_API_LAYER_VERSION;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>layerRequest-&gt;layerApiVersion<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>API_VERSION;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>function<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>layerRequest-&gt;getInstanceProcAddr<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PFN_xrGetInstanceProcAddr</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(illixr_xrGetInstanceProcAddr);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>layerRequest-&gt;createApiLayerInstance<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PFN_xrCreateApiLayerInstance</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(illixr_xrCreateApiLayerInstance);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XR_SUCCESS;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/openxr/openxr.cpp"/>
  </compounddef>
</doxygen>
