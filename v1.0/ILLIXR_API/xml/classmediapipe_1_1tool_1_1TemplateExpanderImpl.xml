<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmediapipe_1_1tool_1_1TemplateExpanderImpl" kind="class" language="C++" prot="public">
    <compoundname>mediapipe::tool::TemplateExpanderImpl</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a2d34f6e710cedbd45983fccfc73b5b25" prot="private" static="no" mutable="no">
        <type>mediapipe::CalculatorGraphTemplate</type>
        <definition>mediapipe::CalculatorGraphTemplate mediapipe::tool::TemplateExpanderImpl::template_rules_</definition>
        <argsstring></argsstring>
        <name>template_rules_</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::template_rules_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="670" column="38" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a347476e421e1d2c2d2d081e72aeb2471" prot="private" static="no" mutable="no">
        <type>TemplateDict</type>
        <definition>TemplateDict mediapipe::tool::TemplateExpanderImpl::environment_</definition>
        <argsstring></argsstring>
        <name>environment_</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::environment_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="673" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a44eeae71dd135911524bb4070aa2b67a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; absl::Status &gt; *</type>
        <definition>std::vector&lt;absl::Status&gt;* mediapipe::tool::TemplateExpanderImpl::errors_</definition>
        <argsstring></argsstring>
        <name>errors_</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::errors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="676" column="15" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="676" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a0b886fc77bb7358fb582b182757fdc0f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mediapipe::tool::TemplateExpanderImpl::TemplateExpanderImpl</definition>
        <argsstring>(std::vector&lt; absl::Status &gt; *errors)</argsstring>
        <name>TemplateExpanderImpl</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::TemplateExpanderImpl</qualifiedname>
        <param>
          <type>std::vector&lt; absl::Status &gt; *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="192" column="12" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="192" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1abb1712b2b9f3af0740a6d4e8215c7ccb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandTemplates</definition>
        <argsstring>(const TemplateDict &amp;args, const CalculatorGraphTemplate &amp;templ, CalculatorGraphConfig *output)</argsstring>
        <name>ExpandTemplates</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandTemplates</qualifiedname>
        <param>
          <type>const TemplateDict &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const CalculatorGraphTemplate &amp;</type>
          <declname>templ</declname>
        </param>
        <param>
          <type>CalculatorGraphConfig *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="198" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="198" bodyend="218"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1af341d855b62d5f2dce6903920111089a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandTemplateRule</definition>
        <argsstring>(int base_index, const FieldValue &amp;base_message, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>ExpandTemplateRule</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandTemplateRule</qualifiedname>
        <param>
          <type>int</type>
          <declname>base_index</declname>
        </param>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>base_message</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="224" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="224" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a5ab92bd99cadbd7477d8a4baff6466b9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandPeerRules</definition>
        <argsstring>(int base_index, const FieldValue &amp;base_message, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>ExpandPeerRules</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandPeerRules</qualifiedname>
        <param>
          <type>int</type>
          <declname>base_index</declname>
        </param>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>base_message</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="243" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="243" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a0ae959a72a213ec0e4038ac8ef4eca17" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::tool::TemplateExpanderImpl::GetBaseValue</definition>
        <argsstring>(const std::string &amp;base_path, const TemplateExpression &amp;rule, const FieldValue &amp;output, std::vector&lt; FieldValue &gt; *base)</argsstring>
        <name>GetBaseValue</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::GetBaseValue</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>base_path</declname>
        </param>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="261" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="261" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a5db0052a70d3e60a596716142a3f626f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::tool::TemplateExpanderImpl::ReplaceBaseValue</definition>
        <argsstring>(const std::string &amp;base_path, const TemplateExpression &amp;rule, const std::vector&lt; FieldValue &gt; &amp;field_values, FieldValue *output)</argsstring>
        <name>ReplaceBaseValue</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ReplaceBaseValue</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>base_path</declname>
        </param>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>const std::vector&lt; FieldValue &gt; &amp;</type>
          <declname>field_values</declname>
        </param>
        <param>
          <type>FieldValue *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="281" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="281" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a1e29fe99a9a6e71e43961d570c42b28c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandNestedRules</definition>
        <argsstring>(int base_index, const std::string &amp;base_path, const FieldValue &amp;base_message, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>ExpandNestedRules</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandNestedRules</qualifiedname>
        <param>
          <type>int</type>
          <declname>base_index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>base_path</declname>
        </param>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>base_message</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="310" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="310" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a155ade4198ab5f35ae09730550518265" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; mediapipe::tool::TemplateExpanderImpl::GetNestedRules</definition>
        <argsstring>(int rule_index, const std::string &amp;rule_path)</argsstring>
        <name>GetNestedRules</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::GetNestedRules</qualifiedname>
        <param>
          <type>int</type>
          <declname>rule_index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rule_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="351" column="15" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="351" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a2ab8a0637cccf6e79716a0b3686ed350" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandIterationRule</definition>
        <argsstring>(int base_index, const FieldValue &amp;base_message, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>ExpandIterationRule</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandIterationRule</qualifiedname>
        <param>
          <type>int</type>
          <declname>base_index</declname>
        </param>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>base_message</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="370" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="370" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a7430b09c4c3b1f4eb6f6153b39d58615" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandDeclaration</definition>
        <argsstring>(int base_index, const FieldValue &amp;base_message, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>ExpandDeclaration</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandDeclaration</qualifiedname>
        <param>
          <type>int</type>
          <declname>base_index</declname>
        </param>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>base_message</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="389" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="389" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a223fe6149ce66b8dbcb330a69158d4bc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandConditionalRule</definition>
        <argsstring>(int base_index, const FieldValue &amp;base_message, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>ExpandConditionalRule</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandConditionalRule</qualifiedname>
        <param>
          <type>int</type>
          <declname>base_index</declname>
        </param>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>base_message</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="415" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="415" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a9c1ae57fc82487c0adf71480b2dac745" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::ExpandExpressionRule</definition>
        <argsstring>(int base_index, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>ExpandExpressionRule</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::ExpandExpressionRule</qualifiedname>
        <param>
          <type>int</type>
          <declname>base_index</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="428" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="428" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a152c30a75c3538ae9fdec49be0a03705" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::EvalParam</definition>
        <argsstring>(const TemplateExpression &amp;expr)</argsstring>
        <name>EvalParam</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::EvalParam</qualifiedname>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="443" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a6561f6926d2032115f47f9a8c120d0ff" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::EvalDot</definition>
        <argsstring>(const TemplateExpression &amp;expr)</argsstring>
        <name>EvalDot</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::EvalDot</qualifiedname>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="453" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="453" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a7a8c5d1cfd347ccd5355d10478490cd5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mediapipe::tool::TemplateExpanderImpl::AsNum</definition>
        <argsstring>(const TemplateArgument &amp;value)</argsstring>
        <name>AsNum</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsNum</qualifiedname>
        <param>
          <type>const TemplateArgument &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="465" column="10" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="465" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1aa93f6b50c2f6b254c3e201c71b86e763" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mediapipe::tool::TemplateExpanderImpl::AsString</definition>
        <argsstring>(const TemplateArgument &amp;value)</argsstring>
        <name>AsString</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsString</qualifiedname>
        <param>
          <type>const TemplateArgument &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="479" column="15" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="479" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a7960dfc9a5c469ca9c4692da9ea99f91" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::AsBool</definition>
        <argsstring>(const TemplateArgument &amp;value)</argsstring>
        <name>AsBool</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsBool</qualifiedname>
        <param>
          <type>const TemplateArgument &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="491" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="491" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1ac0e9df3a95d00d111c5169e6f418cff3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::AsDict</definition>
        <argsstring>(const std::vector&lt; TemplateArgument &gt; &amp;args)</argsstring>
        <name>AsDict</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsDict</qualifiedname>
        <param>
          <type>const std::vector&lt; TemplateArgument &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="504" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="504" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a6de7ba022b85296877a1b8cf21798314" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::AsList</definition>
        <argsstring>(const std::vector&lt; TemplateArgument &gt; &amp;args)</argsstring>
        <name>AsList</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsList</qualifiedname>
        <param>
          <type>const std::vector&lt; TemplateArgument &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="521" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="521" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a9e1c6a32a972d3a2bff55c67247850e5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mediapipe::tool::TemplateExpanderImpl::EvalNestedExpressions</definition>
        <argsstring>(const TemplateExpression &amp;expr, std::vector&lt; TemplateArgument &gt; *result)</argsstring>
        <name>EvalNestedExpressions</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::EvalNestedExpressions</qualifiedname>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::vector&lt; TemplateArgument &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="531" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="531" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a6b33f5f1a69688652cf133ffcf15a167" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::TemplateExpanderImpl::IsNum</definition>
        <argsstring>(const TemplateArgument &amp;value)</argsstring>
        <name>IsNum</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::IsNum</qualifiedname>
        <param>
          <type>const TemplateArgument &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="539" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="539" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a3ceaf96a623dc4ab63794c78f5ce2181" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mediapipe::tool::TemplateExpanderImpl::CompareArgs</definition>
        <argsstring>(const TemplateArgument &amp;v1, const TemplateArgument &amp;v2)</argsstring>
        <name>CompareArgs</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::CompareArgs</qualifiedname>
        <param>
          <type>const TemplateArgument &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const TemplateArgument &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="545" column="7" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="545" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a273fba572e40eb03f8c6beab5b10bb08" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::EvalExpression</definition>
        <argsstring>(const TemplateExpression &amp;expr)</argsstring>
        <name>EvalExpression</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::EvalExpression</qualifiedname>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="555" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="555" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1ae6d4c9cf76b06780c6d1cb0114ad6151" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::AsArgument</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>AsArgument</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsArgument</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="621" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="621" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a08f01f5df16397d62357560695aaa943" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::AsArgument</definition>
        <argsstring>(double value)</argsstring>
        <name>AsArgument</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsArgument</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="628" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="628" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a097ba1d5270bd03b54158168f7a66798" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TemplateArgument</type>
        <definition>TemplateArgument mediapipe::tool::TemplateExpanderImpl::AsArgument</definition>
        <argsstring>(bool b)</argsstring>
        <name>AsArgument</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsArgument</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="635" column="20" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="635" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a5bac8bfd12489a597a7a781d7501e348" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::tool::TemplateExpanderImpl::AsFieldValues</definition>
        <argsstring>(const std::vector&lt; TemplateArgument &gt; &amp;args, FieldType field_type, std::vector&lt; FieldValue &gt; *result)</argsstring>
        <name>AsFieldValues</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::AsFieldValues</qualifiedname>
        <param>
          <type>const std::vector&lt; TemplateArgument &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>FieldType</type>
          <declname>field_type</declname>
        </param>
        <param>
          <type>std::vector&lt; FieldValue &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="640" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="640" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a710c8ec8e3a13475faf0b19c7e2b37cc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mediapipe::tool::TemplateExpanderImpl::RecordError</definition>
        <argsstring>(const absl::Status &amp;status)</argsstring>
        <name>RecordError</name>
        <qualifiedname>mediapipe::tool::TemplateExpanderImpl::RecordError</qualifiedname>
        <param>
          <type>const absl::Status &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="662" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="662" bodyend="666"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="190" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="190" bodyend="677"/>
    <listofallmembers>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1ae6d4c9cf76b06780c6d1cb0114ad6151" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsArgument</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a08f01f5df16397d62357560695aaa943" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsArgument</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a097ba1d5270bd03b54158168f7a66798" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsArgument</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a7960dfc9a5c469ca9c4692da9ea99f91" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsBool</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1ac0e9df3a95d00d111c5169e6f418cff3" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsDict</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a5bac8bfd12489a597a7a781d7501e348" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsFieldValues</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a6de7ba022b85296877a1b8cf21798314" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsList</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a7a8c5d1cfd347ccd5355d10478490cd5" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsNum</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1aa93f6b50c2f6b254c3e201c71b86e763" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>AsString</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a3ceaf96a623dc4ab63794c78f5ce2181" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>CompareArgs</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a347476e421e1d2c2d2d081e72aeb2471" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>environment_</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a44eeae71dd135911524bb4070aa2b67a" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>errors_</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a6561f6926d2032115f47f9a8c120d0ff" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>EvalDot</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a273fba572e40eb03f8c6beab5b10bb08" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>EvalExpression</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a9e1c6a32a972d3a2bff55c67247850e5" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>EvalNestedExpressions</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a152c30a75c3538ae9fdec49be0a03705" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>EvalParam</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a223fe6149ce66b8dbcb330a69158d4bc" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandConditionalRule</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a7430b09c4c3b1f4eb6f6153b39d58615" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandDeclaration</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a9c1ae57fc82487c0adf71480b2dac745" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandExpressionRule</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a2ab8a0637cccf6e79716a0b3686ed350" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandIterationRule</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a1e29fe99a9a6e71e43961d570c42b28c" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandNestedRules</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a5ab92bd99cadbd7477d8a4baff6466b9" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandPeerRules</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1af341d855b62d5f2dce6903920111089a" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandTemplateRule</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1abb1712b2b9f3af0740a6d4e8215c7ccb" prot="public" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ExpandTemplates</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a0ae959a72a213ec0e4038ac8ef4eca17" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>GetBaseValue</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a155ade4198ab5f35ae09730550518265" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>GetNestedRules</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a6b33f5f1a69688652cf133ffcf15a167" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>IsNum</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a710c8ec8e3a13475faf0b19c7e2b37cc" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>RecordError</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a5db0052a70d3e60a596716142a3f626f" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>ReplaceBaseValue</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a2d34f6e710cedbd45983fccfc73b5b25" prot="private" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>template_rules_</name></member>
      <member refid="classmediapipe_1_1tool_1_1TemplateExpanderImpl_1a0b886fc77bb7358fb582b182757fdc0f" prot="public" virt="non-virtual"><scope>mediapipe::tool::TemplateExpanderImpl</scope><name>TemplateExpanderImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
