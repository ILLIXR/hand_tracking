<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="color_8pb_8cc" kind="file" language="C++">
    <compoundname>color.pb.cc</compoundname>
    <includes refid="color_8pb_8h" local="yes">mediapipe/util/color.pb.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">google/protobuf/io/coded_stream.h</includes>
    <includes local="no">google/protobuf/extension_set.h</includes>
    <includes local="no">google/protobuf/wire_format_lite.h</includes>
    <includes local="no">google/protobuf/descriptor.h</includes>
    <includes local="no">google/protobuf/generated_message_reflection.h</includes>
    <includes local="no">google/protobuf/reflection_ops.h</includes>
    <includes local="no">google/protobuf/wire_format.h</includes>
    <includes local="no">google/protobuf/port_def.inc</includes>
    <includes local="no">google/protobuf/port_undef.inc</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc</label>
        <link refid="color_8pb_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mediapipe/util/color.pb.h</label>
        <link refid="color_8pb_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>google/protobuf/arena.h</label>
      </node>
      <node id="9">
        <label>google/protobuf/arenastring.h</label>
      </node>
      <node id="23">
        <label>google/protobuf/descriptor.h</label>
      </node>
      <node id="16">
        <label>google/protobuf/extension_set.h</label>
      </node>
      <node id="13">
        <label>google/protobuf/generated_message_reflection.h</label>
      </node>
      <node id="10">
        <label>google/protobuf/generated_message_table_driven.h</label>
      </node>
      <node id="11">
        <label>google/protobuf/generated_message_util.h</label>
      </node>
      <node id="7">
        <label>google/protobuf/io/coded_stream.h</label>
      </node>
      <node id="17">
        <label>google/protobuf/map.h</label>
      </node>
      <node id="18">
        <label>google/protobuf/map_entry.h</label>
      </node>
      <node id="19">
        <label>google/protobuf/map_field_inl.h</label>
      </node>
      <node id="14">
        <label>google/protobuf/message.h</label>
      </node>
      <node id="12">
        <label>google/protobuf/metadata_lite.h</label>
      </node>
      <node id="5">
        <label>google/protobuf/port_def.inc</label>
      </node>
      <node id="6">
        <label>google/protobuf/port_undef.inc</label>
      </node>
      <node id="24">
        <label>google/protobuf/reflection_ops.h</label>
      </node>
      <node id="15">
        <label>google/protobuf/repeated_field.h</label>
      </node>
      <node id="20">
        <label>google/protobuf/unknown_field_set.h</label>
      </node>
      <node id="25">
        <label>google/protobuf/wire_format.h</label>
      </node>
      <node id="22">
        <label>google/protobuf/wire_format_lite.h</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmediapipe_1_1ColorDefaultTypeInternal" prot="public">mediapipe::ColorDefaultTypeInternal</innerclass>
    <innerclass refid="structmediapipe_1_1ColorMap__LabelToColorEntry__DoNotUseDefaultTypeInternal" prot="public">mediapipe::ColorMap_LabelToColorEntry_DoNotUseDefaultTypeInternal</innerclass>
    <innerclass refid="structmediapipe_1_1ColorMapDefaultTypeInternal" prot="public">mediapipe::ColorMapDefaultTypeInternal</innerclass>
    <innerclass refid="classmediapipe_1_1Color_1_1__Internal" prot="public">mediapipe::Color::_Internal</innerclass>
    <innerclass refid="classmediapipe_1_1ColorMap_1_1__Internal" prot="public">mediapipe::ColorMap::_Internal</innerclass>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="color_8pb_8cc_1a1a656da48cf3d2824247c83ad8d92f10" prot="public" static="no">
        <name>CHK_</name>
        <param><defname>x</defname></param>
        <initializer>if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="209" column="9"/>
      </memberdef>
      <memberdef kind="define" id="color_8pb_8cc_1a1a656da48cf3d2824247c83ad8d92f10" prot="public" static="no">
        <name>CHK_</name>
        <param><defname>x</defname></param>
        <initializer>if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="468" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="color_8pb_8cc_1a3b3909cd9856111e847ce31d16c72919" prot="public" static="yes" mutable="no">
        <type>::PROTOBUF_NAMESPACE_ID::Metadata</type>
        <definition>::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2fcolor_2eproto[3]</definition>
        <argsstring>[3]</argsstring>
        <name>file_level_metadata_mediapipe_2futil_2fcolor_2eproto</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="58" column="42" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="color_8pb_8cc_1a72f69b0cb2c3aa510266d95dd3e4d64c" prot="public" static="yes" mutable="no">
        <type>constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const  **</type>
        <definition>constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2futil_2fcolor_2eproto</definition>
        <argsstring></argsstring>
        <name>file_level_enum_descriptors_mediapipe_2futil_2fcolor_2eproto</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="59" column="64" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="color_8pb_8cc_1a2660ca62ba3c67677ecc8ef50c18941e" prot="public" static="yes" mutable="no">
        <type>constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const  **</type>
        <definition>constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2fcolor_2eproto</definition>
        <argsstring></argsstring>
        <name>file_level_service_descriptors_mediapipe_2futil_2fcolor_2eproto</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="60" column="67" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="color_8pb_8cc_1a99b6f5a2938c4db4c9413e9b84f85717" prot="public" static="yes" mutable="no">
        <type>::PROTOBUF_NAMESPACE_ID::Message const  *const</type>
        <definition>::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[]</definition>
        <argsstring>[]</argsstring>
        <name>file_default_instances</name>
        <initializer>= {
  reinterpret_cast&lt;const ::PROTOBUF_NAMESPACE_ID::Message*&gt;(&amp;::mediapipe::_Color_default_instance_),
  reinterpret_cast&lt;const ::PROTOBUF_NAMESPACE_ID::Message*&gt;(&amp;::mediapipe::_ColorMap_LabelToColorEntry_DoNotUse_default_instance_),
  reinterpret_cast&lt;const ::PROTOBUF_NAMESPACE_ID::Message*&gt;(&amp;::mediapipe::_ColorMap_default_instance_),
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="99" column="54" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="variable" id="color_8pb_8cc_1ac89873078719f13bc2aa91eeca0694e3" prot="public" static="yes" mutable="no">
        <type>::PROTOBUF_NAMESPACE_ID::internal::once_flag</type>
        <definition>::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2fcolor_2eproto_once</definition>
        <argsstring></argsstring>
        <name>descriptor_table_mediapipe_2futil_2fcolor_2eproto_once</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="114" column="53" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="color_8pb_8cc_1a1a2dd74cb3cc77f0c6ec2d51fb50e135" prot="public" static="no" mutable="no">
        <type>const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable</type>
        <definition>static PROTOBUF_ATTRIBUTE_INIT_PRIORITY::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2fcolor_2eproto &amp; descriptor_table_mediapipe_2futil_2fcolor_2eproto</definition>
        <argsstring></argsstring>
        <name>descriptor_table_mediapipe_2futil_2fcolor_2eproto</name>
        <initializer>= {
  false, false, 275, descriptor_table_protodef_mediapipe_2futil_2fcolor_2eproto, &quot;mediapipe/util/color.proto&quot;, 
  &amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2fcolor_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2fcolor_2eproto, file_level_enum_descriptors_mediapipe_2futil_2fcolor_2eproto, file_level_service_descriptors_mediapipe_2futil_2fcolor_2eproto,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="115" column="58" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="115" bodyend="120"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="color_8pb_8cc_1ab34bac2fc789a554861b4d632469f2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint32_t TableStruct_mediapipe_2futil_2fcolor_2eproto::offsets[]</type>
        <definition>const uint32_t TableStruct_mediapipe_2futil_2fcolor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE</definition>
        <argsstring>(protodesc_cold)</argsstring>
        <name>PROTOBUF_SECTION_VARIABLE</name>
        <param>
          <type>protodesc_cold</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="62" column="70" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" declline="62" declcolumn="70"/>
      </memberdef>
      <memberdef kind="function" id="color_8pb_8cc_1abc3d0d1d25534fcdb5573d51fca98583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROTOBUF_ATTRIBUTE_WEAKconst ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *</type>
        <definition>PROTOBUF_ATTRIBUTE_WEAKconst ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable * descriptor_table_mediapipe_2futil_2fcolor_2eproto_getter</definition>
        <argsstring>()</argsstring>
        <name>descriptor_table_mediapipe_2futil_2fcolor_2eproto_getter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="121" column="82" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="color_8pb_8cc_1a3d62abe0b2171597c28bda88b3e08f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>PROTOBUF_NAMESPACE_OPEN PROTOBUF_NOINLINE::mediapipe::Color *</type>
        <definition>PROTOBUF_NAMESPACE_OPEN PROTOBUF_NOINLINE::mediapipe::Color * Arena::CreateMaybeMessage&lt; ::mediapipe::Color &gt;</definition>
        <argsstring>(Arena *arena)</argsstring>
        <name>Arena::CreateMaybeMessage&lt; ::mediapipe::Color &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt; ::mediapipe::Color &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
          <declname>arena</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="634" column="11" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="634" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="color_8pb_8cc_1accd83a4d93f40fc8221707a2cca1c72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>PROTOBUF_NOINLINE::mediapipe::ColorMap_LabelToColorEntry_DoNotUse *</type>
        <definition>PROTOBUF_NOINLINE::mediapipe::ColorMap_LabelToColorEntry_DoNotUse * Arena::CreateMaybeMessage&lt; ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse &gt;</definition>
        <argsstring>(Arena *arena)</argsstring>
        <name>Arena::CreateMaybeMessage&lt; ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt; ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
          <declname>arena</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="637" column="11" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="637" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="color_8pb_8cc_1a377c080d24faebb78757c0dea5af9ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>PROTOBUF_NOINLINE::mediapipe::ColorMap *</type>
        <definition>PROTOBUF_NOINLINE::mediapipe::ColorMap * Arena::CreateMaybeMessage&lt; ::mediapipe::ColorMap &gt;</definition>
        <argsstring>(Arena *arena)</argsstring>
        <name>Arena::CreateMaybeMessage&lt; ::mediapipe::ColorMap &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt; ::mediapipe::ColorMap &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
          <declname>arena</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" line="640" column="11" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc" bodystart="640" bodyend="642"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Generated<sp/>by<sp/>the<sp/>protocol<sp/>buffer<sp/>compiler.<sp/><sp/>DO<sp/>NOT<sp/>EDIT!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>source:<sp/>mediapipe/util/color.proto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/util/color.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/coded_stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/extension_set.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/wire_format_lite.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/descriptor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/generated_message_reflection.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/reflection_ops.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/wire_format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(includes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_def.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">PROTOBUF_PRAGMA_INIT_SEG</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>Color::Color(</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>:<sp/>r_(0)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>,<sp/>g_(0)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>,<sp/>b_(0){}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ColorDefaultTypeInternal<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ColorDefaultTypeInternal()</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>_instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})<sp/>{}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>~ColorDefaultTypeInternal()<sp/>{}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Color<sp/>_instance;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal">PROTOBUF_ATTRIBUTE_NO_DESTROY<sp/>PROTOBUF_CONSTINIT<sp/>ColorDefaultTypeInternal<sp/>_Color_default_instance_;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ColorMap_LabelToColorEntry_DoNotUse::ColorMap_LabelToColorEntry_DoNotUse(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ColorMap_LabelToColorEntry_DoNotUseDefaultTypeInternal<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ColorMap_LabelToColorEntry_DoNotUseDefaultTypeInternal()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>_instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})<sp/>{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>~ColorMap_LabelToColorEntry_DoNotUseDefaultTypeInternal()<sp/>{}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>ColorMap_LabelToColorEntry_DoNotUse<sp/>_instance;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal">PROTOBUF_ATTRIBUTE_NO_DESTROY<sp/>PROTOBUF_CONSTINIT<sp/>ColorMap_LabelToColorEntry_DoNotUseDefaultTypeInternal<sp/>_ColorMap_LabelToColorEntry_DoNotUse_default_instance_;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ColorMap::ColorMap(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>:<sp/>label_to_color_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ColorMapDefaultTypeInternal<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ColorMapDefaultTypeInternal()</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>_instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})<sp/>{}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>~ColorMapDefaultTypeInternal()<sp/>{}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>ColorMap<sp/>_instance;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal">PROTOBUF_ATTRIBUTE_NO_DESTROY<sp/>PROTOBUF_CONSTINIT<sp/>ColorMapDefaultTypeInternal<sp/>_ColorMap_default_instance_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">static<sp/>::PROTOBUF_NAMESPACE_ID::Metadata<sp/>file_level_metadata_mediapipe_2futil_2fcolor_2eproto[3];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>::PROTOBUF_NAMESPACE_ID::EnumDescriptor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>file_level_enum_descriptors_mediapipe_2futil_2fcolor_2eproto<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>::PROTOBUF_NAMESPACE_ID::ServiceDescriptor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>file_level_service_descriptors_mediapipe_2futil_2fcolor_2eproto<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>TableStruct_mediapipe_2futil_2fcolor_2eproto::offsets[]<sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold)<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::Color,<sp/>_has_bits_),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::Color,<sp/>_internal_metadata_),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_extensions_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_oneof_case_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_weak_field_map_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_inlined_string_donated_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::Color,<sp/>r_),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::Color,<sp/>g_),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::Color,<sp/>b_),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>0,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>1,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>2,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse,<sp/>_has_bits_),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse,<sp/>_internal_metadata_),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_extensions_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_oneof_case_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_weak_field_map_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_inlined_string_donated_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse,<sp/>key_),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse,<sp/>value_),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>0,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>1,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_has_bits_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap,<sp/>_internal_metadata_),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_extensions_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_oneof_case_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_weak_field_map_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_inlined_string_donated_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap,<sp/>label_to_color_),</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema<sp/>schemas[]<sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold)<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>9,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(::mediapipe::Color)},</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>{<sp/>12,<sp/>20,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse)},</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{<sp/>22,<sp/>-1,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(::mediapipe::ColorMap)},</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">static<sp/>::PROTOBUF_NAMESPACE_ID::Message<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file_default_instances[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Message*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;::mediapipe::_Color_default_instance_),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Message*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;::mediapipe::_ColorMap_LabelToColorEntry_DoNotUse_default_instance_),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Message*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;::mediapipe::_ColorMap_default_instance_),</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>descriptor_table_protodef_mediapipe_2futil_2fcolor_2eproto[]<sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold)<sp/>=</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n\032mediapipe/util/color.proto\022\tmediapipe\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;(\n\005Color\022\t\n\001r\030\001<sp/>\001(\005\022\t\n\001g\030\002<sp/>\001(\005\022\t\n\001b\030\003<sp/>\001(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;\005\&quot;\220\001\n\010ColorMap\022=\n\016label_to_color\030\001<sp/>\003(\0132%&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;.mediapipe.ColorMap.LabelToColorEntry\032E\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;\021LabelToColorEntry\022\013\n\003key\030\001<sp/>\001(\t\022\037\n\005value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;\030\002<sp/>\001(\0132\020.mediapipe.Color:\0028\001B-\n\037com.goog&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;le.mediapipe.util.protoB\nColorProto&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">static<sp/>::PROTOBUF_NAMESPACE_ID::internal::once_flag<sp/>descriptor_table_mediapipe_2futil_2fcolor_2eproto_once;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable<sp/>descriptor_table_mediapipe_2futil_2fcolor_2eproto<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>275,<sp/>descriptor_table_protodef_mediapipe_2futil_2fcolor_2eproto,<sp/></highlight><highlight class="stringliteral">&quot;mediapipe/util/color.proto&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_once,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>3,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>schemas,<sp/>file_default_instances,<sp/>TableStruct_mediapipe_2futil_2fcolor_2eproto::offsets,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>file_level_metadata_mediapipe_2futil_2fcolor_2eproto,<sp/>file_level_enum_descriptors_mediapipe_2futil_2fcolor_2eproto,<sp/>file_level_service_descriptors_mediapipe_2futil_2fcolor_2eproto,</highlight></codeline>
<codeline lineno="120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="121"><highlight class="normal">PROTOBUF_ATTRIBUTE_WEAK<sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*<sp/>descriptor_table_mediapipe_2futil_2fcolor_2eproto_getter()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Force<sp/>running<sp/>AddDescriptors()<sp/>at<sp/>dynamic<sp/>initialization<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">PROTOBUF_ATTRIBUTE_INIT_PRIORITY<sp/>static<sp/>::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner<sp/>dynamic_init_dummy_mediapipe_2futil_2fcolor_2eproto(&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Color::_Internal<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">HasBits<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;Color&gt;()._has_bits_);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_r(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>1u;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_g(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>2u;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_b(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>4u;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">Color::Color(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_message_owned)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>:<sp/>::PROTOBUF_NAMESPACE_ID::Message(arena,<sp/>is_message_owned)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>SharedCtor();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_message_owned)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>RegisterArenaDtor(arena);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(arena_constructor:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">Color::Color(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color&amp;<sp/>from)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>:<sp/>::PROTOBUF_NAMESPACE_ID::Message(),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_has_bits_(from._has_bits_)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>_internal_metadata_.MergeFrom&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(from._internal_metadata_);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>::memcpy(&amp;r_,<sp/>&amp;from.r_,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;b_)<sp/>-</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;r_))<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(b_));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(copy_constructor:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::SharedCtor()<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal">::memset(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;r_)<sp/>-<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;b_)<sp/>-</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;r_))<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(b_));</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">Color::~Color()<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(destructor:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetArenaForAllocation()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>SharedDtor();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>_internal_metadata_.Delete&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::SharedDtor()<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>GOOGLE_DCHECK(GetArenaForAllocation()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::ArenaDtor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>Color*<sp/>_this<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/>Color*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>(void)_this;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::SetCachedSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>_cached_size_.Set(size);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::Clear()<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(message_clear_start:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>about<sp/>cached_has_bits<sp/>being<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>_has_bits_[0];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000007u)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>::memset(&amp;r_,<sp/>0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;b_)<sp/>-</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;r_))<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(b_));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>_has_bits_.Clear();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>_internal_metadata_.Clear&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Color::_InternalParse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseContext*<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHK_(x)<sp/>if<sp/>(PROTOBUF_PREDICT_FALSE(!(x)))<sp/>goto<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>_Internal::HasBits<sp/>has_bits{};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ctx-&gt;Done(&amp;ptr))<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tag;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr,<sp/>&amp;tag);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tag<sp/>&gt;&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>r<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_r(&amp;has_bits);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&amp;ptr);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>g<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>16))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_g(&amp;has_bits);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&amp;ptr);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>b<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>24))<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_b(&amp;has_bits);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&amp;ptr);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>handle_unusual:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tag<sp/>==<sp/>0)<sp/>||<sp/>((tag<sp/>&amp;<sp/>7)<sp/>==<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;SetLastTag(tag);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>message_done;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>UnknownFieldParse(</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_internal_metadata_.mutable_unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,<sp/>ctx);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>CHK_(ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">message_done:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>_has_bits_.Or(has_bits);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">failure:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>message_done;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHK_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">uint8_t*<sp/>Color::_InternalSerialize(</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>target,<sp/>::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream*<sp/>stream)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(serialize_to_array_start:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>_has_bits_[0];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>r<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000001u)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1,<sp/>this-&gt;_internal_r(),<sp/>target);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>g<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000002u)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2,<sp/>this-&gt;_internal_g(),<sp/>target);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>b<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000004u)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3,<sp/>this-&gt;_internal_b(),<sp/>target);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_internal_metadata_.unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),<sp/>target,<sp/>stream);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(serialize_to_array_end:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>target;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Color::ByteSizeLong()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(message_byte_size_start:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>about<sp/>cached_has_bits<sp/>being<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>_has_bits_[0];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000007u)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>r<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000001u)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this-&gt;_internal_r());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>g<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000002u)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this-&gt;_internal_g());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>b<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000004u)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this-&gt;_internal_b());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MaybeComputeUnknownFieldsSize(total_size,<sp/>&amp;_cached_size_);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData<sp/>Color::_class_data_<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>Color::MergeImpl</highlight></codeline>
<codeline lineno="331"><highlight class="normal">};</highlight></codeline>
<codeline lineno="332"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;_class_data_;<sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*<sp/>to,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Color<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(to)-&gt;MergeFrom(</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Color<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from));</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>GOOGLE_DCHECK_NE(&amp;from,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>from._has_bits_[0];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000007u)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000001u)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r_<sp/>=<sp/>from.r_;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000002u)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_<sp/>=<sp/>from.g_;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000004u)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b_<sp/>=<sp/>from.b_;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>_internal_metadata_.MergeFrom&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(from._internal_metadata_);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;from<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>MergeFrom(from);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Color::IsInitialized()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Color::InternalSwap(Color*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>_internal_metadata_.InternalSwap(&amp;other-&gt;_internal_metadata_);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>swap(_has_bits_[0],<sp/>other-&gt;_has_bits_[0]);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::memswap&lt;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PROTOBUF_FIELD_OFFSET(Color,<sp/>b_)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Color::b_)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>PROTOBUF_FIELD_OFFSET(Color,<sp/>r_)&gt;(</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;r_),</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;other-&gt;r_));</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Metadata<sp/>Color::GetMetadata()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>return<sp/>::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_getter,<sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_once,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_level_metadata_mediapipe_2futil_2fcolor_2eproto[0]);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">ColorMap_LabelToColorEntry_DoNotUse::ColorMap_LabelToColorEntry_DoNotUse()<sp/>{}</highlight></codeline>
<codeline lineno="395"><highlight class="normal">ColorMap_LabelToColorEntry_DoNotUse::ColorMap_LabelToColorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>SuperType(arena)<sp/>{}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap_LabelToColorEntry_DoNotUse::MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorMap_LabelToColorEntry_DoNotUse&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>MergeFromInternal(other);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Metadata<sp/>ColorMap_LabelToColorEntry_DoNotUse::GetMetadata()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>return<sp/>::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_getter,<sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_once,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_level_metadata_mediapipe_2futil_2fcolor_2eproto[1]);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ColorMap::_Internal<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="410"><highlight class="normal">};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">ColorMap::ColorMap(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_message_owned)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>:<sp/>::PROTOBUF_NAMESPACE_ID::Message(arena,<sp/>is_message_owned),</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>label_to_color_(arena)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>SharedCtor();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_message_owned)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>RegisterArenaDtor(arena);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(arena_constructor:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal">ColorMap::ColorMap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorMap&amp;<sp/>from)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>:<sp/>::PROTOBUF_NAMESPACE_ID::Message()<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>_internal_metadata_.MergeFrom&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(from._internal_metadata_);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>label_to_color_.MergeFrom(from.label_to_color_);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(copy_constructor:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::SharedCtor()<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">ColorMap::~ColorMap()<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(destructor:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetArenaForAllocation()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>SharedDtor();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>_internal_metadata_.Delete&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::SharedDtor()<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>GOOGLE_DCHECK(GetArenaForAllocation()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::ArenaDtor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>ColorMap*<sp/>_this<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/>ColorMap*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>(void)_this;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>_this-&gt;label_to_color_.<sp/>~MapField();</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arena<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>arena-&gt;OwnCustomDestructor(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ColorMap::ArenaDtor);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::SetCachedSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>_cached_size_.Set(size);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::Clear()<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(message_clear_start:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>about<sp/>cached_has_bits<sp/>being<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>label_to_color_.Clear();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>_internal_metadata_.Clear&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ColorMap::_InternalParse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseContext*<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHK_(x)<sp/>if<sp/>(PROTOBUF_PREDICT_FALSE(!(x)))<sp/>goto<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ctx-&gt;Done(&amp;ptr))<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tag;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr,<sp/>&amp;tag);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tag<sp/>&gt;&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>map&lt;string,<sp/>.mediapipe.Color&gt;<sp/>label_to_color<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>10))<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>ctx-&gt;ParseMessage(&amp;label_to_color_,<sp/>ptr);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctx-&gt;DataAvailable(ptr))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag&lt;10&gt;(ptr));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>handle_unusual:</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tag<sp/>==<sp/>0)<sp/>||<sp/>((tag<sp/>&amp;<sp/>7)<sp/>==<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;SetLastTag(tag);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>message_done;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>UnknownFieldParse(</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_internal_metadata_.mutable_unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(),</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,<sp/>ctx);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>CHK_(ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">message_done:</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">failure:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>message_done;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHK_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">uint8_t*<sp/>ColorMap::_InternalSerialize(</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>target,<sp/>::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream*<sp/>stream)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(serialize_to_array_start:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map&lt;string,<sp/>.mediapipe.Color&gt;<sp/>label_to_color<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;_internal_label_to_color().empty())<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>std::string,<sp/>::mediapipe::Color<sp/>&gt;::const_pointer</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstPtr;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ConstPtr<sp/>SortItem;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst&lt;SortItem&gt;<sp/>Less;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Utf8Check<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Check(ConstPtr<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)p;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;first.data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p-&gt;first.length()),</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mediapipe.ColorMap.LabelToColorEntry.key&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;IsSerializationDeterministic()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;_internal_label_to_color().size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::unique_ptr&lt;SortItem[]&gt;<sp/>items(</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SortItem[this-&gt;_internal_label_to_color().size()]);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>std::string,<sp/>::mediapipe::Color<sp/>&gt;::size_type<sp/>size_type;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>std::string,<sp/>::mediapipe::Color<sp/>&gt;::const_iterator</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>this-&gt;_internal_label_to_color().begin();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>this-&gt;_internal_label_to_color().end();<sp/>++it,<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ptrdiff_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n)]<sp/>=<sp/>SortItem(&amp;*it);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::sort(&amp;items[0],<sp/>&amp;items[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ptrdiff_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n)],<sp/>Less());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>ColorMap_LabelToColorEntry_DoNotUse::Funcs::InternalSerialize(1,<sp/>items[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ptrdiff_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i)]-&gt;first,<sp/>items[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ptrdiff_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i)]-&gt;second,<sp/>target,<sp/>stream);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utf8Check::Check(&amp;(*items[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ptrdiff_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i)]));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>std::string,<sp/>::mediapipe::Color<sp/>&gt;::const_iterator</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>this-&gt;_internal_label_to_color().begin();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>this-&gt;_internal_label_to_color().end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>ColorMap_LabelToColorEntry_DoNotUse::Funcs::InternalSerialize(1,<sp/>it-&gt;first,<sp/>it-&gt;second,<sp/>target,<sp/>stream);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utf8Check::Check(&amp;(*it));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_internal_metadata_.unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),<sp/>target,<sp/>stream);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(serialize_to_array_end:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>target;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ColorMap::ByteSizeLong()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(message_byte_size_start:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>about<sp/>cached_has_bits<sp/>being<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map&lt;string,<sp/>.mediapipe.Color&gt;<sp/>label_to_color<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>total_size<sp/>+=<sp/>1<sp/>*</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this-&gt;_internal_label_to_color_size());</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>std::string,<sp/>::mediapipe::Color<sp/>&gt;::const_iterator</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>this-&gt;_internal_label_to_color().begin();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>this-&gt;_internal_label_to_color().end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>ColorMap_LabelToColorEntry_DoNotUse::Funcs::ByteSizeLong(it-&gt;first,<sp/>it-&gt;second);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MaybeComputeUnknownFieldsSize(total_size,<sp/>&amp;_cached_size_);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData<sp/>ColorMap::_class_data_<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>ColorMap::MergeImpl</highlight></codeline>
<codeline lineno="588"><highlight class="normal">};</highlight></codeline>
<codeline lineno="589"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorMap::GetClassData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;_class_data_;<sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*<sp/>to,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ColorMap<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(to)-&gt;MergeFrom(</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ColorMap<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from));</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorMap&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>GOOGLE_DCHECK_NE(&amp;from,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>label_to_color_.MergeFrom(from.label_to_color_);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>_internal_metadata_.MergeFrom&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(from._internal_metadata_);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorMap&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ColorMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;from<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>MergeFrom(from);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ColorMap::IsInitialized()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ColorMap::InternalSwap(ColorMap*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>_internal_metadata_.InternalSwap(&amp;other-&gt;_internal_metadata_);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>label_to_color_.InternalSwap(&amp;other-&gt;label_to_color_);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Metadata<sp/>ColorMap::GetMetadata()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>return<sp/>::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_getter,<sp/>&amp;descriptor_table_mediapipe_2futil_2fcolor_2eproto_once,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_level_metadata_mediapipe_2futil_2fcolor_2eproto[2]);</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(namespace_scope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">PROTOBUF_NAMESPACE_OPEN</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>PROTOBUF_NOINLINE<sp/>::mediapipe::Color*<sp/>Arena::CreateMaybeMessage&lt;<sp/>::mediapipe::Color<sp/>&gt;(Arena*<sp/>arena)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Arena::CreateMessageInternal&lt;<sp/>::mediapipe::Color<sp/>&gt;(arena);</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>PROTOBUF_NOINLINE<sp/>::mediapipe::ColorMap_LabelToColorEntry_DoNotUse*<sp/>Arena::CreateMaybeMessage&lt;<sp/>::mediapipe::ColorMap_LabelToColorEntry_DoNotUse<sp/>&gt;(Arena*<sp/>arena)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Arena::CreateMessageInternal&lt;<sp/>::mediapipe::ColorMap_LabelToColorEntry_DoNotUse<sp/>&gt;(arena);</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>PROTOBUF_NOINLINE<sp/>::mediapipe::ColorMap*<sp/>Arena::CreateMaybeMessage&lt;<sp/>::mediapipe::ColorMap<sp/>&gt;(Arena*<sp/>arena)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Arena::CreateMessageInternal&lt;<sp/>::mediapipe::ColorMap<sp/>&gt;(arena);</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal">PROTOBUF_NAMESPACE_CLOSE</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(global_scope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_undef.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/util/color.pb.cc"/>
  </compounddef>
</doxygen>
