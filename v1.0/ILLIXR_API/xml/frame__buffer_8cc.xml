<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="frame__buffer_8cc" kind="file" language="C++">
    <compoundname>frame_buffer.cc</compoundname>
    <includes refid="frame__buffer_8h" local="yes">mediapipe/framework/formats/frame_buffer.h</includes>
    <includes local="yes">absl/status/status.h</includes>
    <includes local="yes">absl/status/statusor.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/formats/frame_buffer.cc</label>
        <link refid="frame__buffer_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mediapipe/framework/formats/frame_buffer.h</label>
        <link refid="frame__buffer_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>absl/log/absl_check.h</label>
      </node>
      <node id="7">
        <label>absl/status/status.h</label>
      </node>
      <node id="6">
        <label>absl/status/statusor.h</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1anonymous__namespace_02frame__buffer_8cc_03">mediapipe::anonymous_namespace{frame_buffer.cc}</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2023<sp/>The<sp/>MediaPipe<sp/>Authors.</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="4"><highlight class="comment">you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="5"><highlight class="comment">You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="10"><highlight class="comment">distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="13"><highlight class="comment">limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">==============================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/formats/frame_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/status/status.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/status/statusor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="namespacemediapipe_1_1anonymous__namespace_02frame__buffer_8cc_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>whether<sp/>the<sp/>input<sp/>`format`<sp/>is<sp/>a<sp/>supported<sp/>YUV<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSupportedYuvFormat(FrameBuffer::Format<sp/>format)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format<sp/>==<sp/>FrameBuffer::Format::kNV21<sp/>||</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>==<sp/>FrameBuffer::Format::kNV12<sp/>||</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>==<sp/>FrameBuffer::Format::kYV12<sp/>||</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>==<sp/>FrameBuffer::Format::kYV21;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>supported<sp/>1-plane<sp/>FrameBuffer<sp/>in<sp/>YuvData<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">absl::StatusOr&lt;FrameBuffer::YuvData&gt;<sp/>GetYuvDataFromOnePlaneFrameBuffer(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameBuffer&amp;<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsSupportedYuvFormat(source.format()))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InvalidArgumentError(</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>source<sp/>FrameBuffer<sp/>format<sp/>is<sp/>not<sp/>part<sp/>of<sp/>YUV420<sp/>family.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>FrameBuffer::YuvData<sp/>result;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y_buffer_size<sp/>=</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source.plane(0).stride().row_stride_bytes<sp/>*<sp/>source.dimension().height;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uv_buffer_size<sp/>=</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((source.plane(0).stride().row_stride_bytes<sp/>+<sp/>1)<sp/>/<sp/>2)<sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((source.dimension().height<sp/>+<sp/>1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>result.y_buffer<sp/>=<sp/>source.plane(0).buffer();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>result.y_row_stride<sp/>=<sp/>source.plane(0).stride().row_stride_bytes;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>result.uv_row_stride<sp/>=<sp/>result.y_row_stride;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.format()<sp/>==<sp/>FrameBuffer::Format::kNV21)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>result.y_buffer<sp/>+<sp/>y_buffer_size;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>result.v_buffer<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_pixel_stride<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>y_row_stride<sp/>equals<sp/>to<sp/>the<sp/>frame<sp/>width<sp/>and<sp/>is<sp/>an<sp/>odd<sp/>value,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uv_row_stride<sp/>=<sp/>y_row_stride<sp/>+<sp/>1,<sp/>otherwise<sp/>uv_row_stride<sp/>=<sp/>y_row_stride.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.y_row_stride<sp/>==<sp/>source.dimension().width<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.y_row_stride<sp/>%<sp/>2<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.uv_row_stride<sp/>=<sp/>(result.y_row_stride<sp/>+<sp/>1)<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.format()<sp/>==<sp/>FrameBuffer::Format::kNV12)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>result.y_buffer<sp/>+<sp/>y_buffer_size;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>result.u_buffer<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_pixel_stride<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>y_row_stride<sp/>equals<sp/>to<sp/>the<sp/>frame<sp/>width<sp/>and<sp/>is<sp/>an<sp/>odd<sp/>value,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uv_row_stride<sp/>=<sp/>y_row_stride<sp/>+<sp/>1,<sp/>otherwise<sp/>uv_row_stride<sp/>=<sp/>y_row_stride.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.y_row_stride<sp/>==<sp/>source.dimension().width<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.y_row_stride<sp/>%<sp/>2<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.uv_row_stride<sp/>=<sp/>(result.y_row_stride<sp/>+<sp/>1)<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.format()<sp/>==<sp/>FrameBuffer::Format::kYV21)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>result.y_buffer<sp/>+<sp/>y_buffer_size;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>result.u_buffer<sp/>+<sp/>uv_buffer_size;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_pixel_stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_row_stride<sp/>=<sp/>(result.y_row_stride<sp/>+<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.format()<sp/>==<sp/>FrameBuffer::Format::kYV12)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>result.y_buffer<sp/>+<sp/>y_buffer_size;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>result.v_buffer<sp/>+<sp/>uv_buffer_size;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_pixel_stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_row_stride<sp/>=<sp/>(result.y_row_stride<sp/>+<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>supported<sp/>2-plane<sp/>FrameBuffer<sp/>in<sp/>YuvData<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">absl::StatusOr&lt;FrameBuffer::YuvData&gt;<sp/>GetYuvDataFromTwoPlaneFrameBuffer(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameBuffer&amp;<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.format()<sp/>!=<sp/>FrameBuffer::Format::kNV12<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source.format()<sp/>!=<sp/>FrameBuffer::Format::kNV21)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InvalidArgumentError(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>YUV<sp/>planar<sp/>format.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>FrameBuffer::YuvData<sp/>result;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>result.y_buffer<sp/>=<sp/>source.plane(0).buffer();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>plane<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>result.y_row_stride<sp/>=<sp/>source.plane(0).stride().row_stride_bytes;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>result.uv_row_stride<sp/>=<sp/>source.plane(1).stride().row_stride_bytes;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>result.uv_pixel_stride<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.format()<sp/>==<sp/>FrameBuffer::Format::kNV12)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>and<sp/>UV<sp/>interleaved<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>source.plane(1).buffer();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>result.u_buffer<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>and<sp/>VU<sp/>interleaved<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>source.plane(1).buffer();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>result.v_buffer<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>supported<sp/>3-plane<sp/>FrameBuffer<sp/>in<sp/>YuvData<sp/>structure.<sp/>Note<sp/>that<sp/>NV21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>NV12<sp/>are<sp/>included<sp/>in<sp/>the<sp/>supported<sp/>Yuv<sp/>formats.<sp/>Technically,<sp/>NV21<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NV12<sp/>should<sp/>not<sp/>be<sp/>described<sp/>by<sp/>the<sp/>3-plane<sp/>format.<sp/>Historically,<sp/>NV21<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>loosely<sp/>such<sp/>that<sp/>it<sp/>can<sp/>also<sp/>be<sp/>used<sp/>to<sp/>describe<sp/>YV21<sp/>format.<sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>backwards<sp/>compatibility,<sp/>FrameBuffer<sp/>supports<sp/>NV21/NV12<sp/>with<sp/>3-plane<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>such<sp/>usage<sp/>is<sp/>discouraged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">absl::StatusOr&lt;FrameBuffer::YuvData&gt;<sp/>GetYuvDataFromThreePlaneFrameBuffer(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameBuffer&amp;<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsSupportedYuvFormat(source.format()))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InvalidArgumentError(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>source<sp/>FrameBuffer<sp/>format<sp/>is<sp/>not<sp/>part<sp/>of<sp/>YUV420<sp/>family.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.plane(1).stride().row_stride_bytes<sp/>!=</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source.plane(2).stride().row_stride_bytes<sp/>||</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source.plane(1).stride().pixel_stride_bytes<sp/>!=</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source.plane(2).stride().pixel_stride_bytes)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InternalError(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>YUV<sp/>planar<sp/>format.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>FrameBuffer::YuvData<sp/>result;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.format()<sp/>==<sp/>FrameBuffer::Format::kNV21<sp/>||</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source.format()<sp/>==<sp/>FrameBuffer::Format::kYV12)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>follow<sp/>by<sp/>VU<sp/>order.<sp/>The<sp/>VU<sp/>chroma<sp/>planes<sp/>can<sp/>be<sp/>interleaved<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>planar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>result.y_buffer<sp/>=<sp/>source.plane(0).buffer();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>source.plane(1).buffer();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>source.plane(2).buffer();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>result.y_row_stride<sp/>=<sp/>source.plane(0).stride().row_stride_bytes;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_row_stride<sp/>=<sp/>source.plane(1).stride().row_stride_bytes;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_pixel_stride<sp/>=<sp/>source.plane(1).stride().pixel_stride_bytes;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>follow<sp/>by<sp/>UV<sp/>order.<sp/>The<sp/>UV<sp/>chroma<sp/>planes<sp/>can<sp/>be<sp/>interleaved<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>planar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>result.y_buffer<sp/>=<sp/>source.plane(0).buffer();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>result.u_buffer<sp/>=<sp/>source.plane(1).buffer();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>result.v_buffer<sp/>=<sp/>source.plane(2).buffer();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>result.y_row_stride<sp/>=<sp/>source.plane(0).stride().row_stride_bytes;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_row_stride<sp/>=<sp/>source.plane(1).stride().row_stride_bytes;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>result.uv_pixel_stride<sp/>=<sp/>source.plane(1).stride().pixel_stride_bytes;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">absl::StatusOr&lt;FrameBuffer::YuvData&gt;<sp/>FrameBuffer::GetYuvDataFromFrameBuffer(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameBuffer&amp;<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsSupportedYuvFormat(source.format()))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InvalidArgumentError(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>source<sp/>FrameBuffer<sp/>format<sp/>is<sp/>not<sp/>part<sp/>of<sp/>YUV420<sp/>family.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.plane_count()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetYuvDataFromOnePlaneFrameBuffer(source);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.plane_count()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetYuvDataFromTwoPlaneFrameBuffer(source);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source.plane_count()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetYuvDataFromThreePlaneFrameBuffer(source);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InvalidArgumentError(</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>source<sp/>FrameBuffer<sp/>must<sp/>be<sp/>consisted<sp/>by<sp/>1,<sp/>2,<sp/>or<sp/>3<sp/>planes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/formats/frame_buffer.cc"/>
  </compounddef>
</doxygen>
