<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="image__data_8pb_8cc" kind="file" language="C++">
    <compoundname>image_data.pb.cc</compoundname>
    <includes refid="image__data_8pb_8h" local="yes">mediapipe/calculators/util/image_data.pb.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">google/protobuf/io/coded_stream.h</includes>
    <includes local="no">google/protobuf/extension_set.h</includes>
    <includes local="no">google/protobuf/wire_format_lite.h</includes>
    <includes local="no">google/protobuf/descriptor.h</includes>
    <includes local="no">google/protobuf/generated_message_reflection.h</includes>
    <includes local="no">google/protobuf/reflection_ops.h</includes>
    <includes local="no">google/protobuf/wire_format.h</includes>
    <includes local="no">google/protobuf/port_def.inc</includes>
    <includes local="no">google/protobuf/port_undef.inc</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc</label>
        <link refid="image__data_8pb_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mediapipe/calculators/util/image_data.pb.h</label>
        <link refid="image__data_8pb_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>google/protobuf/arena.h</label>
      </node>
      <node id="9">
        <label>google/protobuf/arenastring.h</label>
      </node>
      <node id="20">
        <label>google/protobuf/descriptor.h</label>
      </node>
      <node id="16">
        <label>google/protobuf/extension_set.h</label>
      </node>
      <node id="13">
        <label>google/protobuf/generated_message_reflection.h</label>
      </node>
      <node id="10">
        <label>google/protobuf/generated_message_table_driven.h</label>
      </node>
      <node id="11">
        <label>google/protobuf/generated_message_util.h</label>
      </node>
      <node id="7">
        <label>google/protobuf/io/coded_stream.h</label>
      </node>
      <node id="14">
        <label>google/protobuf/message.h</label>
      </node>
      <node id="12">
        <label>google/protobuf/metadata_lite.h</label>
      </node>
      <node id="5">
        <label>google/protobuf/port_def.inc</label>
      </node>
      <node id="6">
        <label>google/protobuf/port_undef.inc</label>
      </node>
      <node id="21">
        <label>google/protobuf/reflection_ops.h</label>
      </node>
      <node id="15">
        <label>google/protobuf/repeated_field.h</label>
      </node>
      <node id="17">
        <label>google/protobuf/unknown_field_set.h</label>
      </node>
      <node id="22">
        <label>google/protobuf/wire_format.h</label>
      </node>
      <node id="19">
        <label>google/protobuf/wire_format_lite.h</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmediapipe_1_1ImageDataDefaultTypeInternal" prot="public">mediapipe::ImageDataDefaultTypeInternal</innerclass>
    <innerclass refid="classmediapipe_1_1ImageData_1_1__Internal" prot="public">mediapipe::ImageData::_Internal</innerclass>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="image__data_8pb_8cc_1a1a656da48cf3d2824247c83ad8d92f10" prot="public" static="no">
        <name>CHK_</name>
        <param><defname>x</defname></param>
        <initializer>if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="181" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="image__data_8pb_8cc_1a62d7b9782a70b9350f42e3a102eb5d01" prot="public" static="yes" mutable="no">
        <type>::PROTOBUF_NAMESPACE_ID::Metadata</type>
        <definition>::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto[1]</definition>
        <argsstring>[1]</argsstring>
        <name>file_level_metadata_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="37" column="42" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="image__data_8pb_8cc_1a429b3f5715b02721c21993a736eac01e" prot="public" static="yes" mutable="no">
        <type>constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const  **</type>
        <definition>constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto</definition>
        <argsstring></argsstring>
        <name>file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="38" column="64" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="image__data_8pb_8cc_1ae476f66e5d62c1cd061e67c8a7e1ed47" prot="public" static="yes" mutable="no">
        <type>constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const  **</type>
        <definition>constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto</definition>
        <argsstring></argsstring>
        <name>file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="39" column="67" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="image__data_8pb_8cc_1a99b6f5a2938c4db4c9413e9b84f85717" prot="public" static="yes" mutable="no">
        <type>::PROTOBUF_NAMESPACE_ID::Message const  *const</type>
        <definition>::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[]</definition>
        <argsstring>[]</argsstring>
        <name>file_default_instances</name>
        <initializer>= {
  reinterpret_cast&lt;const ::PROTOBUF_NAMESPACE_ID::Message*&gt;(&amp;::mediapipe::_ImageData_default_instance_),
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="63" column="54" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="variable" id="image__data_8pb_8cc_1ac9422677404c480e5b4cd4d957c78cf9" prot="public" static="yes" mutable="no">
        <type>::PROTOBUF_NAMESPACE_ID::internal::once_flag</type>
        <definition>::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_once</definition>
        <argsstring></argsstring>
        <name>descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_once</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="74" column="53" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="image__data_8pb_8cc_1aa263308746e69b6d4a468fff2d593a5e" prot="public" static="no" mutable="no">
        <type>const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable</type>
        <definition>static PROTOBUF_ATTRIBUTE_INIT_PRIORITY::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto &amp; descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto</definition>
        <argsstring></argsstring>
        <name>descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto</name>
        <initializer>= {
  false, false, 183, descriptor_table_protodef_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto, &quot;mediapipe/calculators/util/image_data.proto&quot;, 
  &amp;descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="75" column="58" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="75" bodyend="80"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="image__data_8pb_8cc_1a3c2fda06202e6eaa82cfb61f1ac9e0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint32_t TableStruct_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto::offsets[]</type>
        <definition>const uint32_t TableStruct_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE</definition>
        <argsstring>(protodesc_cold)</argsstring>
        <name>PROTOBUF_SECTION_VARIABLE</name>
        <param>
          <type>protodesc_cold</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="41" column="91" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" declline="41" declcolumn="91"/>
      </memberdef>
      <memberdef kind="function" id="image__data_8pb_8cc_1addfd4929545be13a7ae8ea1bd7cd3cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROTOBUF_ATTRIBUTE_WEAKconst ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *</type>
        <definition>PROTOBUF_ATTRIBUTE_WEAKconst ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable * descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_getter</definition>
        <argsstring>()</argsstring>
        <name>descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_getter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="81" column="82" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="image__data_8pb_8cc_1a0b015af45a792fcab844e353a9815129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>PROTOBUF_NAMESPACE_OPEN PROTOBUF_NOINLINE::mediapipe::ImageData *</type>
        <definition>PROTOBUF_NAMESPACE_OPEN PROTOBUF_NOINLINE::mediapipe::ImageData * Arena::CreateMaybeMessage&lt; ::mediapipe::ImageData &gt;</definition>
        <argsstring>(Arena *arena)</argsstring>
        <name>Arena::CreateMaybeMessage&lt; ::mediapipe::ImageData &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt; ::mediapipe::ImageData &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
          <declname>arena</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" line="416" column="11" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc" bodystart="416" bodyend="418"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Generated<sp/>by<sp/>the<sp/>protocol<sp/>buffer<sp/>compiler.<sp/><sp/>DO<sp/>NOT<sp/>EDIT!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>source:<sp/>mediapipe/calculators/util/image_data.proto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/calculators/util/image_data.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/coded_stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/extension_set.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/wire_format_lite.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/descriptor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/generated_message_reflection.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/reflection_ops.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/wire_format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(includes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_def.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">PROTOBUF_PRAGMA_INIT_SEG</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ImageData::ImageData(</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>:<sp/>frame_id_(uint64_t{0u})</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>,<sp/>first_person_(false)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>,<sp/>image_type_(2u)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>,<sp/>width_(uint64_t{640u})</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>,<sp/>height_(uint64_t{480u}){}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ImageDataDefaultTypeInternal<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ImageDataDefaultTypeInternal()</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>_instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})<sp/>{}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>~ImageDataDefaultTypeInternal()<sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ImageData<sp/>_instance;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal">PROTOBUF_ATTRIBUTE_NO_DESTROY<sp/>PROTOBUF_CONSTINIT<sp/>ImageDataDefaultTypeInternal<sp/>_ImageData_default_instance_;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">static<sp/>::PROTOBUF_NAMESPACE_ID::Metadata<sp/>file_level_metadata_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto[1];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>::PROTOBUF_NAMESPACE_ID::EnumDescriptor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>::PROTOBUF_NAMESPACE_ID::ServiceDescriptor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>TableStruct_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto::offsets[]<sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold)<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ImageData,<sp/>_has_bits_),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ImageData,<sp/>_internal_metadata_),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_extensions_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_oneof_case_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_weak_field_map_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>~0u,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>_inlined_string_donated_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ImageData,<sp/>width_),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ImageData,<sp/>height_),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ImageData,<sp/>frame_id_),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ImageData,<sp/>image_type_),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>PROTOBUF_FIELD_OFFSET(::mediapipe::ImageData,<sp/>first_person_),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>3,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>4,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>0,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>2,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>1,</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema<sp/>schemas[]<sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold)<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>11,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(::mediapipe::ImageData)},</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">static<sp/>::PROTOBUF_NAMESPACE_ID::Message<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file_default_instances[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Message*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;::mediapipe::_ImageData_default_instance_),</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>descriptor_table_protodef_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto[]<sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold)<sp/>=</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n+mediapipe/calculators/util/image_data.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;proto\022\tmediapipe\&quot;}\n\tImageData\022\022\n\005width\030\001&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>\001(\004:\003640\022\023\n\006height\030\002<sp/>\001(\004:\003480\022\023\n\010frame_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;id\030\003<sp/>\001(\004:\0010\022\025\n\nimage_type\030\004<sp/>\001(\r:\0012\022\033\n\014fi&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;rst_person\030\005<sp/>\001(\010:\005false&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">static<sp/>::PROTOBUF_NAMESPACE_ID::internal::once_flag<sp/>descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_once;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable<sp/>descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>183,<sp/>descriptor_table_protodef_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto,<sp/></highlight><highlight class="stringliteral">&quot;mediapipe/calculators/util/image_data.proto&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>&amp;descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_once,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>1,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>schemas,<sp/>file_default_instances,<sp/>TableStruct_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto::offsets,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>file_level_metadata_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto,<sp/>file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto,<sp/>file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto,</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal">PROTOBUF_ATTRIBUTE_WEAK<sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*<sp/>descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_getter()<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Force<sp/>running<sp/>AddDescriptors()<sp/>at<sp/>dynamic<sp/>initialization<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">PROTOBUF_ATTRIBUTE_INIT_PRIORITY<sp/>static<sp/>::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner<sp/>dynamic_init_dummy_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto(&amp;descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ImageData::_Internal<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">HasBits<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;ImageData&gt;()._has_bits_);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_width(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>8u;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_height(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>16u;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_frame_id(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>1u;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_image_type(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>4u;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_has_first_person(HasBits*<sp/>has_bits)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>(*has_bits)[0]<sp/>|=<sp/>2u;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">ImageData::ImageData(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_message_owned)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>:<sp/>::PROTOBUF_NAMESPACE_ID::Message(arena,<sp/>is_message_owned)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>SharedCtor();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_message_owned)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>RegisterArenaDtor(arena);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(arena_constructor:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">ImageData::ImageData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageData&amp;<sp/>from)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>:<sp/>::PROTOBUF_NAMESPACE_ID::Message(),</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_has_bits_(from._has_bits_)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>_internal_metadata_.MergeFrom&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(from._internal_metadata_);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>::memcpy(&amp;frame_id_,<sp/>&amp;from.frame_id_,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;height_)<sp/>-</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;frame_id_))<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(height_));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(copy_constructor:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::SharedCtor()<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal">::memset(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;frame_id_)<sp/>-<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;first_person_)<sp/>-</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;frame_id_))<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(first_person_));</highlight></codeline>
<codeline lineno="135"><highlight class="normal">image_type_<sp/>=<sp/>2u;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">width_<sp/>=<sp/>uint64_t{640u};</highlight></codeline>
<codeline lineno="137"><highlight class="normal">height_<sp/>=<sp/>uint64_t{480u};</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">ImageData::~ImageData()<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(destructor:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetArenaForAllocation()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>SharedDtor();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>_internal_metadata_.Delete&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::SharedDtor()<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>GOOGLE_DCHECK(GetArenaForAllocation()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::ArenaDtor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>ImageData*<sp/>_this<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/>ImageData*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>(void)_this;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::SetCachedSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>_cached_size_.Set(size);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::Clear()<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(message_clear_start:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>about<sp/>cached_has_bits<sp/>being<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>_has_bits_[0];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x0000001fu)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>::memset(&amp;frame_id_,<sp/>0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;first_person_)<sp/>-</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;frame_id_))<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(first_person_));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>image_type_<sp/>=<sp/>2u;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>width_<sp/>=<sp/>uint64_t{640u};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>height_<sp/>=<sp/>uint64_t{480u};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>_has_bits_.Clear();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>_internal_metadata_.Clear&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ImageData::_InternalParse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseContext*<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHK_(x)<sp/>if<sp/>(PROTOBUF_PREDICT_FALSE(!(x)))<sp/>goto<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>_Internal::HasBits<sp/>has_bits{};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ctx-&gt;Done(&amp;ptr))<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tag;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr,<sp/>&amp;tag);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tag<sp/>&gt;&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>width<sp/>=<sp/>1<sp/>[default<sp/>=<sp/>640];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_width(&amp;has_bits);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&amp;ptr);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>height<sp/>=<sp/>2<sp/>[default<sp/>=<sp/>480];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>16))<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_height(&amp;has_bits);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&amp;ptr);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>frame_id<sp/>=<sp/>3<sp/>[default<sp/>=<sp/>0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>24))<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_frame_id(&amp;has_bits);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame_id_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&amp;ptr);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint32<sp/>image_type<sp/>=<sp/>4<sp/>[default<sp/>=<sp/>2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>32))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_image_type(&amp;has_bits);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_type_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&amp;ptr);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>bool<sp/>first_person<sp/>=<sp/>5<sp/>[default<sp/>=<sp/>false];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_TRUE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag)<sp/>==<sp/>40))<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Internal::set_has_first_person(&amp;has_bits);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_person_<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&amp;ptr);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>handle_unusual;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>handle_unusual:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tag<sp/>==<sp/>0)<sp/>||<sp/>((tag<sp/>&amp;<sp/>7)<sp/>==<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHK_(ptr);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;SetLastTag(tag);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>message_done;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>UnknownFieldParse(</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_internal_metadata_.mutable_unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,<sp/>ctx);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>CHK_(ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">message_done:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>_has_bits_.Or(has_bits);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">failure:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>message_done;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHK_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">uint8_t*<sp/>ImageData::_InternalSerialize(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>target,<sp/>::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream*<sp/>stream)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(serialize_to_array_start:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>_has_bits_[0];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>width<sp/>=<sp/>1<sp/>[default<sp/>=<sp/>640];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000008u)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1,<sp/>this-&gt;_internal_width(),<sp/>target);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>height<sp/>=<sp/>2<sp/>[default<sp/>=<sp/>480];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000010u)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2,<sp/>this-&gt;_internal_height(),<sp/>target);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>frame_id<sp/>=<sp/>3<sp/>[default<sp/>=<sp/>0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000001u)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3,<sp/>this-&gt;_internal_frame_id(),<sp/>target);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint32<sp/>image_type<sp/>=<sp/>4<sp/>[default<sp/>=<sp/>2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000004u)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4,<sp/>this-&gt;_internal_image_type(),<sp/>target);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>bool<sp/>first_person<sp/>=<sp/>5<sp/>[default<sp/>=<sp/>false];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000002u)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>stream-&gt;EnsureSpace(target);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5,<sp/>this-&gt;_internal_first_person(),<sp/>target);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_internal_metadata_.unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),<sp/>target,<sp/>stream);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(serialize_to_array_end:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>target;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ImageData::ByteSizeLong()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(message_byte_size_start:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>about<sp/>cached_has_bits<sp/>being<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>_has_bits_[0];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x0000001fu)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>frame_id<sp/>=<sp/>3<sp/>[default<sp/>=<sp/>0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000001u)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this-&gt;_internal_frame_id());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>bool<sp/>first_person<sp/>=<sp/>5<sp/>[default<sp/>=<sp/>false];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000002u)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>1<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint32<sp/>image_type<sp/>=<sp/>4<sp/>[default<sp/>=<sp/>2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000004u)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this-&gt;_internal_image_type());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>width<sp/>=<sp/>1<sp/>[default<sp/>=<sp/>640];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000008u)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this-&gt;_internal_width());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>uint64<sp/>height<sp/>=<sp/>2<sp/>[default<sp/>=<sp/>480];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000010u)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this-&gt;_internal_height());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MaybeComputeUnknownFieldsSize(total_size,<sp/>&amp;_cached_size_);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData<sp/>ImageData::_class_data_<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ImageData::MergeImpl</highlight></codeline>
<codeline lineno="343"><highlight class="normal">};</highlight></codeline>
<codeline lineno="344"><highlight class="normal">const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageData::GetClassData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;_class_data_;<sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*<sp/>to,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ImageData<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(to)-&gt;MergeFrom(</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ImageData<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from));</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageData&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>GOOGLE_DCHECK_NE(&amp;from,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cached_has_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>(void)<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>cached_has_bits<sp/>=<sp/>from._has_bits_[0];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x0000001fu)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000001u)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_id_<sp/>=<sp/>from.frame_id_;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000002u)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first_person_<sp/>=<sp/>from.first_person_;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000004u)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>image_type_<sp/>=<sp/>from.image_type_;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000008u)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width_<sp/>=<sp/>from.width_;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_has_bits<sp/>&amp;<sp/>0x00000010u)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>height_<sp/>=<sp/>from.height_;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>cached_has_bits;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>_internal_metadata_.MergeFrom&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(from._internal_metadata_);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageData&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ImageData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;from<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>MergeFrom(from);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImageData::IsInitialized()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageData::InternalSwap(ImageData*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>_internal_metadata_.InternalSwap(&amp;other-&gt;_internal_metadata_);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>swap(_has_bits_[0],<sp/>other-&gt;_has_bits_[0]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::memswap&lt;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PROTOBUF_FIELD_OFFSET(ImageData,<sp/>first_person_)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImageData::first_person_)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>PROTOBUF_FIELD_OFFSET(ImageData,<sp/>frame_id_)&gt;(</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;frame_id_),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;other-&gt;frame_id_));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>swap(image_type_,<sp/>other-&gt;image_type_);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>swap(width_,<sp/>other-&gt;width_);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>swap(height_,<sp/>other-&gt;height_);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">::PROTOBUF_NAMESPACE_ID::Metadata<sp/>ImageData::GetMetadata()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>return<sp/>::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_getter,<sp/>&amp;descriptor_table_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto_once,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_level_metadata_mediapipe_2fcalculators_2futil_2fimage_5fdata_2eproto[0]);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(namespace_scope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">PROTOBUF_NAMESPACE_OPEN</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>PROTOBUF_NOINLINE<sp/>::mediapipe::ImageData*<sp/>Arena::CreateMaybeMessage&lt;<sp/>::mediapipe::ImageData<sp/>&gt;(Arena*<sp/>arena)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Arena::CreateMessageInternal&lt;<sp/>::mediapipe::ImageData<sp/>&gt;(arena);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">PROTOBUF_NAMESPACE_CLOSE</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(global_scope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_undef.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/util/image_data.pb.cc"/>
  </compounddef>
</doxygen>
