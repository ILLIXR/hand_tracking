<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmediapipe_1_1ReusablePool" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>mediapipe::ReusablePool</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; ReusablePool&lt; Item &gt; &gt;</basecompoundref>
    <derivedcompoundref refid="classmediapipe_1_1GlTextureBufferPool" prot="public" virt="non-virtual">mediapipe::GlTextureBufferPool</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class Item</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmediapipe_1_1ReusablePool_1a33eae15f9f0d7dd19ec4071eaa4e6589" prot="public" static="no">
        <type>absl::AnyInvocable&lt; absl::StatusOr&lt; std::unique_ptr&lt; Item &gt; &gt;() const  &gt;</type>
        <definition>using mediapipe::ReusablePool&lt; Item &gt;::ItemFactory =  absl::AnyInvocable&lt;absl::StatusOr&lt;std::unique_ptr&lt;Item&gt; &gt;() const&gt;</definition>
        <argsstring></argsstring>
        <name>ItemFactory</name>
        <qualifiedname>mediapipe::ReusablePool::ItemFactory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="40" column="3" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmediapipe_1_1ReusablePool_1a3a2ab856d3f4fdaa7f829a12476b5880" prot="private" static="no" mutable="no">
        <type>const ItemFactory</type>
        <definition>const ItemFactory mediapipe::ReusablePool&lt; Item &gt;::item_factory_</definition>
        <argsstring></argsstring>
        <name>item_factory_</name>
        <qualifiedname>mediapipe::ReusablePool::item_factory_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="74" column="21" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmediapipe_1_1ReusablePool_1a579e234d81063d00571a4fde190329de" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int mediapipe::ReusablePool&lt; Item &gt;::keep_count_</definition>
        <argsstring></argsstring>
        <name>keep_count_</name>
        <qualifiedname>mediapipe::ReusablePool::keep_count_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="75" column="13" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmediapipe_1_1ReusablePool_1a2ea29f953b14b4bf665942fd55fa0e1f" prot="private" static="no" mutable="no">
        <type>absl::Mutex</type>
        <definition>absl::Mutex mediapipe::ReusablePool&lt; Item &gt;::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>mediapipe::ReusablePool::mutex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="77" column="15" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="77" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1ae36c9b2c4248e173f3c03e389012faf1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; ReusablePool&lt; Item &gt; &gt;</type>
        <definition>static std::shared_ptr&lt; ReusablePool&lt; Item &gt; &gt; mediapipe::ReusablePool&lt; Item &gt;::Create</definition>
        <argsstring>(ItemFactory item_factory, const MultiPoolOptions &amp;options)</argsstring>
        <name>Create</name>
        <qualifiedname>mediapipe::ReusablePool::Create</qualifiedname>
        <param>
          <type>ItemFactory</type>
          <declname>item_factory</declname>
        </param>
        <param>
          <type>const MultiPoolOptions &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="47" column="26" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="47" bodyend="51"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1adb888b988bf17945dd72e61a5ecf0c4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>absl::StatusOr&lt; std::shared_ptr&lt; Item &gt; &gt;</type>
        <definition>absl::StatusOr&lt; std::shared_ptr&lt; Item &gt; &gt; mediapipe::ReusablePool&lt; Item &gt;::GetBuffer</definition>
        <argsstring>()</argsstring>
        <name>GetBuffer</name>
        <qualifiedname>mediapipe::ReusablePool::GetBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="55" column="18" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="83" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1af20dc57adf80739c46c2b0a9326703e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>std::pair&lt; int, int &gt; mediapipe::ReusablePool&lt; Item &gt;::GetInUseAndAvailableCounts</definition>
        <argsstring>()</argsstring>
        <name>GetInUseAndAvailableCounts</name>
        <qualifiedname>mediapipe::ReusablePool::GetInUseAndAvailableCounts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="58" column="13" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="121" bodyend="124"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1a397b43918b4224b84b2db423d249e6be" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mediapipe::ReusablePool&lt; Item &gt;::ReusablePool</definition>
        <argsstring>(ItemFactory item_factory, const MultiPoolOptions &amp;options)</argsstring>
        <name>ReusablePool</name>
        <qualifiedname>mediapipe::ReusablePool::ReusablePool</qualifiedname>
        <param>
          <type>ItemFactory</type>
          <declname>item_factory</declname>
        </param>
        <param>
          <type>const MultiPoolOptions &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="61" column="3" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="61" bodyend="63"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1a3aa5c301f43119c811da9072bf2c32d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mediapipe::ReusablePool&lt; Item &gt;::Return</definition>
        <argsstring>(std::unique_ptr&lt; Item &gt; buf)</argsstring>
        <name>Return</name>
        <qualifiedname>mediapipe::ReusablePool::Return</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; Item &gt;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="67" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="127" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1a60503c99116f39a9df2ea1619dd22268" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mediapipe::ReusablePool&lt; Item &gt;::TrimAvailable</definition>
        <argsstring>(std::vector&lt; std::unique_ptr&lt; Item &gt; &gt; *trimmed) ABSL_EXCLUSIVE_LOCKS_REQUIRED(mutex_)</argsstring>
        <name>TrimAvailable</name>
        <qualifiedname>mediapipe::ReusablePool::TrimAvailable</qualifiedname>
        <param>
          <type>std::vector&lt; std::unique_ptr&lt; Item &gt; &gt; *</type>
          <declname>trimmed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="71" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="139" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1abd663b25af5561407ef88bf59a63aab6" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int in_use_count_</type>
        <definition>int in_use_count_ mediapipe::ReusablePool&lt; Item &gt;::ABSL_GUARDED_BY</definition>
        <argsstring>(mutex_)=0</argsstring>
        <name>ABSL_GUARDED_BY</name>
        <qualifiedname>mediapipe::ReusablePool::ABSL_GUARDED_BY</qualifiedname>
        <param>
          <type>mutex_</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="78" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1ReusablePool_1a49f73f79cc7a0bddcd3add5bdb13b4bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::unique_ptr&lt; Item &gt; &gt; available_</type>
        <definition>std::vector&lt; std::unique_ptr&lt; Item &gt; &gt; available_ mediapipe::ReusablePool&lt; Item &gt;::ABSL_GUARDED_BY</definition>
        <argsstring>(mutex_)</argsstring>
        <name>ABSL_GUARDED_BY</name>
        <qualifiedname>mediapipe::ReusablePool::ABSL_GUARDED_BY</qualifiedname>
        <param>
          <type>mutex_</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="79" column="26"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" line="38" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/reusable_pool.h" bodystart="38" bodyend="80"/>
    <listofallmembers>
      <member refid="classmediapipe_1_1ReusablePool_1abd663b25af5561407ef88bf59a63aab6" prot="private" virt="pure-virtual"><scope>mediapipe::ReusablePool</scope><name>ABSL_GUARDED_BY</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a49f73f79cc7a0bddcd3add5bdb13b4bb" prot="private" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>ABSL_GUARDED_BY</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1ae36c9b2c4248e173f3c03e389012faf1" prot="public" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>Create</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1adb888b988bf17945dd72e61a5ecf0c4a" prot="public" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>GetBuffer</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1af20dc57adf80739c46c2b0a9326703e6" prot="public" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>GetInUseAndAvailableCounts</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a3a2ab856d3f4fdaa7f829a12476b5880" prot="private" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>item_factory_</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a33eae15f9f0d7dd19ec4071eaa4e6589" prot="public" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>ItemFactory</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a579e234d81063d00571a4fde190329de" prot="private" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>keep_count_</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a2ea29f953b14b4bf665942fd55fa0e1f" prot="private" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>mutex_</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a3aa5c301f43119c811da9072bf2c32d0" prot="private" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>Return</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a397b43918b4224b84b2db423d249e6be" prot="protected" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>ReusablePool</name></member>
      <member refid="classmediapipe_1_1ReusablePool_1a60503c99116f39a9df2ea1619dd22268" prot="private" virt="non-virtual"><scope>mediapipe::ReusablePool</scope><name>TrimAvailable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
