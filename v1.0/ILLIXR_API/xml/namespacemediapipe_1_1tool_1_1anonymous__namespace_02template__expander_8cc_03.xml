<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03" kind="namespace" language="C++">
    <compoundname>mediapipe::tool::anonymous_namespace{template_expander.cc}</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1a9a94ec08f15530358fc03d8651dc9353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TemplateArgument *</type>
        <definition>TemplateArgument * mediapipe::tool::anonymous_namespace{template_expander.cc}::GetItem</definition>
        <argsstring>(TemplateDict *args, const std::string &amp;name)</argsstring>
        <name>GetItem</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::GetItem</qualifiedname>
        <param>
          <type>TemplateDict *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="49" column="18" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1ab232f5d237001387fbd7e5b5b2da361d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mediapipe::tool::anonymous_namespace{template_expander.cc}::PutItem</definition>
        <argsstring>(TemplateDict *args, const std::string &amp;name, const TemplateArgument *value)</argsstring>
        <name>PutItem</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::PutItem</qualifiedname>
        <param>
          <type>TemplateDict *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const TemplateArgument *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="59" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="59" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1a578ff7ed2769f7c19f94e9e48085abfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; MessageLite &gt;</type>
        <definition>std::unique_ptr&lt; MessageLite &gt; mediapipe::tool::anonymous_namespace{template_expander.cc}::CloneMessage</definition>
        <argsstring>(const MessageLite &amp;message)</argsstring>
        <name>CloneMessage</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::CloneMessage</qualifiedname>
        <param>
          <type>const MessageLite &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="79" column="17" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1a716f19c987c3c986c92146233127e9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::tool::anonymous_namespace{template_expander.cc}::ParseEntry</definition>
        <argsstring>(absl::string_view &amp;path, ProtoPath *result)</argsstring>
        <name>ParseEntry</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::ParseEntry</qualifiedname>
        <param>
          <type>absl::string_view &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>ProtoPath *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="89" column="14" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="89" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1af787a26ff5d8b03bbac12f0a0f1c4c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::tool::anonymous_namespace{template_expander.cc}::SetMapKeyTypes</definition>
        <argsstring>(const std::vector&lt; FieldType &gt; &amp;key_types, ProtoPath *result)</argsstring>
        <name>SetMapKeyTypes</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::SetMapKeyTypes</qualifiedname>
        <param>
          <type>const std::vector&lt; FieldType &gt; &amp;</type>
          <declname>key_types</declname>
        </param>
        <param>
          <type>ProtoPath *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="122" column="14" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1a95a532aadbcb1c931e94b6365f5bcc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::tool::anonymous_namespace{template_expander.cc}::ProtoPathSplit</definition>
        <argsstring>(const std::string &amp;path, ProtoPath *result)</argsstring>
        <name>ProtoPathSplit</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::ProtoPathSplit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>ProtoPath *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="141" column="14" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="141" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1a773fb2d1caa362f6eb509a904e16e1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::tool::anonymous_namespace{template_expander.cc}::ParseProtoPath</definition>
        <argsstring>(const TemplateExpression &amp;rule, std::string base_path, ProtoPath *result)</argsstring>
        <name>ParseProtoPath</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::ParseProtoPath</qualifiedname>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>base_path</declname>
        </param>
        <param>
          <type>ProtoPath *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="154" column="14" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="154" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1af68ea5dd686757c229727ad704117d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::tool::anonymous_namespace{template_expander.cc}::ProtoPathStartsWith</definition>
        <argsstring>(const std::string &amp;path, const std::string &amp;prefix)</argsstring>
        <name>ProtoPathStartsWith</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::ProtoPathStartsWith</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="169" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1a24fffe6ff3d073e1a9b8786c8a64afc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FieldType</type>
        <definition>FieldType mediapipe::tool::anonymous_namespace{template_expander.cc}::GetFieldType</definition>
        <argsstring>(const TemplateExpression &amp;rule)</argsstring>
        <name>GetFieldType</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::GetFieldType</qualifiedname>
        <param>
          <type>const TemplateExpression &amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="174" column="11" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacemediapipe_1_1tool_1_1anonymous__namespace_02template__expander_8cc_03_1a57fce3d7cd603d2213a69b582f404095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mediapipe::tool::anonymous_namespace{template_expander.cc}::FieldCount</definition>
        <argsstring>(const FieldValue &amp;base, ProtoPath field_path, FieldType field_type)</argsstring>
        <name>FieldCount</name>
        <qualifiedname>mediapipe::tool::anonymous_namespace{template_expander.cc}::FieldCount</qualifiedname>
        <param>
          <type>const FieldValue &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>ProtoPath</type>
          <declname>field_path</declname>
        </param>
        <param>
          <type>FieldType</type>
          <declname>field_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="179" column="5" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" bodystart="179" bodyend="185"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/template_expander.cc" line="46" column="1"/>
  </compounddef>
</doxygen>
