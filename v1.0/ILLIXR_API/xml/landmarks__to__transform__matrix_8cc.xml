<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="landmarks__to__transform__matrix_8cc" kind="file" language="C++">
    <compoundname>landmarks_to_transform_matrix.cc</compoundname>
    <includes refid="landmarks__to__transform__matrix_8h" local="yes">landmarks_to_transform_matrix.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">vector</includes>
    <includes refid="unused_8hpp" local="yes">mediapipe/util/unused.hpp</includes>
    <includes local="yes">tensorflow/lite/delegates/gpu/common/mediapipe/landmarks_to_transform_matrix.h</includes>
    <includes local="yes">tensorflow/lite/delegates/gpu/common/types.h</includes>
    <includes local="yes">tensorflow/lite/kernels/internal/common.h</includes>
    <includes local="yes">tensorflow/lite/kernels/internal/compatibility.h</includes>
    <includes local="yes">tensorflow/lite/kernels/internal/tensor.h</includes>
    <includes local="yes">tensorflow/lite/kernels/padding.h</includes>
    <includes local="yes">tensorflow/lite/schema/schema_generated.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/util/tflite/operations/landmarks_to_transform_matrix.cc</label>
        <link refid="landmarks__to__transform__matrix_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>landmarks_to_transform_matrix.h</label>
        <link refid="landmarks__to__transform__matrix_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>mediapipe/util/unused.hpp</label>
        <link refid="unused_8hpp_source"/>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>tensorflow/lite/delegates/gpu/common/mediapipe/landmarks_to_transform_matrix.h</label>
      </node>
      <node id="8">
        <label>tensorflow/lite/delegates/gpu/common/types.h</label>
      </node>
      <node id="9">
        <label>tensorflow/lite/kernels/internal/common.h</label>
      </node>
      <node id="10">
        <label>tensorflow/lite/kernels/internal/compatibility.h</label>
      </node>
      <node id="11">
        <label>tensorflow/lite/kernels/internal/tensor.h</label>
      </node>
      <node id="3">
        <label>tensorflow/lite/kernels/kernel_util.h</label>
      </node>
      <node id="12">
        <label>tensorflow/lite/kernels/padding.h</label>
      </node>
      <node id="13">
        <label>tensorflow/lite/schema/schema_generated.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmediapipe_1_1tflite__operations_1_1anonymous__namespace_02landmarks__to__transform__matrix_8cc_03_1_1Mat3" prot="public">mediapipe::tflite_operations::anonymous_namespace{landmarks_to_transform_matrix.cc}::Mat3</innerclass>
    <innerclass refid="structmediapipe_1_1tflite__operations_1_1anonymous__namespace_02landmarks__to__transform__matrix_8cc_03_1_1Mat4" prot="public">mediapipe::tflite_operations::anonymous_namespace{landmarks_to_transform_matrix.cc}::Mat4</innerclass>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1tflite__operations">mediapipe::tflite_operations</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1tflite__operations_1_1anonymous__namespace_02landmarks__to__transform__matrix_8cc_03">mediapipe::tflite_operations::anonymous_namespace{landmarks_to_transform_matrix.cc}</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1tflite__operations_1_1anonymous__namespace_02landmarks__to__transform__matrix_8cc_03_1_1v1">mediapipe::tflite_operations::anonymous_namespace{landmarks_to_transform_matrix.cc}::v1</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1tflite__operations_1_1anonymous__namespace_02landmarks__to__transform__matrix_8cc_03_1_1v2">mediapipe::tflite_operations::anonymous_namespace{landmarks_to_transform_matrix.cc}::v2</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2021<sp/>The<sp/>MediaPipe<sp/>Authors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;landmarks_to_transform_matrix.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/util/unused.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tensorflow/lite/delegates/gpu/common/mediapipe/landmarks_to_transform_matrix.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tensorflow/lite/delegates/gpu/common/types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tensorflow/lite/kernels/internal/common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tensorflow/lite/kernels/internal/compatibility.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tensorflow/lite/kernels/internal/tensor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tensorflow/lite/kernels/padding.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tensorflow/lite/schema/schema_generated.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">using<sp/>::tflite::gpu::BHWC;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">using<sp/>::tflite::gpu::float2;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">using<sp/>::tflite::gpu::float3;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">using<sp/>::tflite::gpu::int2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">using<sp/>::tflite::gpu::int3;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">using<sp/>::tflite::gpu::LandmarksToTransformMatrixV1Attributes;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">using<sp/>::tflite::gpu::LandmarksToTransformMatrixV2Attributes;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">using<sp/>::tflite::GetInput;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">using<sp/>::tflite::GetOutput;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">using<sp/>::tflite::GetTensorData;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">using<sp/>::tflite::GetTensorShape;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">using<sp/>::tflite::NumDimensions;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">using<sp/>::tflite::NumInputs;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">using<sp/>::tflite::NumOutputs;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">using<sp/>::tflite::RuntimeShape;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tflite_operations<sp/>{</highlight></codeline>
<codeline lineno="48" refid="namespacemediapipe_1_1tflite__operations_1_1anonymous__namespace_02landmarks__to__transform__matrix_8cc_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kDataInputTensor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kOutputTensor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int3<sp/>kTensformMatrixShape(1,<sp/>4,<sp/>4);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">float2<sp/>Read3DLandmarkXY(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>float2<sp/>result;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>result.x<sp/>=<sp/>data[idx<sp/>*<sp/>3];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>result.y<sp/>=<sp/>data[idx<sp/>*<sp/>3<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">float3<sp/>Read3DLandmarkXYZ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>float3<sp/>result;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>result.x<sp/>=<sp/>data[idx<sp/>*<sp/>3];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>result.y<sp/>=<sp/>data[idx<sp/>*<sp/>3<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>result.z<sp/>=<sp/>data[idx<sp/>*<sp/>3<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Mat3<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>Mat3()<sp/>{<sp/>data.resize(9);<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>Mat3(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x00,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x01,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x02,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x10,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x11,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x12,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x20,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x21,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x22)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data{x00,<sp/>x01,<sp/>x02,<sp/>x10,<sp/>x11,<sp/>x12,<sp/>x20,<sp/>x21,<sp/>x22}<sp/>{}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>Mat3<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat3&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat3<sp/>result;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>3;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>3;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>this-&gt;Get(r,<sp/>k)<sp/>*<sp/>other.Get(k,<sp/>c);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Set(r,<sp/>c,<sp/>sum);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>float3<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3&amp;<sp/>vec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/>result;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>3;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>this-&gt;Get(r,<sp/>k)<sp/>*<sp/>vec[k];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[r]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Get(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[x<sp/>*<sp/>3<sp/>+<sp/>y];<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>data[x<sp/>*<sp/>3<sp/>+<sp/>y]<sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>data;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Mat4<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>Mat4()<sp/>{<sp/>data.resize(16);<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>Mat4(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x00,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x01,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x02,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x03,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x10,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x11,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x12,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x13,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x20,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x21,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x22,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x23,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x30,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x31,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x32,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x33)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data{x00,<sp/>x01,<sp/>x02,<sp/>x03,<sp/>x10,<sp/>x11,<sp/>x12,<sp/>x13,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x20,<sp/>x21,<sp/>x22,<sp/>x23,<sp/>x30,<sp/>x31,<sp/>x32,<sp/>x33}<sp/>{}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator*=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat4&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat4<sp/>result;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>4;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>4;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>this-&gt;Get(r,<sp/>k)<sp/>*<sp/>other.Get(k,<sp/>c);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Set(r,<sp/>c,<sp/>sum);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(this-&gt;data.data(),<sp/>result.data.data(),</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.data.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Get(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[x<sp/>*<sp/>4<sp/>+<sp/>y];<sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>data[x<sp/>*<sp/>4<sp/>+<sp/>y]<sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>data;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">v1<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LandmarksToTransformMatrixV1(</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LandmarksToTransformMatrixV1Attributes&amp;<sp/>params,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RuntimeShape&amp;<sp/>input0_shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>landmarks,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RuntimeShape&amp;<sp/>output_shape,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output_data)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>TFLITE_CHECK_EQ(input0_shape.DimensionsCount(),<sp/>4);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>TFLITE_CHECK_EQ(output_shape.DimensionsCount(),<sp/>3);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>TFLITE_CHECK_EQ(input0_shape.Dims(0),<sp/>1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>TFLITE_CHECK_EQ(input0_shape.Dims(1),<sp/>1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>TFLITE_CHECK_EQ(input0_shape.Dims(2),<sp/>1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>float2<sp/>left_landmark<sp/>=<sp/>Read3DLandmarkXY(landmarks,<sp/>params.left_rotation_idx);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>float2<sp/>right_landmark<sp/>=</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read3DLandmarkXY(landmarks,<sp/>params.right_rotation_idx);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>-std::atan((right_landmark.y<sp/>-<sp/>left_landmark.y)<sp/>/</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(right_landmark.x<sp/>-<sp/>left_landmark.x));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>float2<sp/>max_value(-100000,<sp/>-100000);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>float2<sp/>min_value(100000,<sp/>100000);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)params.subset.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float2<sp/>landmark_current<sp/>=</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read3DLandmarkXY(landmarks,<sp/>params.subset[i][j]);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float2<sp/>rotated(</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>landmark_current.x<sp/>*<sp/>std::cos(alpha)<sp/>-<sp/>landmark_current.y<sp/>*<sp/>std::sin(alpha),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>landmark_current.x<sp/>*<sp/>std::sin(alpha)<sp/>+<sp/>landmark_current.y<sp/>*<sp/>std::cos(alpha));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_value<sp/>=<sp/>float2(std::max(max_value.x,<sp/>rotated.x),</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::max(max_value.y,<sp/>rotated.y));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_value<sp/>=<sp/>float2(std::min(min_value.x,<sp/>rotated.x),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(min_value.y,<sp/>rotated.y));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>float2<sp/>bbox_size((max_value.x<sp/>-<sp/>min_value.x)<sp/>*<sp/>params.bbox_size_multiplier,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(max_value.y<sp/>-<sp/>min_value.y)<sp/>*<sp/>params.bbox_size_multiplier);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>Mat3<sp/>scale_matrix(</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bbox_size.x<sp/>/<sp/>params.landmarks_range,<sp/>0.0,<sp/>0.0,<sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>bbox_size.y<sp/>/<sp/>params.landmarks_range,<sp/>0.0,<sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>float2<sp/>middle((max_value.x<sp/>+<sp/>min_value.x)<sp/>/<sp/>2.0,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(max_value.y<sp/>+<sp/>min_value.y)<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>float2<sp/>rotated_middle(middle.x<sp/>*<sp/>std::cos(-alpha)<sp/>-<sp/>middle.y<sp/>*<sp/>std::sin(-alpha),</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>middle.x<sp/>*<sp/>std::sin(-alpha)<sp/>+<sp/>middle.y<sp/>*<sp/>std::cos(-alpha));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>Mat3<sp/>rotation_matrix(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(-alpha),<sp/>-std::sin(-alpha),</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(rotated_middle.x<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.landmarks_range)<sp/>*<sp/>2.0f<sp/>-<sp/>1.0f,<sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(-alpha),<sp/>std::cos(-alpha),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(rotated_middle.y<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.landmarks_range)<sp/>*<sp/>2.0f<sp/>-<sp/>1.0f,<sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>Mat3<sp/>to_relative(2.0f<sp/>/<sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.output_hw.w<sp/>-<sp/>1.0f),<sp/>0.0f,<sp/>-1.0f,<sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>2.0f<sp/>/<sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.output_hw.h<sp/>-<sp/>1.0f),<sp/>-1.0f,<sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f,<sp/>1.0f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>Mat3<sp/>to_absolute(((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.input_hw.w<sp/>-<sp/>1.0f)<sp/>/<sp/>2.0f,<sp/>0.0,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.input_hw.w<sp/>-<sp/>1.0f)<sp/>/<sp/>2.0f,<sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.input_hw.h<sp/>-<sp/>1.0f)<sp/>/<sp/>2.0f,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)params.input_hw.h<sp/>-<sp/>1.0f)<sp/>/<sp/>2.0f,<sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inverse<sp/>Transformstion<sp/>Matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>Mat3<sp/>itm<sp/>=<sp/>to_absolute<sp/>*<sp/>rotation_matrix<sp/>*<sp/>scale_matrix<sp/>*<sp/>to_relative;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>output_data[0]<sp/>=<sp/>itm.Get(0,<sp/>0);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>output_data[1]<sp/>=<sp/>itm.Get(0,<sp/>1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>output_data[2]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>output_data[3]<sp/>=<sp/>itm.Get(0,<sp/>2);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>output_data[4]<sp/>=<sp/>itm.Get(1,<sp/>0);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>output_data[5]<sp/>=<sp/>itm.Get(1,<sp/>1);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>output_data[6]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>output_data[7]<sp/>=<sp/>itm.Get(1,<sp/>2);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>output_data[8]<sp/>=<sp/>itm.Get(2,<sp/>0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>output_data[9]<sp/>=<sp/>itm.Get(2,<sp/>1);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>output_data[10]<sp/>=<sp/>itm.Get(2,<sp/>2);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>output_data[11]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>output_data[12]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>output_data[13]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>output_data[14]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>output_data[15]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">TfLiteStatus<sp/>Prepare(TfLiteContext*<sp/>context,<sp/>TfLiteNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>NumInputs(node),<sp/>1);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>NumOutputs(node),<sp/>1);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TfLiteTensor*<sp/>input<sp/>=<sp/>GetInput(context,<sp/>node,<sp/>kDataInputTensor);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>input<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>TfLiteTensor*<sp/>output<sp/>=<sp/>GetOutput(context,<sp/>node,<sp/>kOutputTensor);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>output<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>NumDimensions(input),<sp/>4);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>input-&gt;type,<sp/>kTfLiteFloat32);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>output-&gt;type,<sp/>kTfLiteFloat32);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>TfLiteIntArray*<sp/>output_size<sp/>=<sp/>TfLiteIntArrayCreate(3);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>output_size-&gt;data[0]<sp/>=<sp/>kTensformMatrixShape.x;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>output_size-&gt;data[1]<sp/>=<sp/>kTensformMatrixShape.y;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>output_size-&gt;data[2]<sp/>=<sp/>kTensformMatrixShape.z;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context-&gt;ResizeTensor(context,<sp/>output,<sp/>output_size);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">TfLiteStatus<sp/>Eval(TfLiteContext*<sp/>context,<sp/>TfLiteNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>LandmarksToTransformMatrixV1Attributes<sp/>op_params;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>BHWC<sp/>output_shape;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>tflite::gpu::ParseLandmarksToTransformMatrixV1Attributes(</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;custom_initial_data,<sp/>node-&gt;custom_initial_data_size,<sp/>&amp;op_params,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;output_shape);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status.ok())<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/>status.message().data());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.bbox_size_multiplier<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>bbox_size_multiplier:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.bbox_size_multiplier);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.dimensions<sp/>!=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>dimensions:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.dimensions);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.input_hw.h<sp/>&lt;=<sp/>0<sp/>||<sp/>op_params.input_hw.w<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>input_hw:<sp/>h<sp/>=<sp/>%d<sp/>w<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.input_hw.h,<sp/>op_params.input_hw.w);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.output_hw.h<sp/>&lt;=<sp/>0<sp/>||<sp/>op_params.output_hw.w<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>output_hw:<sp/>h<sp/>=<sp/>%d<sp/>w<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.output_hw.h,<sp/>op_params.output_hw.w);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.landmarks_range<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>landmarks_range:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.landmarks_range);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.left_rotation_idx<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>left_rotation_idx:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.left_rotation_idx);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.right_rotation_idx<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>right_rotation_idx:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.right_rotation_idx);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.subset.empty())<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Subset<sp/>parameter<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val<sp/>:<sp/>op_params.subset)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val[i]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>subset<sp/>value:<sp/>index<sp/>=<sp/>%d,<sp/>value<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter,<sp/>val[i]);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TfLiteTensor*<sp/>input0<sp/>=<sp/>GetInput(context,<sp/>node,<sp/>kDataInputTensor);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>input0<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>TfLiteTensor*<sp/>output<sp/>=<sp/>GetOutput(context,<sp/>node,<sp/>kOutputTensor);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>output<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>LandmarksToTransformMatrixV1(</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>op_params,<sp/>GetTensorShape(input0),<sp/>GetTensorData&lt;float&gt;(input0),</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetTensorShape(output),<sp/>GetTensorData&lt;float&gt;(output));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteOk;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>v1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">v2<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EstimateRotationRadians(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input_data_0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_rotation_idx,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right_rotation_idx,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target_rotation_radians,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>rotation_radians)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3<sp/>left_landmark<sp/>=</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read3DLandmarkXYZ(input_data_0,<sp/>left_rotation_idx);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float3<sp/>right_landmark<sp/>=</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read3DLandmarkXYZ(input_data_0,<sp/>right_rotation_idx);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left_x<sp/>=<sp/>left_landmark[0];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left_y<sp/>=<sp/>left_landmark[1];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>right_x<sp/>=<sp/>right_landmark[0];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>right_y<sp/>=<sp/>right_landmark[1];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rotation<sp/>=<sp/>std::atan2(right_y<sp/>-<sp/>left_y,<sp/>right_x<sp/>-<sp/>left_x);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>rotation<sp/>=<sp/>target_rotation_radians<sp/>-<sp/>rotation;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>*rotation_radians<sp/>=<sp/>rotation;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EstimateCenterAndSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input_data_0,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;tflite::gpu::int2&gt;<sp/>subset_idxs,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rotation_radians,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>crop_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>crop_y,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>crop_width,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>crop_height)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>std::vector&lt;float3&gt;<sp/>landmarks;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>landmarks.reserve(subset_idxs.size()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)subset_idxs.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>landmarks.push_back(Read3DLandmarkXYZ(input_data_0,<sp/>subset_idxs[i][0]));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>landmarks.push_back(Read3DLandmarkXYZ(input_data_0,<sp/>subset_idxs[i][1]));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)landmarks.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>landmarks[i].z<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>r<sp/>=<sp/>rotation_radians;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat3<sp/>t_rotation<sp/>=<sp/>Mat3(std::cos(r),<sp/><sp/>-std::sin(r),<sp/>0.0,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(r),<sp/><sp/><sp/>std::cos(r),<sp/>0.0,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat3<sp/>t_rotation_inverse<sp/>=</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat3(std::cos(-r),<sp/>-std::sin(-r),<sp/>0.0,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(-r),<sp/><sp/>std::cos(-r),<sp/>0.0,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)landmarks.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>landmarks[i]<sp/>=<sp/>t_rotation<sp/>*<sp/>landmarks[i];</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>float3<sp/>xy1_max<sp/>=<sp/>landmarks[0],<sp/>xy1_min<sp/>=<sp/>landmarks[0];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>(int)landmarks.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xy1_max.x<sp/>&lt;<sp/>landmarks[i].x)<sp/>xy1_max.x<sp/>=<sp/>landmarks[i].x;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xy1_max.y<sp/>&lt;<sp/>landmarks[i].y)<sp/>xy1_max.y<sp/>=<sp/>landmarks[i].y;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xy1_min.x<sp/>&gt;<sp/>landmarks[i].x)<sp/>xy1_min.x<sp/>=<sp/>landmarks[i].x;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xy1_min.y<sp/>&gt;<sp/>landmarks[i].y)<sp/>xy1_min.y<sp/>=<sp/>landmarks[i].y;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>*crop_width<sp/>=<sp/>xy1_max.x<sp/>-<sp/>xy1_min.x;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>*crop_height<sp/>=<sp/>xy1_max.y<sp/>-<sp/>xy1_min.y;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>float3<sp/>crop_xy1<sp/>=<sp/>xy1_min;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>crop_xy1.x<sp/>+=<sp/>xy1_max.x;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>crop_xy1.y<sp/>+=<sp/>xy1_max.y;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>crop_xy1.x<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>crop_xy1.y<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>crop_xy1<sp/>=<sp/>t_rotation_inverse<sp/>*<sp/>crop_xy1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>*crop_x<sp/>=<sp/>crop_xy1.x;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>*crop_y<sp/>=<sp/>crop_xy1.y;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LandmarksToTransformMatrixV2(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LandmarksToTransformMatrixV2Attributes&amp;<sp/>params,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RuntimeShape&amp;<sp/>input0_shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>landmarks,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RuntimeShape&amp;<sp/>output_shape,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output_data)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED(input0_shape);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED(output_shape);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rotation_radians<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>EstimateRotationRadians(landmarks,<sp/>params.left_rotation_idx,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params.right_rotation_idx,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params.target_rotation_radians,<sp/>&amp;rotation_radians);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>crop_x<sp/>=<sp/>0.0,<sp/>crop_y<sp/>=<sp/>0.0,<sp/>crop_width<sp/>=<sp/>0.0,<sp/>crop_height<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EstimateCenterAndSize(landmarks,<sp/>params.subset_idxs,<sp/>rotation_radians,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;crop_x,<sp/>&amp;crop_y,<sp/>&amp;crop_width,<sp/>&amp;crop_height);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>off<sp/>clang<sp/>formatting<sp/>to<sp/>make<sp/>matrices<sp/>initialization<sp/>more<sp/>readable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>Mat4<sp/>t<sp/>=<sp/>Mat4(1.0,<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat4<sp/>t_shift<sp/>=<sp/>Mat4(1.0,<sp/>0.0,<sp/>0.0,<sp/>crop_x,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0,<sp/>crop_y,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0,<sp/><sp/><sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/><sp/><sp/><sp/>1.0);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>t<sp/>*=<sp/>t_shift;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>r<sp/>=<sp/>-rotation_radians;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat4<sp/>t_rotation<sp/>=<sp/>Mat4(std::cos(r),<sp/>-std::sin(r),<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(r),<sp/><sp/>std::cos(r),<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>t<sp/>*=<sp/>t_rotation;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale_x<sp/>=<sp/>params.scale_x<sp/>*<sp/>crop_width<sp/>/<sp/>(float)params.output_width;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale_y<sp/>=<sp/>params.scale_y<sp/>*<sp/>crop_height<sp/>/<sp/>(float)params.output_height;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat4<sp/>t_scale<sp/>=<sp/>Mat4(scale_x,<sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>scale_y,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>t<sp/>*=<sp/>t_scale;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shift_x<sp/>=<sp/>-1.0f<sp/>*<sp/>((float)params.output_width<sp/>/<sp/>2.0f);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shift_y<sp/>=<sp/>-1.0f<sp/>*<sp/>((float)params.output_height<sp/>/<sp/>2.0f);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat4<sp/>t_shift2<sp/>=<sp/>Mat4(1.0,<sp/>0.0,<sp/>0.0,<sp/>shift_x,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0,<sp/>shift_y,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0,<sp/><sp/><sp/><sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/><sp/><sp/><sp/><sp/>1.0);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>t<sp/>*=<sp/>t_shift2;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>std::memcpy(output_data,<sp/>t.data.data(),<sp/>16<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">TfLiteStatus<sp/>Prepare(TfLiteContext*<sp/>context,<sp/>TfLiteNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>NumInputs(node),<sp/>1);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>NumOutputs(node),<sp/>1);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TfLiteTensor*<sp/>input<sp/>=<sp/>GetInput(context,<sp/>node,<sp/>kDataInputTensor);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>input<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>TfLiteTensor*<sp/>output<sp/>=<sp/>GetOutput(context,<sp/>node,<sp/>kOutputTensor);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>output<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>NumDimensions(input),<sp/>3);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>input-&gt;type,<sp/>kTfLiteFloat32);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE_EQ(context,<sp/>output-&gt;type,<sp/>kTfLiteFloat32);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>TfLiteIntArray*<sp/>output_size<sp/>=<sp/>TfLiteIntArrayCreate(3);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>output_size-&gt;data[0]<sp/>=<sp/>kTensformMatrixShape.x;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>output_size-&gt;data[1]<sp/>=<sp/>kTensformMatrixShape.y;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>output_size-&gt;data[2]<sp/>=<sp/>kTensformMatrixShape.z;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context-&gt;ResizeTensor(context,<sp/>output,<sp/>output_size);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">TfLiteStatus<sp/>Eval(TfLiteContext*<sp/>context,<sp/>TfLiteNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>LandmarksToTransformMatrixV2Attributes<sp/>op_params;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>BHWC<sp/>output_shape;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>tflite::gpu::ParseLandmarksToTransformMatrixV2Attributes(</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;custom_initial_data,<sp/>node-&gt;custom_initial_data_size,<sp/>&amp;op_params,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;output_shape);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status.ok())<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/>status.message().data());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.left_rotation_idx<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>left_rotation_idx:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.left_rotation_idx);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.right_rotation_idx<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>right_rotation_idx:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.right_rotation_idx);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.output_height<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>output_height:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.output_height);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.output_width<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>output_width:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_params.output_width);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.scale_x<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>scale_x:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>op_params.scale_x);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_params.scale_y<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>scale_y:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>op_params.scale_y);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val<sp/>:<sp/>op_params.subset_idxs)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val[i]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;ReportError(context,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>subset<sp/>value:<sp/>index<sp/>=<sp/>%d,<sp/>value<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter,<sp/>val[i]);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteError;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TfLiteTensor*<sp/>input0<sp/>=<sp/>GetInput(context,<sp/>node,<sp/>kDataInputTensor);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>input0<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>TfLiteTensor*<sp/>output<sp/>=<sp/>GetOutput(context,<sp/>node,<sp/>kOutputTensor);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>TF_LITE_ENSURE(context,<sp/>output<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>LandmarksToTransformMatrixV2(</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>op_params,<sp/>GetTensorShape(input0),<sp/>GetTensorData&lt;float&gt;(input0),</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetTensorShape(output),<sp/>GetTensorData&lt;float&gt;(output));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTfLiteOk;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">TfLiteRegistration*<sp/>RegisterLandmarksToTransformMatrixV1()<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TfLiteRegistration<sp/>reg<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.init=*/</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.free=*/</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.prepare=*/</highlight><highlight class="normal">v1::Prepare,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.invoke=*/</highlight><highlight class="normal">v1::Eval,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.profiling_string=*/</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.builtin_code=*/</highlight><highlight class="normal">tflite::BuiltinOperator_CUSTOM,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.custom_name=*/</highlight><highlight class="stringliteral">&quot;Landmarks2TransformMatrix&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.version=*/</highlight><highlight class="normal">1,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;reg;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal">TfLiteRegistration*<sp/>RegisterLandmarksToTransformMatrixV2()<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TfLiteRegistration<sp/>reg<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.init=*/</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.free=*/</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.prepare=*/</highlight><highlight class="normal">v2::Prepare,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.invoke=*/</highlight><highlight class="normal">v2::Eval,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.profiling_string=*/</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.builtin_code=*/</highlight><highlight class="normal">tflite::BuiltinOperator_CUSTOM,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.custom_name=*/</highlight><highlight class="stringliteral">&quot;Landmarks2TransformMatrix&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*.version=*/</highlight><highlight class="normal">2,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;reg;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tflite_operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/util/tflite/operations/landmarks_to_transform_matrix.cc"/>
  </compounddef>
</doxygen>
