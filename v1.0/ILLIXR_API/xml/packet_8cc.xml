<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="packet_8cc" kind="file" language="C++">
    <compoundname>packet.cc</compoundname>
    <includes refid="packet_8h" local="yes">mediapipe/framework/packet.h</includes>
    <includes local="yes">absl/log/absl_check.h</includes>
    <includes local="yes">absl/strings/str_cat.h</includes>
    <includes refid="port_8h" local="yes">mediapipe/framework/port.h</includes>
    <includes refid="port_2canonical__errors_8h" local="yes">mediapipe/framework/port/canonical_errors.h</includes>
    <includes refid="port_2ret__check_8h" local="yes">mediapipe/framework/port/ret_check.h</includes>
    <includes refid="port_2status_8h" local="yes">mediapipe/framework/port/status.h</includes>
    <includes refid="port_2status__builder_8h" local="yes">mediapipe/framework/port/status_builder.h</includes>
    <includes refid="type__util_8h" local="yes">mediapipe/framework/tool/type_util.h</includes>
    <incdepgraph>
      <node id="67">
        <label>mediapipe/framework/demangle.h</label>
        <link refid="demangle_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>mediapipe/framework/deps/canonical_errors.h</label>
        <link refid="deps_2canonical__errors_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>mediapipe/framework/deps/no_destructor.h</label>
        <link refid="no__destructor_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>mediapipe/framework/deps/registration.h</label>
        <link refid="registration_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>mediapipe/framework/deps/registration_token.h</label>
        <link refid="registration__token_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>mediapipe/framework/deps/ret_check.h</label>
        <link refid="deps_2ret__check_8h_source"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>mediapipe/framework/deps/safe_int.h</label>
        <link refid="safe__int_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>mediapipe/framework/deps/source_location.h</label>
        <link refid="deps_2source__location_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>mediapipe/framework/deps/status.h</label>
        <link refid="deps_2status_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>mediapipe/framework/deps/status_builder.h</label>
        <link refid="deps_2status__builder_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>mediapipe/framework/deps/status_macros.h</label>
        <link refid="deps_2status__macros_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>mediapipe/framework/deps/strong_int.h</label>
        <link refid="strong__int_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/packet.cc</label>
        <link refid="packet_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mediapipe/framework/packet.h</label>
        <link refid="packet_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>mediapipe/framework/port.h</label>
        <link refid="port_8h_source"/>
      </node>
      <node id="33">
        <label>mediapipe/framework/port/canonical_errors.h</label>
        <link refid="port_2canonical__errors_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>mediapipe/framework/port/logging.h</label>
        <link refid="logging_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>mediapipe/framework/port/port.h</label>
        <link refid="port_2port_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>mediapipe/framework/port/proto_ns.h</label>
        <link refid="proto__ns_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>mediapipe/framework/port/ret_check.h</label>
        <link refid="port_2ret__check_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>mediapipe/framework/port/status.h</label>
        <link refid="port_2status_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>mediapipe/framework/port/status_builder.h</label>
        <link refid="port_2status__builder_8h_source"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>mediapipe/framework/port/status_macros.h</label>
        <link refid="port_2status__macros_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>mediapipe/framework/port/statusor.h</label>
        <link refid="statusor_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>mediapipe/framework/timestamp.h</label>
        <link refid="timestamp_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>mediapipe/framework/tool/status_util.h</label>
        <link refid="status__util_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>mediapipe/framework/tool/type_util.h</label>
        <link refid="type__util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>mediapipe/framework/type_map.h</label>
        <link refid="type__map_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>mediapipe/util/unused.hpp</label>
        <link refid="unused_8hpp_source"/>
      </node>
      <node id="37">
        <label>absl/base/attributes.h</label>
      </node>
      <node id="9">
        <label>absl/base/macros.h</label>
      </node>
      <node id="74">
        <label>absl/base/optimization.h</label>
      </node>
      <node id="64">
        <label>absl/base/port.h</label>
      </node>
      <node id="24">
        <label>absl/base/thread_annotations.h</label>
      </node>
      <node id="25">
        <label>absl/container/flat_hash_map.h</label>
      </node>
      <node id="26">
        <label>absl/container/flat_hash_set.h</label>
      </node>
      <node id="10">
        <label>absl/log/absl_check.h</label>
      </node>
      <node id="11">
        <label>absl/log/absl_log.h</label>
      </node>
      <node id="12">
        <label>absl/memory/memory.h</label>
      </node>
      <node id="27">
        <label>absl/meta/type_traits.h</label>
      </node>
      <node id="38">
        <label>absl/status/status.h</label>
      </node>
      <node id="13">
        <label>absl/status/statusor.h</label>
      </node>
      <node id="43">
        <label>absl/strings/has_ostream_operator.h</label>
      </node>
      <node id="14">
        <label>absl/strings/str_cat.h</label>
      </node>
      <node id="28">
        <label>absl/strings/str_join.h</label>
      </node>
      <node id="29">
        <label>absl/strings/str_split.h</label>
      </node>
      <node id="30">
        <label>absl/strings/string_view.h</label>
      </node>
      <node id="15">
        <label>absl/synchronization/mutex.h</label>
      </node>
      <node id="42">
        <label>absl/time/time.h</label>
      </node>
      <node id="19">
        <label>algorithm</label>
      </node>
      <node id="58">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>functional</label>
      </node>
      <node id="44">
        <label>glog/logging.h</label>
      </node>
      <node id="47">
        <label>google/protobuf/message.h</label>
      </node>
      <node id="48">
        <label>google/protobuf/message_lite.h</label>
      </node>
      <node id="49">
        <label>google/protobuf/repeated_field.h</label>
      </node>
      <node id="36">
        <label>iosfwd</label>
      </node>
      <node id="61">
        <label>limits</label>
      </node>
      <node id="60">
        <label>limits.h</label>
      </node>
      <node id="70">
        <label>map</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="6">
        <label>ostream</label>
      </node>
      <node id="53">
        <label>sstream</label>
      </node>
      <node id="68">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="21">
        <label>tuple</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="66">
        <label>typeinfo</label>
      </node>
      <node id="22">
        <label>unordered_map</label>
      </node>
      <node id="23">
        <label>unordered_set</label>
      </node>
      <node id="17">
        <label>utility</label>
      </node>
      <node id="32">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1packet__internal">mediapipe::packet_internal</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="packet_8cc_1a91e77e34dd0f13b0c321b100155b951b" prot="public" static="no">
        <name>PACKET_PAIR_TYPE</name>
        <initializer>::std::pair&lt;::mediapipe::Packet, ::mediapipe::Packet&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/packet.cc" line="160" column="9" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/packet.cc" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="packet_8cc_1a0c097a26ff89a4df62cfc3d03cf558ac" prot="public" static="no">
        <name>PACKET_MAP_TYPE</name>
        <initializer>::std::map&lt;std::string, ::mediapipe::Packet&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/packet.cc" line="165" column="10" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/packet.cc" bodystart="165" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>The<sp/>MediaPipe<sp/>Authors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/packet.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/log/absl_check.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/strings/str_cat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/port/canonical_errors.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/port/ret_check.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/port/status.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/port/status_builder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/tool/type_util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">packet_internal<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">HolderBase::~HolderBase()<sp/>{}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">Packet<sp/>Create(HolderBase*<sp/>holder)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>Packet<sp/>result;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>result.holder_.reset(holder);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">Packet<sp/>Create(HolderBase*<sp/>holder,<sp/>Timestamp<sp/>timestamp)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>Packet<sp/>result;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>result.holder_.reset(holder);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>result.timestamp_<sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">Packet<sp/>Create(std::shared_ptr&lt;HolderBase&gt;<sp/>holder,<sp/>Timestamp<sp/>timestamp)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>Packet<sp/>result;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>result.holder_<sp/>=<sp/>std::move(holder);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>result.timestamp_<sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HolderBase*<sp/>GetHolder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Packet&amp;<sp/>packet)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packet.holder_.get();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">absl::StatusOr&lt;Packet&gt;<sp/>PacketFromDynamicProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>type_name,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>MP_ASSIGN_OR_RETURN(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>message_holder,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet_internal::MessageHolderRegistry::CreateByName(type_name));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>message<sp/>=</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">proto_ns::MessageLite*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(message_holder-&gt;GetProtoMessageLite());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>RET_CHECK_NE(message,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>RET_CHECK(message-&gt;ParseFromString(serialized));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packet_internal::Create(message_holder.release());</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>packet_internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">Packet<sp/>Packet::At(</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Timestamp<sp/>timestamp)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>Packet<sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>result.timestamp_<sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">Packet<sp/>Packet::At(</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Timestamp<sp/>timestamp)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>timestamp_<sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Below<sp/>object<sp/>is<sp/>of<sp/>type<sp/>Packet&amp;&amp;<sp/>which<sp/>doesn&apos;t<sp/>match<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>Packet,<sp/>so<sp/>a<sp/>new<sp/>Packet<sp/>will<sp/>be<sp/>created<sp/>by<sp/>move<sp/>constructor<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Moving<sp/>everything<sp/>to<sp/>a<sp/>new<sp/>Packet<sp/>is<sp/>done<sp/>intentionally<sp/>to<sp/>preserve<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>immutability<sp/>of<sp/>Timestamps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">std::string<sp/>Packet::RegisteredTypeName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>holder_-&gt;RegisteredTypeName();</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">std::string<sp/>Packet::DebugTypeName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{empty}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>holder_-&gt;DebugTypeName();</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">std::string<sp/>Packet::DebugString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::string<sp/>result<sp/>=<sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;mediapipe::Packet<sp/>with<sp/>timestamp:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamp_.DebugString());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::StrAppend(&amp;result,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>no<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::StrAppend(&amp;result,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>type:<sp/>&quot;</highlight><highlight class="normal">,<sp/>holder_-&gt;DebugTypeName());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">absl::Status<sp/>Packet::ValidateAsType(TypeId<sp/>type_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABSL_PREDICT_FALSE(IsEmpty()))<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InternalError(absl::StrCat(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>Packet<sp/>of<sp/>type:<sp/>&quot;</highlight><highlight class="normal">,<sp/>MediaPipeTypeStringOrDemangled(type_id),</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>received<sp/>an<sp/>empty<sp/>Packet.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>holder_is_right_type<sp/>=<sp/>holder_-&gt;GetTypeId()<sp/>==<sp/>type_id;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABSL_PREDICT_FALSE(!holder_is_right_type))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InvalidArgumentError(absl::StrCat(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>Packet<sp/>stores<sp/>\&quot;&quot;</highlight><highlight class="normal">,<sp/>holder_-&gt;DebugTypeName(),<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaPipeTypeStringOrDemangled(type_id),<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>was<sp/>requested.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::OkStatus();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">absl::Status<sp/>Packet::ValidateAsProtoMessageLite()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABSL_PREDICT_FALSE(IsEmpty()))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InternalError(</highlight><highlight class="stringliteral">&quot;Packet<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABSL_PREDICT_FALSE(holder_-&gt;GetProtoMessageLite()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InvalidArgumentError(</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;The<sp/>Packet<sp/>stores<sp/>\&quot;&quot;</highlight><highlight class="normal">,<sp/>holder_-&gt;DebugTypeName(),<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>proto_ns::MessageLite.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::OkStatus();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>proto_ns::MessageLite&amp;<sp/>Packet::GetProtoMessageLite()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>ABSL_CHECK(holder_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>packet<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>proto_ns::MessageLite*<sp/>proto<sp/>=<sp/>holder_-&gt;GetProtoMessageLite();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>ABSL_CHECK(proto<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>Packet<sp/>stores<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>holder_-&gt;DebugTypeName()</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;,<sp/>it<sp/>cannot<sp/>be<sp/>converted<sp/>to<sp/>MessageLite<sp/>type.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*proto;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">StatusOr&lt;std::vector&lt;const<sp/>proto_ns::MessageLite*&gt;&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">Packet::GetVectorOfProtoMessageLitePtrs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holder_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::InternalError(</highlight><highlight class="stringliteral">&quot;Packet<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>holder_-&gt;GetVectorOfProtoMessageLite();</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">MEDIAPIPE_REGISTER_TYPE(::mediapipe::Packet,<sp/></highlight><highlight class="stringliteral">&quot;::mediapipe::Packet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">MEDIAPIPE_REGISTER_TYPE(::std::vector&lt;::mediapipe::Packet&gt;,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;::std::vector&lt;::mediapipe::Packet&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">MEDIAPIPE_REGISTER_TYPE(::mediapipe::Timestamp,<sp/></highlight><highlight class="stringliteral">&quot;::mediapipe::Timestamp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_PAIR_TYPE<sp/>::std::pair&lt;::mediapipe::Packet,<sp/>::mediapipe::Packet&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">MEDIAPIPE_REGISTER_TYPE(PACKET_PAIR_TYPE,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;::std::pair&lt;::mediapipe::Packet,::mediapipe::Packet&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PACKET_PAIR_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_MAP_TYPE<sp/>::std::map&lt;std::string,<sp/>::mediapipe::Packet&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">MEDIAPIPE_REGISTER_TYPE(PACKET_MAP_TYPE,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;::std::map&lt;std::string,::mediapipe::Packet&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PACKET_MAP_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/packet.cc"/>
  </compounddef>
</doxygen>
