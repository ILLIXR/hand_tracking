<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacemediapipe_1_1api2_1_1internal" kind="namespace" language="C++">
    <compoundname>mediapipe::api2::internal</compoundname>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1ActualPayloadType" prot="public">mediapipe::api2::internal::ActualPayloadType</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1ActualPayloadType_3_01T_00_01std_1_1enable__if__t_3_01IsSa1ff7b9337817c712af900170f4be080" prot="public">mediapipe::api2::internal::ActualPayloadType&lt; T, std::enable_if_t&lt; IsSameType&lt; T &gt;{}, void &gt; &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1AddStatus" prot="private">mediapipe::api2::internal::AddStatus</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1AddStatus_3_01absl_1_1Status_01_4" prot="private">mediapipe::api2::internal::AddStatus&lt; absl::Status &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1AddStatus_3_01absl_1_1StatusOr_3_01T_01_4_01_4" prot="private">mediapipe::api2::internal::AddStatus&lt; absl::StatusOr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1AddStatus_3_01void_01_4" prot="private">mediapipe::api2::internal::AddStatus&lt; void &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1CallAndAddStatusImpl" prot="private">mediapipe::api2::internal::CallAndAddStatusImpl</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1CallAndAddStatusImpl_3_01void_00_01F_00_01A_8_8_8_01_4" prot="private">mediapipe::api2::internal::CallAndAddStatusImpl&lt; void, F, A... &gt;</innerclass>
    <innerclass refid="classmediapipe_1_1api2_1_1internal_1_1Contract" prot="private">mediapipe::api2::internal::Contract</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1First" prot="private">mediapipe::api2::internal::First</innerclass>
    <innerclass refid="classmediapipe_1_1api2_1_1internal_1_1FunCaller" prot="private">mediapipe::api2::internal::FunCaller</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1HasNestedItems" prot="private">mediapipe::api2::internal::HasNestedItems</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1HasNestedItems_3_01T_00_01std_1_1void__t_3_01decltype_07s99cf8d49d0214e0cab7b8b460dbb8485" prot="private">mediapipe::api2::internal::HasNestedItems&lt; T, std::void_t&lt; decltype(std::declval&lt; std::decay_t&lt; T &gt; &gt;().nested_items())&gt; &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1HasProcessMethod" prot="private">mediapipe::api2::internal::HasProcessMethod</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1HasProcessMethod_3_01T_00_01std_1_1void__t_3_01decltype_033eb240342e04a20c72dbf8a72195e1a" prot="private">mediapipe::api2::internal::HasProcessMethod&lt; T, std::void_t&lt; decltype(absl::Status(std::declval&lt; std::decay_t&lt; T &gt; &gt;().Process(std::declval&lt; mediapipe::CalculatorContext * &gt;())))&gt; &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsCompatibleType" prot="protected">mediapipe::api2::internal::IsCompatibleType</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsCompatibleType_3_01V_00_01internal_1_1Generic_01_4" prot="protected">mediapipe::api2::internal::IsCompatibleType&lt; V, internal::Generic &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsCompatibleType_3_01V_00_01OneOf_3_01U_8_8_8_01_4_01_4" prot="protected">mediapipe::api2::internal::IsCompatibleType&lt; V, OneOf&lt; U... &gt; &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsCompatibleType_3_01V_00_01V_01_4" prot="protected">mediapipe::api2::internal::IsCompatibleType&lt; V, V &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsInputPort" prot="private">mediapipe::api2::internal::IsInputPort</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsOneOf" prot="public">mediapipe::api2::internal::IsOneOf</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsOneOf_3_01OneOf_3_01T_8_8_8_01_4_01_4" prot="public">mediapipe::api2::internal::IsOneOf&lt; OneOf&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsOutputPort" prot="private">mediapipe::api2::internal::IsOutputPort</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsSameType" prot="public">mediapipe::api2::internal::IsSameType</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsSameType_3_01SameType_3_01kP_01_4_01_4" prot="public">mediapipe::api2::internal::IsSameType&lt; SameType&lt; kP &gt; &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1IsSubclass" prot="private">mediapipe::api2::internal::IsSubclass</innerclass>
    <innerclass refid="classmediapipe_1_1api2_1_1internal_1_1MultiplePortAccess" prot="public">mediapipe::api2::internal::MultiplePortAccess</innerclass>
    <innerclass refid="classmediapipe_1_1api2_1_1internal_1_1OutputSender" prot="private">mediapipe::api2::internal::OutputSender</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1Overload" prot="private">mediapipe::api2::internal::Overload</innerclass>
    <innerclass refid="classmediapipe_1_1api2_1_1internal_1_1PortArg" prot="private">mediapipe::api2::internal::PortArg</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1SideBase" prot="public">mediapipe::api2::internal::SideBase</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1SideBase_3_01InputBase_01_4" prot="public">mediapipe::api2::internal::SideBase&lt; InputBase &gt;</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1TaggedAccess" prot="private">mediapipe::api2::internal::TaggedAccess</innerclass>
    <innerclass refid="classmediapipe_1_1api2_1_1internal_1_1TaggedContract" prot="private">mediapipe::api2::internal::TaggedContract</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1TagTuple" prot="private">mediapipe::api2::internal::TagTuple</innerclass>
    <innerclass refid="structmediapipe_1_1api2_1_1internal_1_1Wrap" prot="public">mediapipe::api2::internal::Wrap</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="api_2packet_8h_1abae5ee9c8d7396d0a66eece5cb45c135" prot="protected" static="no">
        <type>::mediapipe::api2::AnyType</type>
        <definition>using mediapipe::api2::internal::Generic = typedef ::mediapipe::api2::AnyType</definition>
        <argsstring></argsstring>
        <name>Generic</name>
        <qualifiedname>mediapipe::api2::internal::Generic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" line="158" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="tuple_8h_1ab27d199e13c5cd1d81312150b653d655" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
        </templateparamlist>
        <type>std::make_index_sequence&lt; std::tuple_size_v&lt; std::decay_t&lt; Tuple &gt; &gt; &gt;</type>
        <definition>using mediapipe::api2::internal::tuple_index_sequence = typedef std::make_index_sequence&lt;std::tuple_size_v&lt;std::decay_t&lt;Tuple&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_index_sequence</name>
        <qualifiedname>mediapipe::api2::internal::tuple_index_sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="19" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="contract_8h_1ac35f50260542a2553b6bbe7e57324506" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::ExtractNestedItems</definition>
        <argsstring>(std::tuple&lt; T... &gt; tuple)</argsstring>
        <name>ExtractNestedItems</name>
        <qualifiedname>mediapipe::api2::internal::ExtractNestedItems</qualifiedname>
        <param>
          <type>std::tuple&lt; T... &gt;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="126" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="126" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1a37de7d81e2ecd4fbc2fe736d02553d97" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::MakeContract</definition>
        <argsstring>(T &amp;&amp;... args)</argsstring>
        <name>MakeContract</name>
        <qualifiedname>mediapipe::api2::internal::MakeContract</qualifiedname>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="198" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1a241ab98b1c6615e65574aff02a3b38a5" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::MakeContract</definition>
        <argsstring>(const std::tuple&lt; T... &gt; &amp;tuple)</argsstring>
        <name>MakeContract</name>
        <qualifiedname>mediapipe::api2::internal::MakeContract</qualifiedname>
        <param>
          <type>const std::tuple&lt; T... &gt; &amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="203" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1a1d0c439a71af07f80e91b04c27b5e7fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::MakePortArg</definition>
        <argsstring>(CalculatorContext *cc, const P &amp;port)</argsstring>
        <name>MakePortArg</name>
        <qualifiedname>mediapipe::api2::internal::MakePortArg</qualifiedname>
        <param>
          <type>CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="264" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1a0323b5e90630d29a4aadbc6c63d470db" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::MakeOutputSender</definition>
        <argsstring>(P &amp;&amp;... args)</argsstring>
        <name>MakeOutputSender</name>
        <qualifiedname>mediapipe::api2::internal::MakeOutputSender</qualifiedname>
        <param>
          <type>P &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="316" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1ac8e6253cb57b63fb60932b213a0a2cc7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::MakeOutputSender</definition>
        <argsstring>(std::tuple&lt; P... &gt; &amp;&amp;args)</argsstring>
        <name>MakeOutputSender</name>
        <qualifiedname>mediapipe::api2::internal::MakeOutputSender</qualifiedname>
        <param>
          <type>std::tuple&lt; P... &gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="321" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="321" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1a84fc7891cd11c7f8a75ee03296324b7f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::api2::internal::ProcessFnCallers</definition>
        <argsstring>(CalculatorContext *cc, std::tuple&lt; T... &gt; callers)</argsstring>
        <name>ProcessFnCallers</name>
        <qualifiedname>mediapipe::api2::internal::ProcessFnCallers</qualifiedname>
        <param>
          <type>CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>std::tuple&lt; T... &gt;</type>
          <declname>callers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="361" column="14" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" declline="361" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1ac934381044d834598d67d0342efb688e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::api2::internal::ProcessFnCallers</definition>
        <argsstring>(CalculatorContext *cc, std::tuple&lt;&gt;)</argsstring>
        <name>ProcessFnCallers</name>
        <qualifiedname>mediapipe::api2::internal::ProcessFnCallers</qualifiedname>
        <param>
          <type>CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>std::tuple&lt;&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="363" column="21" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="contract_8h_1a8a24e20efb4af772233d1a7c9bc48f95" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>absl::Status</type>
        <definition>absl::Status mediapipe::api2::internal::ProcessFnCallers</definition>
        <argsstring>(CalculatorContext *cc, std::tuple&lt; T &gt; callers)</argsstring>
        <name>ProcessFnCallers</name>
        <qualifiedname>mediapipe::api2::internal::ProcessFnCallers</qualifiedname>
        <param>
          <type>CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>std::tuple&lt; T &gt;</type>
          <declname>callers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="369" column="14" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" bodystart="369" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="node_8h_1aedeaa060645cd91e6a976f260638e537" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mediapipe::api2::internal::MEDIAPIPE_STATIC_REGISTRATOR_TEMPLATE</definition>
        <argsstring>(NodeRegistrator, mediapipe::CalculatorBaseRegistry, T::kCalculatorName, absl::make_unique&lt; mediapipe::internal::CalculatorBaseFactoryFor&lt; T &gt; &gt;) MEDIAPIPE_STATIC_REGISTRATOR_TEMPLATE(SubgraphRegistrator</argsstring>
        <name>MEDIAPIPE_STATIC_REGISTRATOR_TEMPLATE</name>
        <qualifiedname>mediapipe::api2::internal::MEDIAPIPE_STATIC_REGISTRATOR_TEMPLATE</qualifiedname>
        <param>
          <type>NodeRegistrator</type>
        </param>
        <param>
          <type>mediapipe::CalculatorBaseRegistry</type>
        </param>
        <param>
          <type>T::kCalculatorName</type>
        </param>
        <param>
          <type>absl::make_unique&lt; mediapipe::internal::CalculatorBaseFactoryFor&lt; T &gt; &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/node.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="api_2packet_8h_1a9e7568e08bba5c36943d87f0f9c435c6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mediapipe::api2::internal::CheckCompatibleType</definition>
        <argsstring>(const HolderBase &amp;holder, internal::Wrap&lt; T &gt;)</argsstring>
        <name>CheckCompatibleType</name>
        <qualifiedname>mediapipe::api2::internal::CheckCompatibleType</qualifiedname>
        <param>
          <type>const HolderBase &amp;</type>
          <declname>holder</declname>
        </param>
        <param>
          <type>internal::Wrap&lt; T &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" line="137" column="13" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="api_2packet_8h_1aae31cf77408579f3c625201d32887579" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mediapipe::api2::internal::CheckCompatibleType</definition>
        <argsstring>(const HolderBase &amp;holder, internal::Wrap&lt; OneOf&lt; T... &gt; &gt;)</argsstring>
        <name>CheckCompatibleType</name>
        <qualifiedname>mediapipe::api2::internal::CheckCompatibleType</qualifiedname>
        <param>
          <type>const HolderBase &amp;</type>
          <declname>holder</declname>
        </param>
        <param>
          <type>internal::Wrap&lt; OneOf&lt; T... &gt; &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" line="146" column="13" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" bodystart="146" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="api_2packet_8h_1a98359a0c4b71d30a135c24209a009f4a" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>mediapipe::api2::internal::Overload</definition>
        <argsstring>(F...) -&gt; Overload&lt; F... &gt;</argsstring>
        <name>Overload</name>
        <qualifiedname>mediapipe::api2::internal::Overload</qualifiedname>
        <param>
          <type>F...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" line="255" column="10" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" declline="255" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="api_2packet_8h_1aab6daad027c665acc672568724619946" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::CallAndAddStatus</definition>
        <argsstring>(const F &amp;f, A &amp;&amp;... a)</argsstring>
        <name>CallAndAddStatus</name>
        <qualifiedname>mediapipe::api2::internal::CallAndAddStatus</qualifiedname>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" line="294" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/packet.h" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a658df96d8f307839bf64d89e9a0cdce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CC</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::GetCollection</definition>
        <argsstring>(CC *cc, const InputBase &amp;port) -&gt; decltype(cc-&gt;Inputs())</argsstring>
        <name>GetCollection</name>
        <qualifiedname>mediapipe::api2::internal::GetCollection</qualifiedname>
        <param>
          <type>CC *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const InputBase &amp;</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="114" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1ad108b9094eaf5c5afb9a82fb223d6c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CC</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::GetCollection</definition>
        <argsstring>(CC *cc, const SideInputBase &amp;port) -&gt; decltype(cc-&gt;InputSidePackets())</argsstring>
        <name>GetCollection</name>
        <qualifiedname>mediapipe::api2::internal::GetCollection</qualifiedname>
        <param>
          <type>CC *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const SideInputBase &amp;</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="120" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a74ebe83407ef464d3273835b4a472632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CC</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::GetCollection</definition>
        <argsstring>(CC *cc, const OutputBase &amp;port) -&gt; decltype(cc-&gt;Outputs())</argsstring>
        <name>GetCollection</name>
        <qualifiedname>mediapipe::api2::internal::GetCollection</qualifiedname>
        <param>
          <type>CC *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const OutputBase &amp;</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="127" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a63c52f317324fe30152e03058661a3f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CC</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::GetCollection</definition>
        <argsstring>(CC *cc, const SideOutputBase &amp;port) -&gt; decltype(cc-&gt;OutputSidePackets())</argsstring>
        <name>GetCollection</name>
        <qualifiedname>mediapipe::api2::internal::GetCollection</qualifiedname>
        <param>
          <type>CC *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const SideOutputBase &amp;</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="133" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a3b1843c10af753231ad12dbbb0049e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Collection</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::GetOrNull</definition>
        <argsstring>(Collection &amp;collection, const absl::string_view &amp;tag, int index) -&gt; decltype(&amp;collection.Get(std::declval&lt; CollectionItemId &gt;()))</argsstring>
        <name>GetOrNull</name>
        <qualifiedname>mediapipe::api2::internal::GetOrNull</qualifiedname>
        <param>
          <type>Collection &amp;</type>
          <declname>collection</declname>
        </param>
        <param>
          <type>const absl::string_view &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="140" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1ad9c5b80875a9c1e5b2b446160dfd7919" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_same&lt; T, AnyType &gt;{} &amp;&amp;!IsOneOf&lt; T &gt;{} &amp;&amp;!IsSameType&lt; T &gt;{}, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mediapipe::api2::internal::SetType</definition>
        <argsstring>(CalculatorContract *cc, PacketType &amp;pt)</argsstring>
        <name>SetType</name>
        <qualifiedname>mediapipe::api2::internal::SetType</qualifiedname>
        <param>
          <type>CalculatorContract *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>PacketType &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="162" column="13" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a7771d52d2bfc08dc80c7802bfea037a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void mediapipe::api2::internal::SetType&lt; NoneType &gt;</definition>
        <argsstring>(CalculatorContract *cc, PacketType &amp;pt)</argsstring>
        <name>SetType&lt; NoneType &gt;</name>
        <qualifiedname>mediapipe::api2::internal::SetType&lt; NoneType &gt;</qualifiedname>
        <param>
          <type>CalculatorContract *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>PacketType &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="180" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a20919e38e9af8ca5b9e7bbbbea4307c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mediapipe::api2::internal::SetTypeOneOf</definition>
        <argsstring>(OneOf&lt; T... &gt;, CalculatorContract *cc, PacketType &amp;pt)</argsstring>
        <name>SetTypeOneOf</name>
        <qualifiedname>mediapipe::api2::internal::SetTypeOneOf</qualifiedname>
        <param>
          <type>OneOf&lt; T... &gt;</type>
        </param>
        <param>
          <type>CalculatorContract *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>PacketType &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="187" column="13" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a3cb84feddd6c2dab449396fe2bb47a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>InputShardAccess&lt; ValueT &gt;</type>
        <definition>InputShardAccess&lt; ValueT &gt; mediapipe::api2::internal::SinglePortAccess</definition>
        <argsstring>(mediapipe::CalculatorContext *cc, InputStreamShard *stream)</argsstring>
        <name>SinglePortAccess</name>
        <qualifiedname>mediapipe::api2::internal::SinglePortAccess</qualifiedname>
        <param>
          <type>mediapipe::CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>InputStreamShard *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="198" column="18" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a622a83c22cb57f4d4e9edd7bb6c385f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>OutputShardAccess&lt; ValueT &gt;</type>
        <definition>OutputShardAccess&lt; ValueT &gt; mediapipe::api2::internal::SinglePortAccess</definition>
        <argsstring>(mediapipe::CalculatorContext *cc, OutputStreamShard *stream)</argsstring>
        <name>SinglePortAccess</name>
        <qualifiedname>mediapipe::api2::internal::SinglePortAccess</qualifiedname>
        <param>
          <type>mediapipe::CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>OutputStreamShard *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="204" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a722ef21b170d3e458db2e9f916018933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>InputSidePacketAccess&lt; ValueT &gt;</type>
        <definition>InputSidePacketAccess&lt; ValueT &gt; mediapipe::api2::internal::SinglePortAccess</definition>
        <argsstring>(mediapipe::CalculatorContext *cc, const mediapipe::Packet *packet)</argsstring>
        <name>SinglePortAccess</name>
        <qualifiedname>mediapipe::api2::internal::SinglePortAccess</qualifiedname>
        <param>
          <type>mediapipe::CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const mediapipe::Packet *</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="210" column="23" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a48951acbf82979a14c9e585925cb6d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>OutputSidePacketAccess&lt; ValueT &gt;</type>
        <definition>OutputSidePacketAccess&lt; ValueT &gt; mediapipe::api2::internal::SinglePortAccess</definition>
        <argsstring>(mediapipe::CalculatorContext *cc, OutputSidePacket *osp)</argsstring>
        <name>SinglePortAccess</name>
        <qualifiedname>mediapipe::api2::internal::SinglePortAccess</qualifiedname>
        <param>
          <type>mediapipe::CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>OutputSidePacket *</type>
          <declname>osp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="217" column="24" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1aee5c93ffbdc2aafcb2b63dd2f8323fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>InputShardOrSideAccess&lt; ValueT &gt;</type>
        <definition>InputShardOrSideAccess&lt; ValueT &gt; mediapipe::api2::internal::SinglePortAccess</definition>
        <argsstring>(mediapipe::CalculatorContext *cc, InputStreamShard *stream, const mediapipe::Packet *packet)</argsstring>
        <name>SinglePortAccess</name>
        <qualifiedname>mediapipe::api2::internal::SinglePortAccess</qualifiedname>
        <param>
          <type>mediapipe::CalculatorContext *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>InputStreamShard *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const mediapipe::Packet *</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="224" column="24" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a4f723c1ff3e3a2434754e995a1c8ec76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>PacketTypeAccess</type>
        <definition>PacketTypeAccess mediapipe::api2::internal::SinglePortAccess</definition>
        <argsstring>(mediapipe::CalculatorContract *cc, PacketType *pt)</argsstring>
        <name>SinglePortAccess</name>
        <qualifiedname>mediapipe::api2::internal::SinglePortAccess</qualifiedname>
        <param>
          <type>mediapipe::CalculatorContract *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>PacketType *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="740" column="18" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="740" bodyend="744" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" declline="231" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a57fb6fc0c5a8483b2290d2bf0bd57183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>PacketTypeAccessFallback</type>
        <definition>PacketTypeAccessFallback mediapipe::api2::internal::SinglePortAccess</definition>
        <argsstring>(mediapipe::CalculatorContract *cc, PacketType *pt, bool is_stream)</argsstring>
        <name>SinglePortAccess</name>
        <qualifiedname>mediapipe::api2::internal::SinglePortAccess</qualifiedname>
        <param>
          <type>mediapipe::CalculatorContract *</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>PacketType *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="746" column="26" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="746" bodyend="750" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" declline="235" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1a0b4b99d581f84808fb10b11481be9728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename PortT</type>
          </param>
          <param>
            <type>class CC</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::AccessPort</definition>
        <argsstring>(std::false_type, const PortT &amp;port, CC *cc)</argsstring>
        <name>AccessPort</name>
        <qualifiedname>mediapipe::api2::internal::AccessPort</qualifiedname>
        <param>
          <type>std::false_type</type>
        </param>
        <param>
          <type>const PortT &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>CC *</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="239" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="api_2port_8h_1ace4dfe4baaea57415d2924d52be55218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename PortT</type>
          </param>
          <param>
            <type>class CC</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mediapipe::api2::internal::AccessPort</definition>
        <argsstring>(std::true_type, const PortT &amp;port, CC *cc)</argsstring>
        <name>AccessPort</name>
        <qualifiedname>mediapipe::api2::internal::AccessPort</qualifiedname>
        <param>
          <type>std::true_type</type>
        </param>
        <param>
          <type>const PortT &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>CC *</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" line="300" column="6" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/port.h" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="tag_8h_1a96fcd869f3c85964475a53f94a69c0a7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::tag_build_impl</definition>
        <argsstring>(S, std::index_sequence&lt; I... &gt;) -&gt; Tag&lt; S().tag[I]... &gt;</argsstring>
        <name>tag_build_impl</name>
        <qualifiedname>mediapipe::api2::internal::tag_build_impl</qualifiedname>
        <param>
          <type>S</type>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tag.h" line="45" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tag.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="tag_8h_1ab4e82d5f148578a236095525ef1b9218" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::tag_build</definition>
        <argsstring>(S)</argsstring>
        <name>tag_build</name>
        <qualifiedname>mediapipe::api2::internal::tag_build</qualifiedname>
        <param>
          <type>S</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tag.h" line="51" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tag.h" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a79d13c5ddbedcc83bd5f4baa01d429f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::index_sequence_cat</definition>
        <argsstring>(std::index_sequence&lt; I... &gt;) -&gt; std::index_sequence&lt; I... &gt;</argsstring>
        <name>index_sequence_cat</name>
        <qualifiedname>mediapipe::api2::internal::index_sequence_cat</qualifiedname>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="24" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a8804fd59e90e83eca30a633bb240e0c6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>J</declname>
            <defname>J</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Tail</declname>
            <defname>Tail</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::index_sequence_cat</definition>
        <argsstring>(std::index_sequence&lt; I... &gt;, std::index_sequence&lt; J... &gt;, Tail... tail)</argsstring>
        <name>index_sequence_cat</name>
        <qualifiedname>mediapipe::api2::internal::index_sequence_cat</qualifiedname>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <param>
          <type>std::index_sequence&lt; J... &gt;</type>
        </param>
        <param>
          <type>Tail...</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="30" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a956ef5b6dd9cc167e77eb312fd5f755e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Pred</declname>
            <defname>Pred</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::filtered_tuple_indices_impl</definition>
        <argsstring>(Tuple &amp;&amp;t, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>filtered_tuple_indices_impl</name>
        <qualifiedname>mediapipe::api2::internal::filtered_tuple_indices_impl</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="36" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a2282c2b23ae171f1184f4ae54c10cb29" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Pred</declname>
            <defname>Pred</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::filtered_tuple_indices</definition>
        <argsstring>(Tuple &amp;&amp;tuple)</argsstring>
        <name>filtered_tuple_indices</name>
        <qualifiedname>mediapipe::api2::internal::filtered_tuple_indices</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="48" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a02e332b0fb95a11dba8cbde51391dd50" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::select_tuple_indices</definition>
        <argsstring>(Tuple &amp;&amp;tuple, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>select_tuple_indices</name>
        <qualifiedname>mediapipe::api2::internal::select_tuple_indices</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="79" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a418a4b89e4c3125a017ec1d4d90eb793" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Pred</declname>
            <defname>Pred</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::filter_tuple</definition>
        <argsstring>(Tuple &amp;&amp;t)</argsstring>
        <name>filter_tuple</name>
        <qualifiedname>mediapipe::api2::internal::filter_tuple</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="85" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a316d590e86685c9b86a0361322547088" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::call_with_optional_index</definition>
        <argsstring>(F &amp;&amp;f, T &amp;&amp;t, I i) -&gt; absl::void_t&lt; decltype(f(std::forward&lt; T &gt;(t), i))&gt;</argsstring>
        <name>call_with_optional_index</name>
        <qualifiedname>mediapipe::api2::internal::call_with_optional_index</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>I</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="101" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1acd1d04118aaca29c60f18a596d9ab819" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void mediapipe::api2::internal::tuple_for_each_impl</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>tuple_for_each_impl</name>
        <qualifiedname>mediapipe::api2::internal::tuple_for_each_impl</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="114" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="114" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a1b69640a8693f2edd28bb4763ac6421f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void mediapipe::api2::internal::tuple_for_each</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple)</argsstring>
        <name>tuple_for_each</name>
        <qualifiedname>mediapipe::api2::internal::tuple_for_each</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="129" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1ad3b001f26aa55c4c72979450c324482e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::map_tuple_impl</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>map_tuple_impl</name>
        <qualifiedname>mediapipe::api2::internal::map_tuple_impl</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="135" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a245ff1efe6b0177f5ead76c530925081" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::map_tuple</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple)</argsstring>
        <name>map_tuple</name>
        <qualifiedname>mediapipe::api2::internal::map_tuple</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="142" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a12e5c6a9003a3934cc5ac149b46a3d06" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::tuple_apply_impl</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>tuple_apply_impl</name>
        <qualifiedname>mediapipe::api2::internal::tuple_apply_impl</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="148" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a4732c5cf3193537d67215d3d94654524" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::tuple_apply</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple)</argsstring>
        <name>tuple_apply</name>
        <qualifiedname>mediapipe::api2::internal::tuple_apply</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="155" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1af478e809f9bfb42d496b34104678b191" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>i</declname>
            <defname>i</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; i==std::tuple_size_v&lt; std::decay_t&lt; Tuple &gt; &gt;, std::size_t &gt;</type>
        <definition>constexpr std::enable_if_t&lt; i==std::tuple_size_v&lt; std::decay_t&lt; Tuple &gt; &gt;, std::size_t &gt; mediapipe::api2::internal::tuple_find</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple)</argsstring>
        <name>tuple_find</name>
        <qualifiedname>mediapipe::api2::internal::tuple_find</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="165" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a0b73a9e388cbb887b7fb453037c67f65" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>i</declname>
            <defname>i</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; i !=std::tuple_size_v&lt; std::decay_t&lt; Tuple &gt; &gt;, std::size_t &gt;</type>
        <definition>constexpr std::enable_if_t&lt; i !=std::tuple_size_v&lt; std::decay_t&lt; Tuple &gt; &gt;, std::size_t &gt; mediapipe::api2::internal::tuple_find</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;tuple)</argsstring>
        <name>tuple_find</name>
        <qualifiedname>mediapipe::api2::internal::tuple_find</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="174" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="174" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="tuple_8h_1a747cf99e5b21a33f2890b60dc21071bd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto mediapipe::api2::internal::flatten_tuple</definition>
        <argsstring>(Tuple &amp;&amp;tuple)</argsstring>
        <name>flatten_tuple</name>
        <qualifiedname>mediapipe::api2::internal::flatten_tuple</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" line="183" column="16" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/tuple.h" bodystart="183" bodyend="186"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/api/contract.h" line="62" column="1"/>
  </compounddef>
</doxygen>
