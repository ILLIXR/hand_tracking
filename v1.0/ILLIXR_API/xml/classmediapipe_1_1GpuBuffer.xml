<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmediapipe_1_1GpuBuffer" kind="class" language="C++" prot="public">
    <compoundname>mediapipe::GpuBuffer</compoundname>
    <innerclass refid="classmediapipe_1_1GpuBuffer_1_1StorageHolder" prot="private">mediapipe::GpuBuffer::StorageHolder</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmediapipe_1_1GpuBuffer_1a7a746d1135632803797b7833d1c223a3" prot="public" static="no">
        <type>GpuBufferFormat</type>
        <definition>using mediapipe::GpuBuffer::Format =  GpuBufferFormat</definition>
        <argsstring></argsstring>
        <name>Format</name>
        <qualifiedname>mediapipe::GpuBuffer::Format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="55" column="3" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="55" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmediapipe_1_1GpuBuffer_1a79648c446efb92f46da72937ef163dfa" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; StorageHolder &gt;</type>
        <definition>std::shared_ptr&lt;StorageHolder&gt; mediapipe::GpuBuffer::holder_</definition>
        <argsstring></argsstring>
        <name>holder_</name>
        <qualifiedname>mediapipe::GpuBuffer::holder_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="195" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="195" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1af2571a09abbc0de86574a8af01efd225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mediapipe::GpuBuffer::GpuBuffer</definition>
        <argsstring>()=default</argsstring>
        <name>GpuBuffer</name>
        <qualifiedname>mediapipe::GpuBuffer::GpuBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="58" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1af230553003ebb9a958872f4b180ac3bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mediapipe::GpuBuffer::GpuBuffer</definition>
        <argsstring>(int width, int height, Format format)</argsstring>
        <name>GpuBuffer</name>
        <qualifiedname>mediapipe::GpuBuffer::GpuBuffer</qualifiedname>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>Format</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="62" column="3" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a7d15a59a135e1736c815035e2e7ca7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mediapipe::GpuBuffer::GpuBuffer</definition>
        <argsstring>(const GpuBuffer &amp;other)=default</argsstring>
        <name>GpuBuffer</name>
        <qualifiedname>mediapipe::GpuBuffer::GpuBuffer</qualifiedname>
        <param>
          <type>const GpuBuffer &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="66" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a90883e20fe437cc39bb966eab691ed97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mediapipe::GpuBuffer::GpuBuffer</definition>
        <argsstring>(GpuBuffer &amp;&amp;other)=default</argsstring>
        <name>GpuBuffer</name>
        <qualifiedname>mediapipe::GpuBuffer::GpuBuffer</qualifiedname>
        <param>
          <type>GpuBuffer &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="67" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a5017679f3311c67dbb16048c59b37113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GpuBuffer &amp;</type>
        <definition>GpuBuffer &amp; mediapipe::GpuBuffer::operator=</definition>
        <argsstring>(const GpuBuffer &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>mediapipe::GpuBuffer::operator=</qualifiedname>
        <param>
          <type>const GpuBuffer &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="68" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1af3da1d4a891b7fc9d92697ff578bdd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GpuBuffer &amp;</type>
        <definition>GpuBuffer &amp; mediapipe::GpuBuffer::operator=</definition>
        <argsstring>(GpuBuffer &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>mediapipe::GpuBuffer::operator=</qualifiedname>
        <param>
          <type>GpuBuffer &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="69" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1ae7419a81c7d3caef25201577ab1e12e0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mediapipe::GpuBuffer::GpuBuffer</definition>
        <argsstring>(std::shared_ptr&lt; internal::GpuBufferStorage &gt; storage)</argsstring>
        <name>GpuBuffer</name>
        <qualifiedname>mediapipe::GpuBuffer::GpuBuffer</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; internal::GpuBufferStorage &gt;</type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="76" column="12" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a285a7e12e5bbba897b0a386d77969a24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mediapipe::GpuBuffer::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>mediapipe::GpuBuffer::width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="91" column="7" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a07b1658e6b9f6558ae4c4d5e94421214" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mediapipe::GpuBuffer::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <qualifiedname>mediapipe::GpuBuffer::height</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="92" column="7" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1aea6e13bc9acccbaf005017fdabc319fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GpuBufferFormat</type>
        <definition>GpuBufferFormat mediapipe::GpuBuffer::format</definition>
        <argsstring>() const</argsstring>
        <name>format</name>
        <qualifiedname>mediapipe::GpuBuffer::format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="93" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a377871ae5f0324ef1ec2453acce0f746" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mediapipe::GpuBuffer::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <qualifiedname>mediapipe::GpuBuffer::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="98" column="12" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1ad61a35e991aec4886b6e705e41fee454" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::GpuBuffer::operator==</definition>
        <argsstring>(const GpuBuffer &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>mediapipe::GpuBuffer::operator==</qualifiedname>
        <param>
          <type>const GpuBuffer &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="100" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1adb25dd0eba728efe6ce98c778cdf30c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::GpuBuffer::operator!=</definition>
        <argsstring>(const GpuBuffer &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>mediapipe::GpuBuffer::operator!=</qualifiedname>
        <param>
          <type>const GpuBuffer &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="101" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a8a082677cf744ba1ba1c9740c3b035c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::GpuBuffer::operator==</definition>
        <argsstring>(std::nullptr_t other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>mediapipe::GpuBuffer::operator==</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="104" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1aa331697900b749dcc5d502cc94ed385b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mediapipe::GpuBuffer::operator!=</definition>
        <argsstring>(std::nullptr_t other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>mediapipe::GpuBuffer::operator!=</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="105" column="8" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a413abd629ff337770ca0c23fa6502723" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>GpuBuffer &amp;</type>
        <definition>GpuBuffer &amp; mediapipe::GpuBuffer::operator=</definition>
        <argsstring>(std::nullptr_t other)</argsstring>
        <name>operator=</name>
        <qualifiedname>mediapipe::GpuBuffer::operator=</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="108" column="13" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1ac91e4a0cd601aedbcf8f9c0071c37569" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) mediapipe::GpuBuffer::GetReadView</definition>
        <argsstring>(Args... args) const</argsstring>
        <name>GetReadView</name>
        <qualifiedname>mediapipe::GpuBuffer::GetReadView</qualifiedname>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="113" column="12" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a427003fd8b786ed21fb4e5007142aab1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) mediapipe::GpuBuffer::GetWriteView</definition>
        <argsstring>(Args... args)</argsstring>
        <name>GetWriteView</name>
        <qualifiedname>mediapipe::GpuBuffer::GetWriteView</qualifiedname>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="121" column="12" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a4791b79ba8238a8fdd6f6696aaee94b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; T &gt;</type>
        <definition>std::shared_ptr&lt; T &gt; mediapipe::GpuBuffer::internal_storage</definition>
        <argsstring>() const</argsstring>
        <name>internal_storage</name>
        <qualifiedname>mediapipe::GpuBuffer::internal_storage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="130" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a74a189fa4bbb074d1e0db58a1714c2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mediapipe::GpuBuffer::DebugString</definition>
        <argsstring>() const</argsstring>
        <name>DebugString</name>
        <qualifiedname>mediapipe::GpuBuffer::DebugString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="134" column="15" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.cc" bodystart="29" bodyend="33"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1ac89307b6e12ff862429a186e47682770" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>internal::GpuBufferStorage *</type>
        <definition>internal::GpuBufferStorage * mediapipe::GpuBuffer::GetStorageForView</definition>
        <argsstring>(TypeId view_provider_type, bool for_writing) const</argsstring>
        <name>GetStorageForView</name>
        <qualifiedname>mediapipe::GpuBuffer::GetStorageForView</qualifiedname>
        <param>
          <type>TypeId</type>
          <declname>view_provider_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>for_writing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="137" column="30" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a0b36738346c3504b795a0c6c503884f4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>internal::GpuBufferStorage &amp;</type>
        <definition>internal::GpuBufferStorage &amp; mediapipe::GpuBuffer::GetStorageForViewOrDie</definition>
        <argsstring>(TypeId view_provider_type, bool for_writing) const</argsstring>
        <name>GetStorageForViewOrDie</name>
        <qualifiedname>mediapipe::GpuBuffer::GetStorageForViewOrDie</qualifiedname>
        <param>
          <type>TypeId</type>
          <declname>view_provider_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>for_writing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="143" column="30" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.cc" bodystart="127" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classmediapipe_1_1GpuBuffer_1a3e15b0b6bba7247cbec08ab1a7f865b9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>internal::ViewProvider&lt; View &gt; &amp;</type>
        <definition>internal::ViewProvider&lt; View &gt; &amp; mediapipe::GpuBuffer::GetViewProviderOrDie</definition>
        <argsstring>(bool for_writing) const</argsstring>
        <name>GetViewProviderOrDie</name>
        <qualifiedname>mediapipe::GpuBuffer::GetViewProviderOrDie</qualifiedname>
        <param>
          <type>bool</type>
          <declname>for_writing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="147" column="26" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="147" bodyend="151"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" line="53" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/gpu/gpu_buffer.h" bodystart="53" bodyend="200"/>
    <listofallmembers>
      <member refid="classmediapipe_1_1GpuBuffer_1a74a189fa4bbb074d1e0db58a1714c2fd" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>DebugString</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a7a746d1135632803797b7833d1c223a3" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>Format</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1aea6e13bc9acccbaf005017fdabc319fa" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>format</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1ac91e4a0cd601aedbcf8f9c0071c37569" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GetReadView</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1ac89307b6e12ff862429a186e47682770" prot="private" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GetStorageForView</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a0b36738346c3504b795a0c6c503884f4" prot="private" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GetStorageForViewOrDie</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a3e15b0b6bba7247cbec08ab1a7f865b9" prot="private" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GetViewProviderOrDie</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a427003fd8b786ed21fb4e5007142aab1" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GetWriteView</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1af2571a09abbc0de86574a8af01efd225" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GpuBuffer</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1af230553003ebb9a958872f4b180ac3bc" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GpuBuffer</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a7d15a59a135e1736c815035e2e7ca7af" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GpuBuffer</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a90883e20fe437cc39bb966eab691ed97" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GpuBuffer</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1ae7419a81c7d3caef25201577ab1e12e0" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>GpuBuffer</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a07b1658e6b9f6558ae4c4d5e94421214" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>height</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a79648c446efb92f46da72937ef163dfa" prot="private" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>holder_</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a4791b79ba8238a8fdd6f6696aaee94b2" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>internal_storage</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a377871ae5f0324ef1ec2453acce0f746" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator bool</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1adb25dd0eba728efe6ce98c778cdf30c8" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator!=</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1aa331697900b749dcc5d502cc94ed385b" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator!=</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a5017679f3311c67dbb16048c59b37113" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator=</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1af3da1d4a891b7fc9d92697ff578bdd37" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator=</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a413abd629ff337770ca0c23fa6502723" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator=</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1ad61a35e991aec4886b6e705e41fee454" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator==</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a8a082677cf744ba1ba1c9740c3b035c6" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>operator==</name></member>
      <member refid="classmediapipe_1_1GpuBuffer_1a285a7e12e5bbba897b0a386d77969a24" prot="public" virt="non-virtual"><scope>mediapipe::GpuBuffer</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
