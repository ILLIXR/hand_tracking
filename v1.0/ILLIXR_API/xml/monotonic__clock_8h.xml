<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="monotonic__clock_8h" kind="file" language="C++">
    <compoundname>monotonic_clock.h</compoundname>
    <includes local="yes">absl/time/time.h</includes>
    <includes refid="clock_8h" local="yes">mediapipe/framework/deps/clock.h</includes>
    <includedby refid="monotonic__clock_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/monotonic_clock.cc</includedby>
    <includedby refid="graph__profiler_8h" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/profiler/graph_profiler.h</includedby>
    <includedby refid="scheduler__shared_8h" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/scheduler_shared.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>mediapipe/framework/deps/clock.h</label>
        <link refid="clock_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/monotonic_clock.h</label>
        <link refid="monotonic__clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>absl/time/time.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/hand_tracking_publisher.hpp</label>
        <link refid="hand__tracking__publisher_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/core/begin_loop_calculator.h</label>
        <link refid="begin__loop__calculator_8h_source"/>
      </node>
      <node id="9">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/core/clip_vector_size_calculator.h</label>
        <link refid="clip__vector__size__calculator_8h_source"/>
      </node>
      <node id="10">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/core/end_loop_calculator.h</label>
        <link refid="end__loop__calculator_8h_source"/>
      </node>
      <node id="11">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/core/split_vector_calculator.h</label>
        <link refid="split__vector__calculator_8h_source"/>
      </node>
      <node id="12">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/tensor/image_to_tensor_converter_gl_buffer.h</label>
        <link refid="image__to__tensor__converter__gl__buffer_8h_source"/>
      </node>
      <node id="13">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/tensor/image_to_tensor_converter_gl_texture.h</label>
        <link refid="image__to__tensor__converter__gl__texture_8h_source"/>
      </node>
      <node id="14">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/tensor/image_to_tensor_converter_opencv.h</label>
        <link refid="image__to__tensor__converter__opencv_8h_source"/>
      </node>
      <node id="15">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/tensor/inference_calculator.h</label>
        <link refid="inference__calculator_8h_source"/>
      </node>
      <node id="16">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/util/association_calculator.h</label>
        <link refid="association__calculator_8h_source"/>
      </node>
      <node id="17">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/util/collection_has_min_size_calculator.h</label>
        <link refid="collection__has__min__size__calculator_8h_source"/>
      </node>
      <node id="18">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/util/detections_to_rects_calculator.h</label>
        <link refid="detections__to__rects__calculator_8h_source"/>
      </node>
      <node id="19">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/util/filter_collection_calculator.h</label>
        <link refid="filter__collection__calculator_8h_source"/>
      </node>
      <node id="20">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/util/landmarks_to_render_data_calculator.h</label>
        <link refid="landmarks__to__render__data__calculator_8h_source"/>
      </node>
      <node id="7">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/calculator_framework.h</label>
        <link refid="calculator__framework_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/calculator_graph.h</label>
        <link refid="calculator__graph_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/monotonic_clock.h</label>
        <link refid="monotonic__clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/profiler/graph_profiler.h</label>
        <link refid="graph__profiler_8h_source"/>
      </node>
      <node id="24">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/scheduler.h</label>
        <link refid="scheduler_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/scheduler_queue.h</label>
        <link refid="scheduler__queue_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/scheduler_shared.h</label>
        <link refid="scheduler__shared_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/stream_handler/fixed_size_input_stream_handler.h</label>
        <link refid="fixed__size__input__stream__handler_8h_source"/>
      </node>
      <node id="22">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/stream_handler/immediate_input_stream_handler.h</label>
        <link refid="immediate__input__stream__handler_8h_source"/>
      </node>
      <node id="23">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/tool/container_util.h</label>
        <link refid="container__util_8h_source"/>
      </node>
      <node id="6">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/plugin.hpp</label>
        <link refid="plugin_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmediapipe_1_1MonotonicClock" prot="public">mediapipe::MonotonicClock</innerclass>
    <innerclass refid="classmediapipe_1_1MonotonicClockAccess" prot="public">mediapipe::MonotonicClockAccess</innerclass>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>The<sp/>MediaPipe<sp/>Authors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MEDIAPIPE_DEPS_MONOTONIC_CLOCK_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEDIAPIPE_DEPS_MONOTONIC_CLOCK_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/time/time.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/deps/clock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MonotonicClock<sp/>is<sp/>an<sp/>interface<sp/>for<sp/>a<sp/>Clock<sp/>that<sp/>never<sp/>goes<sp/>backward.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Successive<sp/>returned<sp/>values<sp/>from<sp/>Now()<sp/>are<sp/>guaranteed<sp/>to<sp/>be<sp/>monotonically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-decreasing,<sp/>although<sp/>they<sp/>may<sp/>not<sp/>be<sp/>monotonic<sp/>with<sp/>respect<sp/>to<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returned<sp/>from<sp/>other<sp/>instances<sp/>of<sp/>MonotonicClock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>wrap<sp/>any<sp/>Clock<sp/>object<sp/>in<sp/>a<sp/>MonotonicClock<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CreateMonotonicClock()<sp/>factory<sp/>method,<sp/>including<sp/>Clock::RealClock().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>if<sp/>you<sp/>want<sp/>a<sp/>monotonic<sp/>version<sp/>of<sp/>real<sp/>time,<sp/>it<sp/>is<sp/>strongly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recommended<sp/>that<sp/>you<sp/>use<sp/>the<sp/>CreateSynchronizedMonotonicClock()<sp/>factory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method,<sp/>which<sp/>wraps<sp/>Clock::RealClock()<sp/>and<sp/>guarantees<sp/>that<sp/>values<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>Now()<sp/>are<sp/>monotonic<sp/>ACROSS<sp/>instances<sp/>of<sp/>the<sp/>class<sp/>that<sp/>are<sp/>created<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CreateSynchronizedMonotonicClock().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>methods<sp/>support<sp/>concurrent<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MonotonicClock<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Clock<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>MonotonicClock<sp/>state,<sp/>which<sp/>may<sp/>be<sp/>shared<sp/>between<sp/>MonotonicClocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">State;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>~MonotonicClock()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Clock<sp/>interface<sp/>(see<sp/>util/time/clock.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>monotonically<sp/>non-decreasing<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>absl::Time<sp/>TimeNow()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep<sp/>and<sp/>SleepUntil<sp/>guarantee<sp/>only<sp/>that<sp/>the<sp/>caller<sp/>will<sp/>sleep<sp/>for<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>least<sp/>as<sp/>long<sp/>as<sp/>specified<sp/>in<sp/>monotonic<sp/>time.<sp/><sp/>The<sp/>caller<sp/>may<sp/>sleep<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>much<sp/>longer<sp/>(in<sp/>monotonic<sp/>time)<sp/>if<sp/>monotonic<sp/>time<sp/>jumps<sp/>far<sp/>into<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>future.<sp/><sp/>Whether<sp/>or<sp/>not<sp/>this<sp/>happens<sp/>depends<sp/>on<sp/>the<sp/>behavior<sp/>of<sp/>the<sp/>raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sleep(absl::Duration<sp/>d)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SleepUntil(absl::Time<sp/>wakeup_time)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>metrics<sp/>about<sp/>time<sp/>corrections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GetCorrectionMetrics(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>correction_count,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>max_correction)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>values<sp/>returned<sp/>by<sp/>GetCorrectionMetrics().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResetCorrectionMetrics()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Factory<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>MonotonicClock<sp/>based<sp/>on<sp/>the<sp/>given<sp/>raw_clock.<sp/><sp/>This<sp/>clock<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>monotonically<sp/>non-decreasing<sp/>values<sp/>from<sp/>Now(),<sp/>but<sp/>may<sp/>not<sp/>behave</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>monotonically<sp/>with<sp/>respect<sp/>to<sp/>other<sp/>instances<sp/>created<sp/>by<sp/>this<sp/>function,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>if<sp/>they<sp/>are<sp/>based<sp/>on<sp/>the<sp/>same<sp/>raw_clock.<sp/><sp/>Caller<sp/>owns<sp/>raw_clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MonotonicClock*<sp/>CreateMonotonicClock(Clock*<sp/>raw_clock);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>instance<sp/>of<sp/>MonotonicClock<sp/>that<sp/>is<sp/>based<sp/>on<sp/>Clock::RealClock().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>such<sp/>instance<sp/>are<sp/>synced<sp/>with<sp/>each<sp/>other<sp/>such<sp/>that<sp/>return<sp/>values<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now()<sp/>are<sp/>monotonic<sp/>across<sp/>instances.<sp/><sp/>This<sp/>allows<sp/>independently<sp/>developed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>bases<sp/>to<sp/>have<sp/>private<sp/>instances<sp/>of<sp/>the<sp/>synchronized<sp/>MonotonicClock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>know<sp/>that<sp/>they<sp/>will<sp/>never<sp/>see<sp/>time<sp/>anomalies<sp/>when<sp/>calling<sp/>from<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>base<sp/>to<sp/>another.<sp/><sp/>Each<sp/>instance<sp/>can<sp/>have<sp/>its<sp/>own<sp/>correction<sp/>callback.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>Clock::RealClock(),<sp/>caller<sp/>owns<sp/>this<sp/>object<sp/>and<sp/>should<sp/>delete<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>no<sp/>longer<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MonotonicClock*<sp/>CreateSynchronizedMonotonicClock();</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MonotonicClockTest;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>access<sp/>to<sp/>MonotonicClock::State<sp/>for<sp/>unit-testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MonotonicClockAccess<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">State<sp/>=<sp/>MonotonicClock::State;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>internal<sp/>global<sp/>state.<sp/><sp/>Should<sp/>only<sp/>be<sp/>called<sp/>by<sp/>test<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SynchronizedMonotonicClockReset();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>State*<sp/>CreateMonotonicClockState(Clock*<sp/>raw_clock);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeleteMonotonicClockState(State*<sp/>state);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>monotonic<sp/>clock<sp/>based<sp/>on<sp/>the<sp/>given<sp/>state.<sp/><sp/>Caller<sp/>owns<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>multiple<sp/>such<sp/>clocks<sp/>can<sp/>be<sp/>created<sp/>from<sp/>the<sp/>same<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MonotonicClock*<sp/>CreateMonotonicClock(State*<sp/>state);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">mediapipe::MonotonicClockTest;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>MEDIAPIPE_DEPS_MONOTONIC_CLOCK_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/monotonic_clock.h"/>
  </compounddef>
</doxygen>
