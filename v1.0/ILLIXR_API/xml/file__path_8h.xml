<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="file__path_8h" kind="file" language="C++">
    <compoundname>file_path.h</compoundname>
    <includes local="no">initializer_list</includes>
    <includes local="no">string</includes>
    <includes local="yes">absl/strings/string_view.h</includes>
    <includedby refid="inference__calculator__gl__advanced_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/tensor/inference_calculator_gl_advanced.cc</includedby>
    <includedby refid="tensors__to__detections__calculator_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/tensor/tensors_to_detections_calculator.cc</includedby>
    <includedby refid="file__helpers_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/file_helpers.cc</includedby>
    <includedby refid="file__path_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/file_path.cc</includedby>
    <includedby refid="port_2file__helpers_8h" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/port/file_helpers.h</includedby>
    <includedby refid="profiler__resource__util__common_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/profiler/profiler_resource_util_common.cc</includedby>
    <includedby refid="resource__util_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/util/resource_util.cc</includedby>
    <includedby refid="resource__util__default_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/util/resource_util_default.cc</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/file_path.h</label>
        <link refid="file__path_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>absl/strings/string_view.h</label>
      </node>
      <node id="2">
        <label>initializer_list</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/file_path.h</label>
        <link refid="file__path_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/port/file_helpers.h</label>
        <link refid="port_2file__helpers_8h_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1file">mediapipe::file</innernamespace>
    <innernamespace refid="namespacemediapipe_1_1file_1_1internal">mediapipe::file::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>The<sp/>MediaPipe<sp/>Authors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MEDIAPIPE_DEPS_FILE_PATH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEDIAPIPE_DEPS_FILE_PATH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/strings/string_view.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>set<sp/>of<sp/>file<sp/>pathname<sp/>manipulation<sp/>routines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">file<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">std::string<sp/>JoinPathImpl(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>honor_abs,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;absl::string_view&gt;<sp/>paths);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Join<sp/>multiple<sp/>paths<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>JoinPath<sp/>and<sp/>JoinPathRespectAbsolute<sp/>have<sp/>slightly<sp/>different<sp/>semantics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>JoinPath<sp/>unconditionally<sp/>joins<sp/>all<sp/>paths<sp/>together,<sp/>whereas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>JoinPathRespectAbsolute<sp/>ignores<sp/>any<sp/>segments<sp/>prior<sp/>to<sp/>the<sp/>last<sp/>absolute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>path.<sp/><sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Arguments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>JoinPath<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>JoinPathRespectAbsolute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>---------------------------+---------------------+-----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>&apos;/foo&apos;,<sp/>&apos;bar&apos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>/foo/bar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>/foo/bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>&apos;/foo/&apos;,<sp/>&apos;bar&apos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>/foo/bar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>/foo/bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>&apos;/foo&apos;,<sp/>&apos;/bar&apos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>/foo/bar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>/bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>&apos;/foo&apos;,<sp/>&apos;/bar&apos;,<sp/>&apos;/baz&apos;<sp/><sp/><sp/><sp/><sp/>|<sp/>/foo/bar/baz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>/baz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>paths<sp/>will<sp/>be<sp/>treated<sp/>as<sp/>relative<sp/>paths,<sp/>regardless<sp/>of<sp/>whether<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>start<sp/>with<sp/>a<sp/>leading<sp/>&apos;/&apos;.<sp/><sp/>That<sp/>is,<sp/>all<sp/>paths<sp/>will<sp/>be<sp/>concatenated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>together,<sp/>with<sp/>the<sp/>appropriate<sp/>path<sp/>separator<sp/>inserted<sp/>in<sp/>between.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments<sp/>must<sp/>be<sp/>convertible<sp/>to<sp/>absl::string_view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string<sp/>path<sp/>=<sp/>file::JoinPath(&quot;/cns&quot;,<sp/>dirname,<sp/>filename);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string<sp/>path<sp/>=<sp/>file::JoinPath(&quot;./&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>0,<sp/>1,<sp/>2-path<sp/>specializations<sp/>exist<sp/>to<sp/>optimize<sp/>common<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>JoinPath()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>JoinPath(absl::string_view<sp/>path)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(path.data(),<sp/>path.size());</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">std::string<sp/>JoinPath(absl::string_view<sp/>path1,<sp/>absl::string_view<sp/>path2);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>JoinPath(absl::string_view<sp/>path1,<sp/>absl::string_view<sp/>path2,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::string_view<sp/>path3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::JoinPathImpl(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>{path1,<sp/>path2,<sp/>path3,<sp/>args...});</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>part<sp/>of<sp/>the<sp/>path<sp/>before<sp/>the<sp/>final<sp/>&quot;/&quot;,<sp/>EXCEPT:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>there<sp/>is<sp/>a<sp/>single<sp/>leading<sp/>&quot;/&quot;<sp/>in<sp/>the<sp/>path,<sp/>the<sp/>result<sp/>will<sp/>be<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>leading<sp/>&quot;/&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>there<sp/>is<sp/>no<sp/>&quot;/&quot;<sp/>in<sp/>the<sp/>path,<sp/>the<sp/>result<sp/>is<sp/>the<sp/>empty<sp/>prefix<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>input<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">absl::string_view<sp/>Dirname(absl::string_view<sp/>path);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>path,<sp/>split<sp/>on<sp/>the<sp/>final<sp/>&quot;/&quot;.<sp/><sp/>If<sp/>there<sp/>is<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;/&quot;<sp/>in<sp/>the<sp/>path,<sp/>the<sp/>first<sp/>part<sp/>of<sp/>the<sp/>output<sp/>is<sp/>empty<sp/>and<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>input.<sp/>If<sp/>the<sp/>only<sp/>&quot;/&quot;<sp/>in<sp/>the<sp/>path<sp/>is<sp/>the<sp/>first<sp/>character,<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>part<sp/>of<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">std::pair&lt;absl::string_view,<sp/>absl::string_view&gt;<sp/>SplitPath(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::string_view<sp/>path);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>part<sp/>of<sp/>the<sp/>path<sp/>after<sp/>the<sp/>final<sp/>&quot;/&quot;.<sp/><sp/>If<sp/>there<sp/>is<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;/&quot;<sp/>in<sp/>the<sp/>path,<sp/>the<sp/>result<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>function&apos;s<sp/>behavior<sp/>differs<sp/>from<sp/>the<sp/>Unix<sp/>basename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>command<sp/>if<sp/>path<sp/>ends<sp/>with<sp/>&quot;/&quot;.<sp/>For<sp/>such<sp/>paths,<sp/>this<sp/>function<sp/>returns<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">absl::string_view<sp/>Basename(absl::string_view<sp/>path);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>part<sp/>of<sp/>the<sp/>basename<sp/>of<sp/>path<sp/>after<sp/>the<sp/>final<sp/>&quot;.&quot;.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>&quot;.&quot;<sp/>in<sp/>the<sp/>basename,<sp/>the<sp/>result<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">absl::string_view<sp/>Extension(absl::string_view<sp/>path);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>MEDIAPIPE_DEPS_FILE_PATH_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/file_path.h"/>
  </compounddef>
</doxygen>
