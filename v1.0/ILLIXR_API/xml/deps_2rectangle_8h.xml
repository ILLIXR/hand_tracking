<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="deps_2rectangle_8h" kind="file" language="C++">
    <compoundname>rectangle.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">limits</includes>
    <includes local="no">ostream</includes>
    <includes refid="deps_2point2_8h" local="yes">mediapipe/framework/deps/point2.h</includes>
    <includedby refid="port_2rectangle_8h" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/port/rectangle.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>mediapipe/framework/deps/mathutil.h</label>
        <link refid="mathutil_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>mediapipe/framework/deps/point2.h</label>
        <link refid="deps_2point2_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h</label>
        <link refid="deps_2rectangle_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mediapipe/framework/deps/vector.h</label>
        <link refid="deps_2vector_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>mediapipe/framework/port/logging.h</label>
        <link refid="logging_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>mediapipe/util/unused.hpp</label>
        <link refid="unused_8hpp_source"/>
      </node>
      <node id="12">
        <label>absl/log/absl_check.h</label>
      </node>
      <node id="20">
        <label>absl/strings/has_ostream_operator.h</label>
      </node>
      <node id="17">
        <label>absl/time/time.h</label>
      </node>
      <node id="15">
        <label>absl/utility/utility.h</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="18">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>cstdlib</label>
      </node>
      <node id="21">
        <label>glog/logging.h</label>
      </node>
      <node id="5">
        <label>iosfwd</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="7">
        <label>ostream</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="19">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/util/association_calculator.h</label>
        <link refid="association__calculator_8h_source"/>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h</label>
        <link refid="deps_2rectangle_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/formats/location.h</label>
        <link refid="location_8h_source"/>
      </node>
      <node id="2">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/port/rectangle.h</label>
        <link refid="port_2rectangle_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/util/rectangle_util.h</label>
        <link refid="rectangle__util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classRectangle" prot="public">Rectangle</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="deps_2rectangle_8h_1aaa1c58a46acde36108196691bd8b9284" prot="public" static="no">
        <type>Rectangle&lt; uint8_t &gt;</type>
        <definition>typedef Rectangle&lt;uint8_t&gt; Rectangle_b</definition>
        <argsstring></argsstring>
        <name>Rectangle_b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" line="323" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="deps_2rectangle_8h_1abef9582f1ee957dbbee28de2ae04925a" prot="public" static="no">
        <type>Rectangle&lt; int &gt;</type>
        <definition>typedef Rectangle&lt;int&gt; Rectangle_i</definition>
        <argsstring></argsstring>
        <name>Rectangle_i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" line="324" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="deps_2rectangle_8h_1a3cfaddb40135ecd698c5e05783df0b34" prot="public" static="no">
        <type>Rectangle&lt; float &gt;</type>
        <definition>typedef Rectangle&lt;float&gt; Rectangle_f</definition>
        <argsstring></argsstring>
        <name>Rectangle_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" line="325" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="deps_2rectangle_8h_1a56f7b5beac678b30ebc4c20532315696" prot="public" static="no">
        <type>Rectangle&lt; double &gt;</type>
        <definition>typedef Rectangle&lt;double&gt; Rectangle_d</definition>
        <argsstring></argsstring>
        <name>Rectangle_d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" line="326" column="19" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" bodystart="326" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="deps_2rectangle_8h_1a0b96eda879053467c71e37d8f4d358c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Rectangle&lt; T &gt; &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <param>
          <type>const Rectangle&lt; T &gt; &amp;</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" line="314" column="1" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" bodystart="314" bodyend="318" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h" declline="38" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>The<sp/>MediaPipe<sp/>Authors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>for<sp/>axis-aligned<sp/>rectangles<sp/>represented<sp/>as<sp/>two<sp/>corner<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(min_x,<sp/>min_y)<sp/>and<sp/>(max_x,<sp/>max_y).<sp/><sp/>The<sp/>methods<sp/>such<sp/>as<sp/>Contain,<sp/>Intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>IsEmpty()<sp/>assume<sp/>that<sp/>the<sp/>points<sp/>in<sp/>region<sp/>include<sp/>the<sp/>4<sp/>boundary<sp/>edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>box<sp/>is<sp/>initialized<sp/>so<sp/>that<sp/>IsEmpty()<sp/>is<sp/>true.<sp/><sp/>Note<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>of<sp/>corner<sp/>points<sp/>supports<sp/>both<sp/>right-handed<sp/>(Cartesian)<sp/>and<sp/>left-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handed<sp/>(image)<sp/>coordinate<sp/>systems.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MEDIAPIPE_DEPS_RECTANGLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEDIAPIPE_DEPS_RECTANGLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/deps/point2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Rectangle;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Rectangle<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;<sp/>Self;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructed<sp/>rectangle<sp/>which<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>Rectangle()<sp/>{<sp/>SetEmpty();<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>rectangle<sp/>from<sp/>the<sp/>minimum<sp/>point<sp/>and<sp/>the<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>Rectangle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>width,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>height);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>rectangle<sp/>given<sp/>two<sp/>points.<sp/><sp/>The<sp/>resulting<sp/>rectangle<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>non-negative<sp/>width<sp/>and<sp/>height.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>Rectangle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>above<sp/>but<sp/>using<sp/>vectors<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>Rectangle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>min<sp/>to<sp/>be<sp/>very<sp/>large<sp/>numbers<sp/>and<sp/>max<sp/>to<sp/>be<sp/>very<sp/>large<sp/>negative<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>points<sp/>can<sp/>be<sp/>used<sp/>to<sp/>correctly<sp/>extend<sp/>the<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetEmpty();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>rectangle<sp/>is<sp/>empty<sp/>if<sp/>there<sp/>are<sp/>no<sp/>points<sp/>inside<sp/>of<sp/>it.<sp/><sp/>A<sp/>degenerate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rectangle<sp/>where<sp/>the<sp/>corners<sp/>are<sp/>coincident<sp/>has<sp/>zero<sp/>area<sp/>but<sp/>is<sp/>not<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsEmpty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_.x()<sp/>&gt;<sp/>max_.x()<sp/>||<sp/>min_.y()<sp/>&gt;<sp/>max_.y();<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Width<sp/>and<sp/>height<sp/>are<sp/>both<sp/>max<sp/>-<sp/>min,<sp/>which<sp/>may<sp/>be<sp/>negative<sp/>if<sp/>SetEmpty()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>called<sp/>or<sp/>the<sp/>user<sp/>explicity<sp/>set<sp/>the<sp/>min<sp/>and<sp/>max<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>T<sp/>Width()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_.x()<sp/>-<sp/>min_.x();<sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>T<sp/>Height()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_.y()<sp/>-<sp/>min_.y();<sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>area,<sp/>which<sp/>is<sp/>negative<sp/>if<sp/>the<sp/>width<sp/>xor<sp/>height<sp/>is<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>is<sp/>undefined<sp/>if<sp/>SetEmpty()<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Watch<sp/>out<sp/>for<sp/>large<sp/>integer<sp/>rectangles<sp/>because<sp/>the<sp/>area<sp/>may<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>T<sp/>Area()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Width()<sp/>*<sp/>Height();<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessors<sp/>are<sp/>provided<sp/>for<sp/>both<sp/>points<sp/>and<sp/>sides.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xmin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_.x();<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xmax()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_.x();<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>ymin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_.y();<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>ymax()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_.y();<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>min<sp/>and<sp/>max<sp/>corner<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>min_xy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_;<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>max_xy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>geometry<sp/>of<sp/>the<sp/>rectangle<sp/>given<sp/>two<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>resulting<sp/>rectangle<sp/>will<sp/>have<sp/>non-negative<sp/>width<sp/>and<sp/>height.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>above<sp/>using<sp/>vectors<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>geometry<sp/>of<sp/>the<sp/>rectangle<sp/>given<sp/>a<sp/>minimum<sp/>point<sp/>and<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>width,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>height);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>min<sp/>and<sp/>max<sp/>values,<sp/>and<sp/>min<sp/>greater<sp/>than<sp/>max<sp/>is<sp/>allowable,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>user<sp/>has<sp/>to<sp/>be<sp/>aware<sp/>of<sp/>the<sp/>consequences<sp/>such<sp/>as<sp/>negative<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>height.<sp/><sp/>Both<sp/>point<sp/>and<sp/>side<sp/>accessors<sp/>are<sp/>provided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_xmin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{<sp/>min_.set_x(x);<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_xmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{<sp/>max_.set_x(x);<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_ymin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/>{<sp/>min_.set_y(y);<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_ymax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/>{<sp/>max_.set_y(y);<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_min_xy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p)<sp/>{<sp/>min_.Set(p.x(),<sp/>p.y());<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_max_xy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p)<sp/>{<sp/>max_.Set(p.x(),<sp/>p.y());<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expands<sp/>a<sp/>rectangle<sp/>to<sp/>contain<sp/>a<sp/>point<sp/>or<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expands<sp/>a<sp/>rectangle<sp/>to<sp/>contain<sp/>another<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;<sp/>other);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>union<sp/>of<sp/>this<sp/>rectangle<sp/>with<sp/>another<sp/>rectangle,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>smallest<sp/>rectangle<sp/>that<sp/>contains<sp/>both<sp/>rectangles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>Rectangle<sp/>Union(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>intersection<sp/>of<sp/>this<sp/>rectangle<sp/>with<sp/>another<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>intersection<sp/>is<sp/>empty,<sp/>returns<sp/>a<sp/>rectangle<sp/>initialized<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetEmpty().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>Rectangle<sp/>Intersect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>if<sp/>this<sp/>rectangle<sp/>has<sp/>a<sp/>non-empty<sp/>intersection<sp/>with<sp/>another<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>boundary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Intersects(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>if<sp/>a<sp/>point<sp/>is<sp/>inside<sp/>or<sp/>on<sp/>any<sp/>of<sp/>the<sp/>4<sp/>edges<sp/>of<sp/>the<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>pt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>pt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>if<sp/>a<sp/>rectangle<sp/>is<sp/>inside<sp/>or<sp/>on<sp/>any<sp/>of<sp/>the<sp/>4<sp/>edges<sp/>of<sp/>the<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Translates<sp/>this<sp/>rectangle<sp/>by<sp/>a<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Translate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>border<sp/>around<sp/>the<sp/>rectangle<sp/>by<sp/>subtracting<sp/>the<sp/>border<sp/>size<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>min<sp/>point<sp/>and<sp/>adding<sp/>it<sp/>to<sp/>the<sp/>max<sp/>point.<sp/><sp/>The<sp/>border<sp/>size<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddBorder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>border_size);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Debug<sp/>printing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>&lt;T&gt;(std::ostream&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&amp;);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>Point2&lt;T&gt;<sp/>min_;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>Point2&lt;T&gt;<sp/>max_;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inline<sp/>method<sp/>definitions.<sp/><sp/>These<sp/>are<sp/>not<sp/>placed<sp/>in<sp/>the<sp/>definition<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>to<sp/>keep<sp/>the<sp/>class<sp/>interface<sp/>more<sp/>readable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">Rectangle&lt;T&gt;::Rectangle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p1)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>Set(p0,<sp/>p1);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">Rectangle&lt;T&gt;::Rectangle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p1)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>Set(p0,<sp/>p1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">Rectangle&lt;T&gt;::Rectangle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>width,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>Set(x,<sp/>y,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>general<sp/>version<sp/>works<sp/>only<sp/>when<sp/>T<sp/>models<sp/>Integer<sp/>(there<sp/>are<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integer<sp/>classes<sp/>than<sp/>float<sp/>classes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::SetEmpty()<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>T<sp/>min_value<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>T<sp/>max_value<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>min_.Set(max_value,<sp/>max_value);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>max_.Set(min_value,<sp/>min_value);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;float&gt;::SetEmpty()<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_value<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>min_.Set(max_value,<sp/>max_value);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>max_.Set(-max_value,<sp/>-max_value);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;double&gt;::SetEmpty()<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_value<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>min_.Set(max_value,<sp/>max_value);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>max_.Set(-max_value,<sp/>-max_value);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_<sp/>==<sp/>other.min_<sp/>&amp;&amp;<sp/>max_<sp/>==<sp/>other.max_;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>p1)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p0[0]<sp/>&lt;=<sp/>p1[0])</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>min_.set_x(p0[0]),<sp/>max_.set_x(p1[0]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>max_.set_x(p0[0]),<sp/>min_.set_x(p1[0]);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p0[1]<sp/>&lt;=<sp/>p1[1])</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>min_.set_y(p0[1]),<sp/>max_.set_y(p1[1]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>max_.set_y(p0[1]),<sp/>min_.set_y(p1[1]);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p1)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>Set(p0.ToVector(),<sp/>p1.ToVector());</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>width,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>min_.Set(x,<sp/>y);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>max_.Set(x<sp/>+<sp/>width,<sp/>y<sp/>+<sp/>height);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>min_.Set(std::min(x,<sp/>xmin()),<sp/>std::min(y,<sp/>ymin()));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>max_.Set(std::max(x,<sp/>xmax()),<sp/>std::max(y,<sp/>ymax()));</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>Expand(p.x(),<sp/>p.y());</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>Expand(v[0],<sp/>v[1]);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>Expand(other.min_);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>Expand(other.max_);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Translate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>min_<sp/>+=<sp/>v;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>max_<sp/>+=<sp/>v;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;=<sp/>xmin()<sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/>xmax()<sp/>&amp;&amp;<sp/>y<sp/>&gt;=<sp/>ymin()<sp/>&amp;&amp;<sp/>y<sp/>&lt;=<sp/>ymax();</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point2&lt;T&gt;&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Contains(p.x(),<sp/>p.y());</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&lt;T&gt;&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Contains(v[0],<sp/>v[1]);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Contains(r.min_)<sp/>&amp;&amp;<sp/>Contains(r.max_);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">Rectangle&lt;T&gt;<sp/>Rectangle&lt;T&gt;::Union(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;(</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point2&lt;T&gt;(std::min(xmin(),<sp/>r.xmin()),<sp/>std::min(ymin(),<sp/>r.ymin())),</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point2&lt;T&gt;(std::max(xmax(),<sp/>r.xmax()),<sp/>std::max(ymax(),<sp/>r.ymax())));</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">Rectangle&lt;T&gt;<sp/>Rectangle&lt;T&gt;::Intersect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>Point2&lt;T&gt;<sp/>pmin(std::max(xmin(),<sp/>r.xmin()),<sp/>std::max(ymin(),<sp/>r.ymin()));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>Point2&lt;T&gt;<sp/>pmax(std::min(xmax(),<sp/>r.xmax()),<sp/>std::min(ymax(),<sp/>r.ymax()));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pmin.x()<sp/>&gt;<sp/>pmax.x()<sp/>||<sp/>pmin.y()<sp/>&gt;<sp/>pmax.y())</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;(pmin,<sp/>pmax);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::Intersects(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(IsEmpty()<sp/>||<sp/>r.IsEmpty()<sp/>||<sp/>r.xmax()<sp/>&lt;<sp/>xmin()<sp/>||<sp/>xmax()<sp/>&lt;<sp/>r.xmin()<sp/>||</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.ymax()<sp/>&lt;<sp/>ymin()<sp/>||<sp/>ymax()<sp/>&lt;<sp/>r.ymin());</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;::AddBorder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>border_size)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>min_.Set(xmin()<sp/>-<sp/>border_size,<sp/>ymin()<sp/>-<sp/>border_size);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>max_.Set(xmax()<sp/>+<sp/>border_size,<sp/>ymax()<sp/>+<sp/>border_size);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rectangle&lt;T&gt;&amp;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r.xmin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r.ymin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r.xmax()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>r.ymax()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Rectangle;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rectangle&lt;uint8_t&gt;<sp/>Rectangle_b;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rectangle&lt;int&gt;<sp/>Rectangle_i;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rectangle&lt;float&gt;<sp/>Rectangle_f;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rectangle&lt;double&gt;<sp/>Rectangle_d;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>MEDIAPIPE_DEPS_RECTANGLE_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/framework/deps/rectangle.h"/>
  </compounddef>
</doxygen>
