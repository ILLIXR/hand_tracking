<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="tensors__to__classification__calculator_8pb_8h" kind="file" language="C++">
    <compoundname>tensors_to_classification_calculator.pb.h</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">string</includes>
    <includes local="no">google/protobuf/port_def.inc</includes>
    <includes local="no">google/protobuf/port_undef.inc</includes>
    <includes local="no">google/protobuf/io/coded_stream.h</includes>
    <includes local="no">google/protobuf/arena.h</includes>
    <includes local="no">google/protobuf/arenastring.h</includes>
    <includes local="no">google/protobuf/generated_message_table_driven.h</includes>
    <includes local="no">google/protobuf/generated_message_util.h</includes>
    <includes local="no">google/protobuf/metadata_lite.h</includes>
    <includes local="no">google/protobuf/generated_message_reflection.h</includes>
    <includes local="no">google/protobuf/message.h</includes>
    <includes local="no">google/protobuf/repeated_field.h</includes>
    <includes local="no">google/protobuf/extension_set.h</includes>
    <includes local="no">google/protobuf/map.h</includes>
    <includes local="no">google/protobuf/map_entry.h</includes>
    <includes local="no">google/protobuf/map_field_inl.h</includes>
    <includes local="no">google/protobuf/unknown_field_set.h</includes>
    <includes refid="calculator_8pb_8h" local="yes">mediapipe/framework/calculator.pb.h</includes>
    <includes refid="label__map_8pb_8h" local="yes">mediapipe/util/label_map.pb.h</includes>
    <includedby refid="tensors__to__classification__calculator_8pb_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.cc</includedby>
    <includedby refid="tensors__to__classification__calculator_8cc" local="yes">/home/friedel/devel/ILLIXR-plugins/hand_tracking/mediapipe/calculators/tensor/tensors_to_classification_calculator.cc</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h</label>
        <link refid="tensors__to__classification__calculator_8pb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>mediapipe/framework/calculator.pb.h</label>
        <link refid="calculator_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>mediapipe/framework/calculator_options.pb.h</label>
        <link refid="calculator__options_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>mediapipe/framework/mediapipe_options.pb.h</label>
        <link refid="mediapipe__options_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>mediapipe/framework/packet_factory.pb.h</label>
        <link refid="packet__factory_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>mediapipe/framework/packet_generator.pb.h</label>
        <link refid="packet__generator_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>mediapipe/framework/status_handler.pb.h</label>
        <link refid="status__handler_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>mediapipe/framework/stream_handler.pb.h</label>
        <link refid="stream__handler_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>mediapipe/util/label_map.pb.h</label>
        <link refid="label__map_8pb_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>google/protobuf/any.pb.h</label>
      </node>
      <node id="7">
        <label>google/protobuf/arena.h</label>
      </node>
      <node id="8">
        <label>google/protobuf/arenastring.h</label>
      </node>
      <node id="15">
        <label>google/protobuf/extension_set.h</label>
      </node>
      <node id="21">
        <label>google/protobuf/generated_enum_reflection.h</label>
      </node>
      <node id="12">
        <label>google/protobuf/generated_message_reflection.h</label>
      </node>
      <node id="9">
        <label>google/protobuf/generated_message_table_driven.h</label>
      </node>
      <node id="10">
        <label>google/protobuf/generated_message_util.h</label>
      </node>
      <node id="6">
        <label>google/protobuf/io/coded_stream.h</label>
      </node>
      <node id="16">
        <label>google/protobuf/map.h</label>
      </node>
      <node id="17">
        <label>google/protobuf/map_entry.h</label>
      </node>
      <node id="18">
        <label>google/protobuf/map_field_inl.h</label>
      </node>
      <node id="13">
        <label>google/protobuf/message.h</label>
      </node>
      <node id="11">
        <label>google/protobuf/metadata_lite.h</label>
      </node>
      <node id="4">
        <label>google/protobuf/port_def.inc</label>
      </node>
      <node id="5">
        <label>google/protobuf/port_undef.inc</label>
      </node>
      <node id="14">
        <label>google/protobuf/repeated_field.h</label>
      </node>
      <node id="19">
        <label>google/protobuf/unknown_field_set.h</label>
      </node>
      <node id="2">
        <label>limits</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
    </incdepgraph>
    <innerclass refid="structTableStruct__mediapipe__2fcalculators__2ftensor__2ftensors__5fto__5fclassification__5fcalculator__2eproto" prot="public">TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</innerclass>
    <innerclass refid="classmediapipe_1_1TensorsToClassificationCalculatorOptions__LabelMap__Entry" prot="public">mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry</innerclass>
    <innerclass refid="classmediapipe_1_1TensorsToClassificationCalculatorOptions__LabelMap" prot="public">mediapipe::TensorsToClassificationCalculatorOptions_LabelMap</innerclass>
    <innerclass refid="classmediapipe_1_1TensorsToClassificationCalculatorOptions__LabelItemsEntry__DoNotUse" prot="public">mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse</innerclass>
    <innerclass refid="classmediapipe_1_1TensorsToClassificationCalculatorOptions" prot="public">mediapipe::TensorsToClassificationCalculatorOptions</innerclass>
    <innernamespace refid="namespaceinternal">internal</innernamespace>
    <innernamespace refid="namespacemediapipe">mediapipe</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="tensors__to__classification__calculator_8pb_8h_1a029c47bf610b3d74336cfdc05d39af0d" prot="public" static="no">
        <name>PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" line="41" column="10" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="tensors__to__classification__calculator_8pb_8h_1a1e1e8c3067c07783cc753161abbb879a" prot="public" static="no" extern="yes" mutable="no">
        <type>const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable</type>
        <definition>const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</definition>
        <argsstring></argsstring>
        <name>descriptor_table_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" line="60" column="65" bodyfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.cc" bodystart="179" bodyend="184" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" declline="60" declcolumn="65"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="tensors__to__classification__calculator_8pb_8h_1a969a49824edca5c51f5703a2ae2220cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>PROTOBUF_NAMESPACE_OPEN ::mediapipe::TensorsToClassificationCalculatorOptions *</type>
        <definition>PROTOBUF_NAMESPACE_OPEN ::mediapipe::TensorsToClassificationCalculatorOptions * Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions &gt;</definition>
        <argsstring>(Arena *)</argsstring>
        <name>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" line="76" column="10" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="tensors__to__classification__calculator_8pb_8h_1a6156e64718cab320992190439394442d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>::mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse *</type>
        <definition>::mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse * Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse &gt;</definition>
        <argsstring>(Arena *)</argsstring>
        <name>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" line="77" column="10" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" declline="77" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="tensors__to__classification__calculator_8pb_8h_1a625c11110a1f6d557866c815f947842d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap *</type>
        <definition>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap * Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap &gt;</definition>
        <argsstring>(Arena *)</argsstring>
        <name>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" line="78" column="10" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" declline="78" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="tensors__to__classification__calculator_8pb_8h_1a9171cf48c9ef17138836a9f8ae805b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry *</type>
        <definition>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry * Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry &gt;</definition>
        <argsstring>(Arena *)</argsstring>
        <name>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry &gt;</name>
        <qualifiedname>CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry &gt;</qualifiedname>
        <param>
          <type>Arena *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" line="79" column="10" declfile="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h" declline="79" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Generated<sp/>by<sp/>the<sp/>protocol<sp/>buffer<sp/>compiler.<sp/><sp/>DO<sp/>NOT<sp/>EDIT!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>source:<sp/>mediapipe/calculators/tensor/tensors_to_classification_calculator.proto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_def.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PROTOBUF_VERSION<sp/>&lt;<sp/>3019000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>This<sp/>file<sp/>was<sp/>generated<sp/>by<sp/>a<sp/>newer<sp/>version<sp/>of<sp/>protoc<sp/>which<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>incompatible<sp/>with<sp/>your<sp/>Protocol<sp/>Buffer<sp/>headers.<sp/>Please<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>your<sp/>headers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>3019001<sp/>&lt;<sp/>PROTOBUF_MIN_PROTOC_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>This<sp/>file<sp/>was<sp/>generated<sp/>by<sp/>an<sp/>older<sp/>version<sp/>of<sp/>protoc<sp/>which<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>incompatible<sp/>with<sp/>your<sp/>Protocol<sp/>Buffer<sp/>headers.<sp/>Please</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>regenerate<sp/>this<sp/>file<sp/>with<sp/>a<sp/>newer<sp/>version<sp/>of<sp/>protoc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_undef.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/coded_stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/arena.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/arenastring.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/generated_message_table_driven.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/generated_message_util.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/metadata_lite.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/generated_message_reflection.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/message.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/repeated_field.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/extension_set.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/map.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/map_entry.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/map_field_inl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/unknown_field_set.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/framework/calculator.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mediapipe/util/label_map.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(includes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_def.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">PROTOBUF_NAMESPACE_OPEN</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AnyMetadata;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">PROTOBUF_NAMESPACE_CLOSE</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>implementation<sp/>detail<sp/>--<sp/>do<sp/>not<sp/>use<sp/>these<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseTableField<sp/>entries[]</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField<sp/>aux[]</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseTable<sp/>schema[4]</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>PROTOBUF_SECTION_VARIABLE(protodesc_cold);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata<sp/>field_metadata[];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::SerializationTable<sp/>serialization_table[];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offsets[];</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable<sp/>descriptor_table_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptionsDefaultTypeInternal;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptionsDefaultTypeInternal<sp/>_TensorsToClassificationCalculatorOptions_default_instance_;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUseDefaultTypeInternal;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUseDefaultTypeInternal<sp/>_TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse_default_instance_;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMapDefaultTypeInternal;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMapDefaultTypeInternal<sp/>_TensorsToClassificationCalculatorOptions_LabelMap_default_instance_;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap_Entry;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap_EntryDefaultTypeInternal;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_EntryDefaultTypeInternal<sp/>_TensorsToClassificationCalculatorOptions_LabelMap_Entry_default_instance_;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">PROTOBUF_NAMESPACE_OPEN</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions*<sp/>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions&gt;(Arena*);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse*<sp/>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse&gt;(Arena*);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&gt;(Arena*);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>Arena::CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry&gt;(Arena*);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">PROTOBUF_NAMESPACE_CLOSE</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mediapipe<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap_Entry<sp/>final<sp/>:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::PROTOBUF_NAMESPACE_ID::Message<sp/></highlight><highlight class="comment">/*<sp/>@@protoc_insertion_point(class_definition:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry)<sp/>*/</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry()<sp/>:<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry(nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>~TensorsToClassificationCalculatorOptions_LabelMap_Entry()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>from);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry(TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;&amp;<sp/>from)<sp/>noexcept</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry()<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>::std::move(from);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyFrom(from);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>operator=(TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;&amp;<sp/>from)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;from)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>==<sp/>from.GetOwningArena()</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>#ifdef<sp/>PROTOBUF_FORCE_COPY_IN_MOVE</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>GetOwningArena()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!PROTOBUF_FORCE_COPY_IN_MOVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InternalSwap(&amp;from);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CopyFrom(from);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&amp;<sp/>unknown_fields()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_metadata_.unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>inline<sp/>::PROTOBUF_NAMESPACE_ID::UnknownFieldSet*<sp/>mutable_unknown_fields()<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_metadata_.mutable_unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Descriptor*<sp/>descriptor()<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetDescriptor();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Descriptor*<sp/>GetDescriptor()<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_instance().GetMetadata().descriptor;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Reflection*<sp/>GetReflection()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_instance().GetMetadata().reflection;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>default_instance()<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*internal_default_instance();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>internal_default_instance()<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap_Entry*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_TensorsToClassificationCalculatorOptions_LabelMap_Entry_default_instance_);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kIndexInFileMessages<sp/>=</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>a,<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>a.Swap(&amp;b);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Swap(TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena())<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else<sp/><sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena())<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InternalSwap(other);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>other);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnsafeArenaSwap(TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>GOOGLE_DCHECK(GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>InternalSwap(other);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>Message<sp/>----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>New(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>const<sp/>final<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateMaybeMessage&lt;TensorsToClassificationCalculatorOptions_LabelMap_Entry&gt;(arena);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>using<sp/>::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>from);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>using<sp/>::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>from);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*<sp/>to,<sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message&amp;<sp/>from);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>PROTOBUF_ATTRIBUTE_REINITIALIZES<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>final;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInitialized()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ByteSizeLong()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_InternalParse(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseContext*<sp/>ctx)<sp/>final;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>_InternalSerialize(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>target,<sp/>::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream*<sp/>stream)<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetCachedSize()<sp/>const<sp/>final<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cached_size_.Get();<sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SharedCtor();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SharedDtor();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetCachedSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InternalSwap(TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>other);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>static<sp/>::PROTOBUF_NAMESPACE_ID::StringPiece<sp/>FullMessageName()<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_message_owned<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArenaDtor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ClassData<sp/>_class_data_;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Metadata<sp/>GetMetadata()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nested<sp/>types<sp/>----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>accessors<sp/>-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>kLabelFieldNumber<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>kIdFieldNumber<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>string<sp/>label<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_label()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_label()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_label();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT0<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_label(ArgT0&amp;&amp;<sp/>arg0,<sp/>ArgT...<sp/>args);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::string*<sp/>mutable_label();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>PROTOBUF_NODISCARD<sp/>std::string*<sp/>release_label();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_allocated_label(std::string*<sp/>label);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_internal_label()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PROTOBUF_ALWAYS_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_set_label(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::string*<sp/>_internal_mutable_label();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>id<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_id()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_id()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_id();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>int32_t<sp/>id()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_id(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>int32_t<sp/>_internal_id()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_set_id(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_scope:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Internal;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InternalArenaConstructable_;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DestructorSkippable_;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::HasBits&lt;1&gt;<sp/>_has_bits_;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>mutable<sp/>::PROTOBUF_NAMESPACE_ID::internal::CachedSize<sp/>_cached_size_;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr<sp/>label_;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>int32_t<sp/>id_;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>struct<sp/>::TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap<sp/>final<sp/>:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::PROTOBUF_NAMESPACE_ID::Message<sp/></highlight><highlight class="comment">/*<sp/>@@protoc_insertion_point(class_definition:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap)<sp/>*/</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap()<sp/>:<sp/>TensorsToClassificationCalculatorOptions_LabelMap(nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>~TensorsToClassificationCalculatorOptions_LabelMap()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelMap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>from);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelMap(TensorsToClassificationCalculatorOptions_LabelMap&amp;&amp;<sp/>from)<sp/>noexcept</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>TensorsToClassificationCalculatorOptions_LabelMap()<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>::std::move(from);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyFrom(from);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>operator=(TensorsToClassificationCalculatorOptions_LabelMap&amp;&amp;<sp/>from)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;from)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>==<sp/>from.GetOwningArena()</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>#ifdef<sp/>PROTOBUF_FORCE_COPY_IN_MOVE</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>GetOwningArena()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!PROTOBUF_FORCE_COPY_IN_MOVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InternalSwap(&amp;from);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CopyFrom(from);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&amp;<sp/>unknown_fields()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_metadata_.unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>inline<sp/>::PROTOBUF_NAMESPACE_ID::UnknownFieldSet*<sp/>mutable_unknown_fields()<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_metadata_.mutable_unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Descriptor*<sp/>descriptor()<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetDescriptor();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Descriptor*<sp/>GetDescriptor()<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_instance().GetMetadata().descriptor;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Reflection*<sp/>GetReflection()<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_instance().GetMetadata().reflection;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>default_instance()<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*internal_default_instance();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap*<sp/>internal_default_instance()<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_TensorsToClassificationCalculatorOptions_LabelMap_default_instance_);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kIndexInFileMessages<sp/>=</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>a,<sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>a.Swap(&amp;b);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Swap(TensorsToClassificationCalculatorOptions_LabelMap*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena())<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else<sp/><sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena())<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InternalSwap(other);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>other);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnsafeArenaSwap(TensorsToClassificationCalculatorOptions_LabelMap*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>GOOGLE_DCHECK(GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>InternalSwap(other);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>Message<sp/>----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelMap*<sp/>New(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>const<sp/>final<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateMaybeMessage&lt;TensorsToClassificationCalculatorOptions_LabelMap&gt;(arena);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>using<sp/>::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>from);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>using<sp/>::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>from);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*<sp/>to,<sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message&amp;<sp/>from);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>PROTOBUF_ATTRIBUTE_REINITIALIZES<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>final;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInitialized()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ByteSizeLong()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_InternalParse(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseContext*<sp/>ctx)<sp/>final;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>_InternalSerialize(</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>target,<sp/>::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream*<sp/>stream)<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetCachedSize()<sp/>const<sp/>final<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cached_size_.Get();<sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SharedCtor();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SharedDtor();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetCachedSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InternalSwap(TensorsToClassificationCalculatorOptions_LabelMap*<sp/>other);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>static<sp/>::PROTOBUF_NAMESPACE_ID::StringPiece<sp/>FullMessageName()<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;mediapipe.TensorsToClassificationCalculatorOptions.LabelMap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_message_owned<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArenaDtor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ClassData<sp/>_class_data_;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Metadata<sp/>GetMetadata()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nested<sp/>types<sp/>----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>typedef<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry<sp/>Entry;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>accessors<sp/>-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>kEntriesFieldNumber<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>repeated<sp/>.mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry<sp/>entries<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entries_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_internal_entries_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_entries();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>mutable_entries(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedPtrField&lt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry<sp/>&gt;*</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutable_entries();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>_internal_entries(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>_internal_add_entries();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>entries(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>add_entries();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedPtrField&lt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_scope:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Internal;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InternalArenaConstructable_;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DestructorSkippable_;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedPtrField&lt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry<sp/>&gt;<sp/>entries_;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>mutable<sp/>::PROTOBUF_NAMESPACE_ID::internal::CachedSize<sp/>_cached_size_;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>struct<sp/>::TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">};</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::PROTOBUF_NAMESPACE_ID::internal::MapEntry&lt;TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse,<sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t,<sp/>::mediapipe::LabelMapItem,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE&gt;<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>::PROTOBUF_NAMESPACE_ID::internal::MapEntry&lt;TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse,<sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t,<sp/>::mediapipe::LabelMapItem,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE&gt;<sp/>SuperType;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse(</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse&amp;<sp/>other);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse*<sp/>internal_default_instance()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;_TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse_default_instance_);<sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValidateKey(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValidateValue(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>using<sp/>::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Metadata<sp/>GetMetadata()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">class<sp/>TensorsToClassificationCalculatorOptions<sp/>final<sp/>:</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>::PROTOBUF_NAMESPACE_ID::Message<sp/></highlight><highlight class="comment">/*<sp/>@@protoc_insertion_point(class_definition:mediapipe.TensorsToClassificationCalculatorOptions)<sp/>*/</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions()<sp/>:<sp/>TensorsToClassificationCalculatorOptions(nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>~TensorsToClassificationCalculatorOptions()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>from);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions(TensorsToClassificationCalculatorOptions&amp;&amp;<sp/>from)<sp/>noexcept</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>TensorsToClassificationCalculatorOptions()<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>::std::move(from);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyFrom(from);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>operator=(TensorsToClassificationCalculatorOptions&amp;&amp;<sp/>from)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;from)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>==<sp/>from.GetOwningArena()</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>#ifdef<sp/>PROTOBUF_FORCE_COPY_IN_MOVE</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>GetOwningArena()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!PROTOBUF_FORCE_COPY_IN_MOVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InternalSwap(&amp;from);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CopyFrom(from);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&amp;<sp/>unknown_fields()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_metadata_.unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>inline<sp/>::PROTOBUF_NAMESPACE_ID::UnknownFieldSet*<sp/>mutable_unknown_fields()<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_metadata_.mutable_unknown_fields&lt;::PROTOBUF_NAMESPACE_ID::UnknownFieldSet&gt;();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Descriptor*<sp/>descriptor()<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetDescriptor();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Descriptor*<sp/>GetDescriptor()<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_instance().GetMetadata().descriptor;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Reflection*<sp/>GetReflection()<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_instance().GetMetadata().reflection;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>default_instance()<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*internal_default_instance();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions*<sp/>internal_default_instance()<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TensorsToClassificationCalculatorOptions*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_TensorsToClassificationCalculatorOptions_default_instance_);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kIndexInFileMessages<sp/>=</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>3;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(TensorsToClassificationCalculatorOptions&amp;<sp/>a,<sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>a.Swap(&amp;b);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Swap(TensorsToClassificationCalculatorOptions*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena())<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else<sp/><sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena())<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!PROTOBUF_FORCE_COPY_IN_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InternalSwap(other);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>other);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnsafeArenaSwap(TensorsToClassificationCalculatorOptions*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>GOOGLE_DCHECK(GetOwningArena()<sp/>==<sp/>other-&gt;GetOwningArena());</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>InternalSwap(other);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>Message<sp/>----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>TensorsToClassificationCalculatorOptions*<sp/>New(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>const<sp/>final<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateMaybeMessage&lt;TensorsToClassificationCalculatorOptions&gt;(arena);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>using<sp/>::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>from);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>using<sp/>::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions&amp;<sp/>from);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*<sp/>to,<sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message&amp;<sp/>from);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>PROTOBUF_ATTRIBUTE_REINITIALIZES<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>final;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInitialized()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ByteSizeLong()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_InternalParse(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/>::PROTOBUF_NAMESPACE_ID::internal::ParseContext*<sp/>ctx)<sp/>final;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>_InternalSerialize(</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>target,<sp/>::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream*<sp/>stream)<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetCachedSize()<sp/>const<sp/>final<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cached_size_.Get();<sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SharedCtor();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SharedDtor();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetCachedSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InternalSwap(TensorsToClassificationCalculatorOptions*<sp/>other);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>static<sp/>::PROTOBUF_NAMESPACE_ID::StringPiece<sp/>FullMessageName()<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;mediapipe.TensorsToClassificationCalculatorOptions&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_message_owned<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArenaDtor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*<sp/>arena);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ClassData<sp/>_class_data_;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Metadata<sp/>GetMetadata()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nested<sp/>types<sp/>----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>typedef<sp/>TensorsToClassificationCalculatorOptions_LabelMap<sp/>LabelMap;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>accessors<sp/>-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>enum<sp/>:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>kLabelItemsFieldNumber<sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>kIgnoreClassesFieldNumber<sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>kAllowClassesFieldNumber<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>kLabelMapPathFieldNumber<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>kLabelMapFieldNumber<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>kMinScoreThresholdFieldNumber<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>kTopKFieldNumber<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>kSortByDescendingScoreFieldNumber<sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>kBinaryClassificationFieldNumber<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map&lt;int64,<sp/>.mediapipe.LabelMapItem&gt;<sp/>label_items<sp/>=<sp/>6;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>label_items_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_internal_label_items_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_label_items();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_internal_label_items()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;*</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_internal_mutable_label_items();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label_items()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;*</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutable_label_items();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>repeated<sp/>int32<sp/>ignore_classes<sp/>=<sp/>7<sp/>[packed<sp/>=<sp/>true];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ignore_classes_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_internal_ignore_classes_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_ignore_classes();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>int32_t<sp/>_internal_ignore_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_internal_ignore_classes()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_add_ignore_classes(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_internal_mutable_ignore_classes();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>int32_t<sp/>ignore_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_ignore_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>int32_t<sp/>value);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_ignore_classes(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ignore_classes()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutable_ignore_classes();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>repeated<sp/>int32<sp/>allow_classes<sp/>=<sp/>8<sp/>[packed<sp/>=<sp/>true];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allow_classes_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_internal_allow_classes_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_allow_classes();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>int32_t<sp/>_internal_allow_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_internal_allow_classes()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_add_allow_classes(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_internal_mutable_allow_classes();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>int32_t<sp/>allow_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_allow_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>int32_t<sp/>value);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_allow_classes(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allow_classes()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutable_allow_classes();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>string<sp/>label_map_path<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_label_map_path()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_label_map_path()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_label_map_path();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label_map_path()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT0<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_label_map_path(ArgT0&amp;&amp;<sp/>arg0,<sp/>ArgT...<sp/>args);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>std::string*<sp/>mutable_label_map_path();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>PROTOBUF_NODISCARD<sp/>std::string*<sp/>release_label_map_path();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_allocated_label_map_path(std::string*<sp/>label_map_path);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_internal_label_map_path()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PROTOBUF_ALWAYS_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_set_label_map_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>std::string*<sp/>_internal_mutable_label_map_path();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>.mediapipe.TensorsToClassificationCalculatorOptions.LabelMap<sp/>label_map<sp/>=<sp/>5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_label_map()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_label_map()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_label_map();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>label_map()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>PROTOBUF_NODISCARD<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>release_label_map();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>mutable_label_map();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_allocated_label_map(::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>label_map);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>_internal_label_map()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>_internal_mutable_label_map();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unsafe_arena_set_allocated_label_map(</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>label_map);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>unsafe_arena_release_label_map();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>float<sp/>min_score_threshold<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_min_score_threshold()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_min_score_threshold()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_min_score_threshold();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_score_threshold()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_min_score_threshold(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_internal_min_score_threshold()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_set_min_score_threshold(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>top_k<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_top_k()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_top_k()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_top_k();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>int32_t<sp/>top_k()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_top_k(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>int32_t<sp/>_internal_top_k()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_set_top_k(int32_t<sp/>value);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>bool<sp/>sort_by_descending_score<sp/>=<sp/>9;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_sort_by_descending_score()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_sort_by_descending_score()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_sort_by_descending_score();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_by_descending_score()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_sort_by_descending_score(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_sort_by_descending_score()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_set_sort_by_descending_score(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>bool<sp/>binary_classification<sp/>=<sp/>4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_binary_classification()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_has_binary_classification()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_binary_classification();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary_classification()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_binary_classification(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_internal_binary_classification()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internal_set_binary_classification(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kExtFieldNumber<sp/>=<sp/>335742638;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>static<sp/>::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier&lt;<sp/>::mediapipe::CalculatorOptions,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits&lt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions<sp/>&gt;,<sp/>11,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&gt;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>ext;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(class_scope:mediapipe.TensorsToClassificationCalculatorOptions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Internal;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InternalArenaConstructable_;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DestructorSkippable_;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::HasBits&lt;1&gt;<sp/>_has_bits_;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>mutable<sp/>::PROTOBUF_NAMESPACE_ID::internal::CachedSize<sp/>_cached_size_;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::MapField&lt;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TensorsToClassificationCalculatorOptions_LabelItemsEntry_DoNotUse,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t,<sp/>::mediapipe::LabelMapItem,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE&gt;<sp/>label_items_;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;<sp/>ignore_classes_;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::atomic&lt;int&gt;<sp/>_ignore_classes_cached_byte_size_;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;<sp/>allow_classes_;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::atomic&lt;int&gt;<sp/>_allow_classes_cached_byte_size_;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr<sp/>label_map_path_;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>label_map_;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_score_threshold_;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>int32_t<sp/>top_k_;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_by_descending_score_;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary_classification_;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>struct<sp/>::TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto;</highlight></codeline>
<codeline lineno="769"><highlight class="normal">};</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wstrict-aliasing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>id<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::_internal_has_id()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000002u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::has_id()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_id();</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::clear_id()<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>id_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000002u;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::_internal_id()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::id()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry.id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_id();</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::_internal_set_id(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000002u;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>id_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::set_id(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>_internal_set_id(value);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry.id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>string<sp/>label<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::_internal_has_label()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000001u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::has_label()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_label();</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::clear_label()<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>label_.ClearToEmpty();</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000001u;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::label()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry.label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_label();</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PROTOBUF_ALWAYS_INLINE</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::set_label(ArgT0&amp;&amp;<sp/>arg0,<sp/>ArgT...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/>label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ArgT0<sp/>&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg0),<sp/>args...,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry.label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string*<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::mutable_label()<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>std::string*<sp/>_s<sp/>=<sp/>_internal_mutable_label();</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry.label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_s;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::_internal_label()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_.Get();</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::_internal_set_label(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},<sp/>value,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string*<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::_internal_mutable_label()<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string*<sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::release_label()<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_release:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry.label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_internal_has_label())<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000001u;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>label_.ReleaseNonDefault(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_.IsDefault(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()))<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>label_.Set(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap_Entry::set_allocated_label(std::string*<sp/>label)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000001u;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>label_.SetAllocated(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/>label,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_.IsDefault(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()))<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>label_.Set(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set_allocated:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry.label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TensorsToClassificationCalculatorOptions_LabelMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>repeated<sp/>.mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.Entry<sp/>entries<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap::_internal_entries_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entries_.size();</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap::entries_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_entries_size();</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions_LabelMap::clear_entries()<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>entries_.Clear();</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal">inline<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>TensorsToClassificationCalculatorOptions_LabelMap::mutable_entries(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entries_.Mutable(index);</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal">inline<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedPtrField&lt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry<sp/>&gt;*</highlight></codeline>
<codeline lineno="897"><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap::mutable_entries()<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable_list:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;entries_;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>TensorsToClassificationCalculatorOptions_LabelMap::_internal_entries(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entries_.Get(index);</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry&amp;<sp/>TensorsToClassificationCalculatorOptions_LabelMap::entries(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_entries(index);</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal">inline<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>TensorsToClassificationCalculatorOptions_LabelMap::_internal_add_entries()<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entries_.Add();</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal">inline<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>TensorsToClassificationCalculatorOptions_LabelMap::add_entries()<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry*<sp/>_add<sp/>=<sp/>_internal_add_entries();</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_add:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_add;</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedPtrField&lt;<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap_Entry<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">TensorsToClassificationCalculatorOptions_LabelMap::entries()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_list:mediapipe.TensorsToClassificationCalculatorOptions.LabelMap.entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entries_;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TensorsToClassificationCalculatorOptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>float<sp/>min_score_threshold<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_has_min_score_threshold()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000004u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::has_min_score_threshold()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_min_score_threshold();</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_min_score_threshold()<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>min_score_threshold_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000004u;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_min_score_threshold()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_score_threshold_;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::min_score_threshold()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.min_score_threshold)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_min_score_threshold();</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_set_min_score_threshold(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000004u;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>min_score_threshold_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_min_score_threshold(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>_internal_set_min_score_threshold(value);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.min_score_threshold)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>int32<sp/>top_k<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_has_top_k()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000008u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::has_top_k()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_top_k();</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_top_k()<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>top_k_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000008u;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions::_internal_top_k()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>top_k_;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions::top_k()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.top_k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_top_k();</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_set_top_k(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000008u;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>top_k_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_top_k(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>_internal_set_top_k(value);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.top_k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>bool<sp/>sort_by_descending_score<sp/>=<sp/>9;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_has_sort_by_descending_score()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000010u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::has_sort_by_descending_score()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_sort_by_descending_score();</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_sort_by_descending_score()<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>sort_by_descending_score_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000010u;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_sort_by_descending_score()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sort_by_descending_score_;</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::sort_by_descending_score()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.sort_by_descending_score)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_sort_by_descending_score();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_set_sort_by_descending_score(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000010u;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>sort_by_descending_score_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_sort_by_descending_score(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>_internal_set_sort_by_descending_score(value);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.sort_by_descending_score)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>string<sp/>label_map_path<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_has_label_map_path()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000001u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::has_label_map_path()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_label_map_path();</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_label_map_path()<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>label_map_path_.ClearToEmpty();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000001u;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>TensorsToClassificationCalculatorOptions::label_map_path()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.label_map_path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_label_map_path();</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PROTOBUF_ALWAYS_INLINE</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_label_map_path(ArgT0&amp;&amp;<sp/>arg0,<sp/>ArgT...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/>label_map_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ArgT0<sp/>&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg0),<sp/>args...,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.label_map_path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string*<sp/>TensorsToClassificationCalculatorOptions::mutable_label_map_path()<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>std::string*<sp/>_s<sp/>=<sp/>_internal_mutable_label_map_path();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable:mediapipe.TensorsToClassificationCalculatorOptions.label_map_path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_s;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>TensorsToClassificationCalculatorOptions::_internal_label_map_path()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_map_path_.Get();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_set_label_map_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>label_map_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},<sp/>value,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string*<sp/>TensorsToClassificationCalculatorOptions::_internal_mutable_label_map_path()<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_map_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string*<sp/>TensorsToClassificationCalculatorOptions::release_label_map_path()<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_release:mediapipe.TensorsToClassificationCalculatorOptions.label_map_path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_internal_has_label_map_path())<sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000001u;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>label_map_path_.ReleaseNonDefault(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_map_path_.IsDefault(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()))<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>label_map_path_.Set(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_allocated_label_map_path(std::string*<sp/>label_map_path)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_map_path<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000001u;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000001u;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>label_map_path_.SetAllocated(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/>label_map_path,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_map_path_.IsDefault(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()))<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>label_map_path_.Set(&amp;::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_DEFAULT_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set_allocated:mediapipe.TensorsToClassificationCalculatorOptions.label_map_path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>.mediapipe.TensorsToClassificationCalculatorOptions.LabelMap<sp/>label_map<sp/>=<sp/>5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_has_label_map()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000002u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>PROTOBUF_ASSUME(!value<sp/>||<sp/>label_map_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::has_label_map()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_label_map();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_label_map()<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_map_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>label_map_-&gt;Clear();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000002u;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>TensorsToClassificationCalculatorOptions::_internal_label_map()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>p<sp/>=<sp/>label_map_;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>*p<sp/>:<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::mediapipe::_TensorsToClassificationCalculatorOptions_LabelMap_default_instance_);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&amp;<sp/>TensorsToClassificationCalculatorOptions::label_map()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.label_map)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_label_map();</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::unsafe_arena_set_allocated_label_map(</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>label_map)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetArenaForAllocation()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">::PROTOBUF_NAMESPACE_ID::MessageLite*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(label_map_);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>label_map_<sp/>=<sp/>label_map;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_map)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000002u;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000002u;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TensorsToClassificationCalculatorOptions.label_map)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">inline<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>TensorsToClassificationCalculatorOptions::release_label_map()<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000002u;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>temp<sp/>=<sp/>label_map_;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>label_map_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTOBUF_FORCE_COPY_IN_RELEASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>old<sp/>=<sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">::PROTOBUF_NAMESPACE_ID::MessageLite*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(temp);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetArenaForAllocation()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>old;<sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>PROTOBUF_FORCE_COPY_IN_RELEASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetArenaForAllocation()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!PROTOBUF_FORCE_COPY_IN_RELEASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">inline<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>TensorsToClassificationCalculatorOptions::unsafe_arena_release_label_map()<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_release:mediapipe.TensorsToClassificationCalculatorOptions.label_map)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000002u;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>temp<sp/>=<sp/>label_map_;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>label_map_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">inline<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>TensorsToClassificationCalculatorOptions::_internal_mutable_label_map()<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000002u;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_map_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>CreateMaybeMessage&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&gt;(GetArenaForAllocation());</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>label_map_<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_map_;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">inline<sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>TensorsToClassificationCalculatorOptions::mutable_label_map()<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>_msg<sp/>=<sp/>_internal_mutable_label_map();</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable:mediapipe.TensorsToClassificationCalculatorOptions.label_map)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_msg;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_allocated_label_map(::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap*<sp/>label_map)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Arena*<sp/>message_arena<sp/>=<sp/>GetArenaForAllocation();</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_arena<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>label_map_;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_map)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Arena*<sp/>submessage_arena<sp/>=</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper&lt;::mediapipe::TensorsToClassificationCalculatorOptions_LabelMap&gt;::GetOwningArena(label_map);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_arena<sp/>!=<sp/>submessage_arena)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label_map<sp/>=<sp/>::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message_arena,<sp/>label_map,<sp/>submessage_arena);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000002u;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000002u;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>label_map_<sp/>=<sp/>label_map;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set_allocated:mediapipe.TensorsToClassificationCalculatorOptions.label_map)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>map&lt;int64,<sp/>.mediapipe.LabelMapItem&gt;<sp/>label_items<sp/>=<sp/>6;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_label_items_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_items_.size();</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::label_items_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_label_items_size();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">TensorsToClassificationCalculatorOptions::_internal_label_items()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_items_.GetMap();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">TensorsToClassificationCalculatorOptions::label_items()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_map:mediapipe.TensorsToClassificationCalculatorOptions.label_items)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_label_items();</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">inline<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;*</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">TensorsToClassificationCalculatorOptions::_internal_mutable_label_items()<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_items_.MutableMap();</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">inline<sp/>::PROTOBUF_NAMESPACE_ID::Map&lt;<sp/>int64_t,<sp/>::mediapipe::LabelMapItem<sp/>&gt;*</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">TensorsToClassificationCalculatorOptions::mutable_label_items()<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable_map:mediapipe.TensorsToClassificationCalculatorOptions.label_items)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_mutable_label_items();</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>bool<sp/>binary_classification<sp/>=<sp/>4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_has_binary_classification()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(_has_bits_[0]<sp/>&amp;<sp/>0x00000020u)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::has_binary_classification()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_has_binary_classification();</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_binary_classification()<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>binary_classification_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>&amp;=<sp/>~0x00000020u;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_binary_classification()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binary_classification_;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::binary_classification()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.binary_classification)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_binary_classification();</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_set_binary_classification(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>_has_bits_[0]<sp/>|=<sp/>0x00000020u;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>binary_classification_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_binary_classification(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>_internal_set_binary_classification(value);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.binary_classification)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>repeated<sp/>int32<sp/>ignore_classes<sp/>=<sp/>7<sp/>[packed<sp/>=<sp/>true];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_ignore_classes_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ignore_classes_.size();</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::ignore_classes_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_ignore_classes_size();</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_ignore_classes()<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>ignore_classes_.Clear();</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions::_internal_ignore_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ignore_classes_.Get(index);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions::ignore_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.ignore_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_ignore_classes(index);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_ignore_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>ignore_classes_.Set(index,<sp/>value);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.ignore_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_add_ignore_classes(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>ignore_classes_.Add(value);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::add_ignore_classes(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>_internal_add_ignore_classes(value);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_add:mediapipe.TensorsToClassificationCalculatorOptions.ignore_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">TensorsToClassificationCalculatorOptions::_internal_ignore_classes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ignore_classes_;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">TensorsToClassificationCalculatorOptions::ignore_classes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_list:mediapipe.TensorsToClassificationCalculatorOptions.ignore_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_ignore_classes();</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">inline<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">TensorsToClassificationCalculatorOptions::_internal_mutable_ignore_classes()<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ignore_classes_;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">inline<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">TensorsToClassificationCalculatorOptions::mutable_ignore_classes()<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable_list:mediapipe.TensorsToClassificationCalculatorOptions.ignore_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_mutable_ignore_classes();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>repeated<sp/>int32<sp/>allow_classes<sp/>=<sp/>8<sp/>[packed<sp/>=<sp/>true];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_allow_classes_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allow_classes_.size();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::allow_classes_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_allow_classes_size();</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::clear_allow_classes()<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>allow_classes_.Clear();</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions::_internal_allow_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allow_classes_.Get(index);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>TensorsToClassificationCalculatorOptions::allow_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_get:mediapipe.TensorsToClassificationCalculatorOptions.allow_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_allow_classes(index);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::set_allow_classes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>allow_classes_.Set(index,<sp/>value);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_set:mediapipe.TensorsToClassificationCalculatorOptions.allow_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::_internal_add_allow_classes(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>allow_classes_.Add(value);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TensorsToClassificationCalculatorOptions::add_allow_classes(int32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>_internal_add_allow_classes(value);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_add:mediapipe.TensorsToClassificationCalculatorOptions.allow_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal">TensorsToClassificationCalculatorOptions::_internal_allow_classes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allow_classes_;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">TensorsToClassificationCalculatorOptions::allow_classes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_list:mediapipe.TensorsToClassificationCalculatorOptions.allow_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_allow_classes();</highlight></codeline>
<codeline lineno="1308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">inline<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">TensorsToClassificationCalculatorOptions::_internal_mutable_allow_classes()<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;allow_classes_;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">inline<sp/>::PROTOBUF_NAMESPACE_ID::RepeatedField&lt;<sp/>int32_t<sp/>&gt;*</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">TensorsToClassificationCalculatorOptions::mutable_allow_classes()<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(field_mutable_list:mediapipe.TensorsToClassificationCalculatorOptions.allow_classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_internal_mutable_allow_classes();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(namespace_scope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mediapipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@@protoc_insertion_point(global_scope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/port_undef.inc&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fclassification_5fcalculator_2eproto</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR-plugins/hand_tracking/build/mediapipe/calculators/tensor/tensors_to_classification_calculator.pb.h"/>
  </compounddef>
</doxygen>
